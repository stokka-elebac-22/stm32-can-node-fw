
RC_STM32_CAN_Rx_Tx.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003c84  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000028  08003d94  08003d94  00013d94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003dbc  08003dbc  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08003dbc  08003dbc  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003dbc  08003dbc  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003dbc  08003dbc  00013dbc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003dc0  08003dc0  00013dc0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003dc4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000164  2000000c  08003dd0  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000170  08003dd0  00020170  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a2f9  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001872  00000000  00000000  0002a32e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ac8  00000000  00000000  0002bba0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000a10  00000000  00000000  0002c668  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016bd6  00000000  00000000  0002d078  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000a6f3  00000000  00000000  00043c4e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00086999  00000000  00000000  0004e341  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000d4cda  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002e38  00000000  00000000  000d4d2c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	2000000c 	.word	0x2000000c
 800012c:	00000000 	.word	0x00000000
 8000130:	08003d7c 	.word	0x08003d7c

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000010 	.word	0x20000010
 800014c:	08003d7c 	.word	0x08003d7c

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	; 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	3c01      	subs	r4, #1
 800028c:	bf28      	it	cs
 800028e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000292:	d2e9      	bcs.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dmul>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d6:	bf1d      	ittte	ne
 80004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004dc:	ea94 0f0c 	teqne	r4, ip
 80004e0:	ea95 0f0c 	teqne	r5, ip
 80004e4:	f000 f8de 	bleq	80006a4 <__aeabi_dmul+0x1dc>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea81 0603 	eor.w	r6, r1, r3
 80004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fa:	bf18      	it	ne
 80004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000500:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000504:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000508:	d038      	beq.n	800057c <__aeabi_dmul+0xb4>
 800050a:	fba0 ce02 	umull	ip, lr, r0, r2
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000516:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800051a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051e:	f04f 0600 	mov.w	r6, #0
 8000522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000526:	f09c 0f00 	teq	ip, #0
 800052a:	bf18      	it	ne
 800052c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000530:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000534:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000538:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800053c:	d204      	bcs.n	8000548 <__aeabi_dmul+0x80>
 800053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000542:	416d      	adcs	r5, r5
 8000544:	eb46 0606 	adc.w	r6, r6, r6
 8000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800055c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000560:	bf88      	it	hi
 8000562:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000566:	d81e      	bhi.n	80005a6 <__aeabi_dmul+0xde>
 8000568:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000580:	ea46 0101 	orr.w	r1, r6, r1
 8000584:	ea40 0002 	orr.w	r0, r0, r2
 8000588:	ea81 0103 	eor.w	r1, r1, r3
 800058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000590:	bfc2      	ittt	gt
 8000592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059a:	bd70      	popgt	{r4, r5, r6, pc}
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a0:	f04f 0e00 	mov.w	lr, #0
 80005a4:	3c01      	subs	r4, #1
 80005a6:	f300 80ab 	bgt.w	8000700 <__aeabi_dmul+0x238>
 80005aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ae:	bfde      	ittt	le
 80005b0:	2000      	movle	r0, #0
 80005b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005b6:	bd70      	pople	{r4, r5, r6, pc}
 80005b8:	f1c4 0400 	rsb	r4, r4, #0
 80005bc:	3c20      	subs	r4, #32
 80005be:	da35      	bge.n	800062c <__aeabi_dmul+0x164>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc1b      	bgt.n	80005fc <__aeabi_dmul+0x134>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0520 	rsb	r5, r4, #32
 80005cc:	fa00 f305 	lsl.w	r3, r0, r5
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f205 	lsl.w	r2, r1, r5
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ec:	eb42 0106 	adc.w	r1, r2, r6
 80005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f4:	bf08      	it	eq
 80005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f1c4 040c 	rsb	r4, r4, #12
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f304 	lsl.w	r3, r0, r4
 8000608:	fa20 f005 	lsr.w	r0, r0, r5
 800060c:	fa01 f204 	lsl.w	r2, r1, r4
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	f141 0100 	adc.w	r1, r1, #0
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f205 	lsl.w	r2, r0, r5
 8000634:	ea4e 0e02 	orr.w	lr, lr, r2
 8000638:	fa20 f304 	lsr.w	r3, r0, r4
 800063c:	fa01 f205 	lsl.w	r2, r1, r5
 8000640:	ea43 0302 	orr.w	r3, r3, r2
 8000644:	fa21 f004 	lsr.w	r0, r1, r4
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800064c:	fa21 f204 	lsr.w	r2, r1, r4
 8000650:	ea20 0002 	bic.w	r0, r0, r2
 8000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f094 0f00 	teq	r4, #0
 8000668:	d10f      	bne.n	800068a <__aeabi_dmul+0x1c2>
 800066a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	eb41 0101 	adc.w	r1, r1, r1
 8000674:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000678:	bf08      	it	eq
 800067a:	3c01      	subeq	r4, #1
 800067c:	d0f7      	beq.n	800066e <__aeabi_dmul+0x1a6>
 800067e:	ea41 0106 	orr.w	r1, r1, r6
 8000682:	f095 0f00 	teq	r5, #0
 8000686:	bf18      	it	ne
 8000688:	4770      	bxne	lr
 800068a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	eb43 0303 	adc.w	r3, r3, r3
 8000694:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000698:	bf08      	it	eq
 800069a:	3d01      	subeq	r5, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1c6>
 800069e:	ea43 0306 	orr.w	r3, r3, r6
 80006a2:	4770      	bx	lr
 80006a4:	ea94 0f0c 	teq	r4, ip
 80006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ac:	bf18      	it	ne
 80006ae:	ea95 0f0c 	teqne	r5, ip
 80006b2:	d00c      	beq.n	80006ce <__aeabi_dmul+0x206>
 80006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b8:	bf18      	it	ne
 80006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006be:	d1d1      	bne.n	8000664 <__aeabi_dmul+0x19c>
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d2:	bf06      	itte	eq
 80006d4:	4610      	moveq	r0, r2
 80006d6:	4619      	moveq	r1, r3
 80006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006dc:	d019      	beq.n	8000712 <__aeabi_dmul+0x24a>
 80006de:	ea94 0f0c 	teq	r4, ip
 80006e2:	d102      	bne.n	80006ea <__aeabi_dmul+0x222>
 80006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e8:	d113      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006ea:	ea95 0f0c 	teq	r5, ip
 80006ee:	d105      	bne.n	80006fc <__aeabi_dmul+0x234>
 80006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f4:	bf1c      	itt	ne
 80006f6:	4610      	movne	r0, r2
 80006f8:	4619      	movne	r1, r3
 80006fa:	d10a      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000708:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000716:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800071a:	bd70      	pop	{r4, r5, r6, pc}

0800071c <__aeabi_ddiv>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8a7 	bleq	800088a <__aeabi_ddiv+0x16e>
 800073c:	eba4 0405 	sub.w	r4, r4, r5
 8000740:	ea81 0e03 	eor.w	lr, r1, r3
 8000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800074c:	f000 8088 	beq.w	8000860 <__aeabi_ddiv+0x144>
 8000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000754:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000770:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000774:	429d      	cmp	r5, r3
 8000776:	bf08      	it	eq
 8000778:	4296      	cmpeq	r6, r2
 800077a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800077e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000782:	d202      	bcs.n	800078a <__aeabi_ddiv+0x6e>
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	1ab6      	subs	r6, r6, r2
 800078c:	eb65 0503 	sbc.w	r5, r5, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800079a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800079e:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a6:	bf22      	ittt	cs
 80007a8:	1ab6      	subcs	r6, r6, r2
 80007aa:	4675      	movcs	r5, lr
 80007ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007fc:	d018      	beq.n	8000830 <__aeabi_ddiv+0x114>
 80007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081a:	d1c0      	bne.n	800079e <__aeabi_ddiv+0x82>
 800081c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000820:	d10b      	bne.n	800083a <__aeabi_ddiv+0x11e>
 8000822:	ea41 0100 	orr.w	r1, r1, r0
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800082e:	e7b6      	b.n	800079e <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000834:	bf04      	itt	eq
 8000836:	4301      	orreq	r1, r0
 8000838:	2000      	moveq	r0, #0
 800083a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800083e:	bf88      	it	hi
 8000840:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000844:	f63f aeaf 	bhi.w	80005a6 <__aeabi_dmul+0xde>
 8000848:	ebb5 0c03 	subs.w	ip, r5, r3
 800084c:	bf04      	itt	eq
 800084e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000856:	f150 0000 	adcs.w	r0, r0, #0
 800085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800086c:	bfc2      	ittt	gt
 800086e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000876:	bd70      	popgt	{r4, r5, r6, pc}
 8000878:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800087c:	f04f 0e00 	mov.w	lr, #0
 8000880:	3c01      	subs	r4, #1
 8000882:	e690      	b.n	80005a6 <__aeabi_dmul+0xde>
 8000884:	ea45 0e06 	orr.w	lr, r5, r6
 8000888:	e68d      	b.n	80005a6 <__aeabi_dmul+0xde>
 800088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	bf08      	it	eq
 8000894:	ea95 0f0c 	teqeq	r5, ip
 8000898:	f43f af3b 	beq.w	8000712 <__aeabi_dmul+0x24a>
 800089c:	ea94 0f0c 	teq	r4, ip
 80008a0:	d10a      	bne.n	80008b8 <__aeabi_ddiv+0x19c>
 80008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a6:	f47f af34 	bne.w	8000712 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	f47f af25 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008b2:	4610      	mov	r0, r2
 80008b4:	4619      	mov	r1, r3
 80008b6:	e72c      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008b8:	ea95 0f0c 	teq	r5, ip
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x1b0>
 80008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c2:	f43f aefd 	beq.w	80006c0 <__aeabi_dmul+0x1f8>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e722      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d6:	f47f aec5 	bne.w	8000664 <__aeabi_dmul+0x19c>
 80008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008de:	f47f af0d 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e6:	f47f aeeb 	bne.w	80006c0 <__aeabi_dmul+0x1f8>
 80008ea:	e712      	b.n	8000712 <__aeabi_dmul+0x24a>

080008ec <__aeabi_d2uiz>:
 80008ec:	004a      	lsls	r2, r1, #1
 80008ee:	d211      	bcs.n	8000914 <__aeabi_d2uiz+0x28>
 80008f0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80008f4:	d211      	bcs.n	800091a <__aeabi_d2uiz+0x2e>
 80008f6:	d50d      	bpl.n	8000914 <__aeabi_d2uiz+0x28>
 80008f8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80008fc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000900:	d40e      	bmi.n	8000920 <__aeabi_d2uiz+0x34>
 8000902:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000906:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800090a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800090e:	fa23 f002 	lsr.w	r0, r3, r2
 8000912:	4770      	bx	lr
 8000914:	f04f 0000 	mov.w	r0, #0
 8000918:	4770      	bx	lr
 800091a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800091e:	d102      	bne.n	8000926 <__aeabi_d2uiz+0x3a>
 8000920:	f04f 30ff 	mov.w	r0, #4294967295
 8000924:	4770      	bx	lr
 8000926:	f04f 0000 	mov.w	r0, #0
 800092a:	4770      	bx	lr

0800092c <delay>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void delay (uint16_t time)
{
 800092c:	b480      	push	{r7}
 800092e:	b083      	sub	sp, #12
 8000930:	af00      	add	r7, sp, #0
 8000932:	4603      	mov	r3, r0
 8000934:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&htim1, 0);
 8000936:	4b08      	ldr	r3, [pc, #32]	; (8000958 <delay+0x2c>)
 8000938:	681b      	ldr	r3, [r3, #0]
 800093a:	2200      	movs	r2, #0
 800093c:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_TIM_GET_COUNTER (&htim1) < time);
 800093e:	bf00      	nop
 8000940:	4b05      	ldr	r3, [pc, #20]	; (8000958 <delay+0x2c>)
 8000942:	681b      	ldr	r3, [r3, #0]
 8000944:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000946:	88fb      	ldrh	r3, [r7, #6]
 8000948:	429a      	cmp	r2, r3
 800094a:	d3f9      	bcc.n	8000940 <delay+0x14>
}
 800094c:	bf00      	nop
 800094e:	bf00      	nop
 8000950:	370c      	adds	r7, #12
 8000952:	46bd      	mov	sp, r7
 8000954:	bc80      	pop	{r7}
 8000956:	4770      	bx	lr
 8000958:	20000050 	.word	0x20000050

0800095c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800095c:	b580      	push	{r7, lr}
 800095e:	b084      	sub	sp, #16
 8000960:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000962:	f000 fd45 	bl	80013f0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000966:	f000 f8f9 	bl	8000b5c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800096a:	f000 fa17 	bl	8000d9c <MX_GPIO_Init>
  MX_CAN_Init();
 800096e:	f000 f93b 	bl	8000be8 <MX_CAN_Init>
  MX_TIM2_Init();
 8000972:	f000 f9c5 	bl	8000d00 <MX_TIM2_Init>
  MX_TIM1_Init();
 8000976:	f000 f96d 	bl	8000c54 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_IC_Start_IT(&htim1, TIM_CHANNEL_1);
 800097a:	2100      	movs	r1, #0
 800097c:	4865      	ldr	r0, [pc, #404]	; (8000b14 <main+0x1b8>)
 800097e:	f002 fb71 	bl	8003064 <HAL_TIM_IC_Start_IT>
  HAL_TIM_Base_Start_IT(&htim2);
 8000982:	4865      	ldr	r0, [pc, #404]	; (8000b18 <main+0x1bc>)
 8000984:	f002 facc 	bl	8002f20 <HAL_TIM_Base_Start_IT>

  canfil.FilterBank = 0;
 8000988:	4b64      	ldr	r3, [pc, #400]	; (8000b1c <main+0x1c0>)
 800098a:	2200      	movs	r2, #0
 800098c:	615a      	str	r2, [r3, #20]
  canfil.FilterMode = CAN_FILTERMODE_IDMASK;
 800098e:	4b63      	ldr	r3, [pc, #396]	; (8000b1c <main+0x1c0>)
 8000990:	2200      	movs	r2, #0
 8000992:	619a      	str	r2, [r3, #24]
  canfil.FilterFIFOAssignment = CAN_RX_FIFO0;
 8000994:	4b61      	ldr	r3, [pc, #388]	; (8000b1c <main+0x1c0>)
 8000996:	2200      	movs	r2, #0
 8000998:	611a      	str	r2, [r3, #16]
  canfil.FilterIdHigh = 0;
 800099a:	4b60      	ldr	r3, [pc, #384]	; (8000b1c <main+0x1c0>)
 800099c:	2200      	movs	r2, #0
 800099e:	601a      	str	r2, [r3, #0]
  canfil.FilterIdLow = 0;
 80009a0:	4b5e      	ldr	r3, [pc, #376]	; (8000b1c <main+0x1c0>)
 80009a2:	2200      	movs	r2, #0
 80009a4:	605a      	str	r2, [r3, #4]
  canfil.FilterMaskIdHigh = 0;
 80009a6:	4b5d      	ldr	r3, [pc, #372]	; (8000b1c <main+0x1c0>)
 80009a8:	2200      	movs	r2, #0
 80009aa:	609a      	str	r2, [r3, #8]
  canfil.FilterMaskIdLow = 0;
 80009ac:	4b5b      	ldr	r3, [pc, #364]	; (8000b1c <main+0x1c0>)
 80009ae:	2200      	movs	r2, #0
 80009b0:	60da      	str	r2, [r3, #12]
  canfil.FilterScale = CAN_FILTERSCALE_32BIT;
 80009b2:	4b5a      	ldr	r3, [pc, #360]	; (8000b1c <main+0x1c0>)
 80009b4:	2201      	movs	r2, #1
 80009b6:	61da      	str	r2, [r3, #28]
  canfil.FilterActivation = ENABLE;
 80009b8:	4b58      	ldr	r3, [pc, #352]	; (8000b1c <main+0x1c0>)
 80009ba:	2201      	movs	r2, #1
 80009bc:	621a      	str	r2, [r3, #32]
  canfil.SlaveStartFilterBank = 14;
 80009be:	4b57      	ldr	r3, [pc, #348]	; (8000b1c <main+0x1c0>)
 80009c0:	220e      	movs	r2, #14
 80009c2:	625a      	str	r2, [r3, #36]	; 0x24

  txHeader.DLC = 8;
 80009c4:	4b56      	ldr	r3, [pc, #344]	; (8000b20 <main+0x1c4>)
 80009c6:	2208      	movs	r2, #8
 80009c8:	611a      	str	r2, [r3, #16]
  txHeader.IDE = CAN_ID_STD;
 80009ca:	4b55      	ldr	r3, [pc, #340]	; (8000b20 <main+0x1c4>)
 80009cc:	2200      	movs	r2, #0
 80009ce:	609a      	str	r2, [r3, #8]
  txHeader.RTR = CAN_RTR_DATA;
 80009d0:	4b53      	ldr	r3, [pc, #332]	; (8000b20 <main+0x1c4>)
 80009d2:	2200      	movs	r2, #0
 80009d4:	60da      	str	r2, [r3, #12]
  txHeader.StdId = CAN_TEST_MSG_ID;
 80009d6:	4b52      	ldr	r3, [pc, #328]	; (8000b20 <main+0x1c4>)
 80009d8:	2250      	movs	r2, #80	; 0x50
 80009da:	601a      	str	r2, [r3, #0]
  txHeader.ExtId = 0x02;
 80009dc:	4b50      	ldr	r3, [pc, #320]	; (8000b20 <main+0x1c4>)
 80009de:	2202      	movs	r2, #2
 80009e0:	605a      	str	r2, [r3, #4]
  txHeader.TransmitGlobalTime = DISABLE;
 80009e2:	4b4f      	ldr	r3, [pc, #316]	; (8000b20 <main+0x1c4>)
 80009e4:	2200      	movs	r2, #0
 80009e6:	751a      	strb	r2, [r3, #20]

  HAL_CAN_ConfigFilter(&hcan,&canfil);
 80009e8:	494c      	ldr	r1, [pc, #304]	; (8000b1c <main+0x1c0>)
 80009ea:	484e      	ldr	r0, [pc, #312]	; (8000b24 <main+0x1c8>)
 80009ec:	f000 fe5d 	bl	80016aa <HAL_CAN_ConfigFilter>
  HAL_CAN_Start(&hcan);
 80009f0:	484c      	ldr	r0, [pc, #304]	; (8000b24 <main+0x1c8>)
 80009f2:	f000 ff23 	bl	800183c <HAL_CAN_Start>
  HAL_CAN_ActivateNotification(&hcan,CAN_IT_RX_FIFO0_MSG_PENDING);
 80009f6:	2102      	movs	r1, #2
 80009f8:	484a      	ldr	r0, [pc, #296]	; (8000b24 <main+0x1c8>)
 80009fa:	f001 f94e 	bl	8001c9a <HAL_CAN_ActivateNotification>

  if (HAL_GPIO_ReadPin(PLACE_PORT, PLACE_PIN_FRONT)) {
 80009fe:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000a02:	4849      	ldr	r0, [pc, #292]	; (8000b28 <main+0x1cc>)
 8000a04:	f001 fe24 	bl	8002650 <HAL_GPIO_ReadPin>
 8000a08:	4603      	mov	r3, r0
 8000a0a:	2b00      	cmp	r3, #0
 8000a0c:	d005      	beq.n	8000a1a <main+0xbe>
	  Placement += 1;
 8000a0e:	4b47      	ldr	r3, [pc, #284]	; (8000b2c <main+0x1d0>)
 8000a10:	781b      	ldrb	r3, [r3, #0]
 8000a12:	3301      	adds	r3, #1
 8000a14:	b2da      	uxtb	r2, r3
 8000a16:	4b45      	ldr	r3, [pc, #276]	; (8000b2c <main+0x1d0>)
 8000a18:	701a      	strb	r2, [r3, #0]
  }
  if (HAL_GPIO_ReadPin(PLACE_PORT, PLACE__PIN_LEFT)) {
 8000a1a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000a1e:	4842      	ldr	r0, [pc, #264]	; (8000b28 <main+0x1cc>)
 8000a20:	f001 fe16 	bl	8002650 <HAL_GPIO_ReadPin>
 8000a24:	4603      	mov	r3, r0
 8000a26:	2b00      	cmp	r3, #0
 8000a28:	d005      	beq.n	8000a36 <main+0xda>
	  Placement += 2;
 8000a2a:	4b40      	ldr	r3, [pc, #256]	; (8000b2c <main+0x1d0>)
 8000a2c:	781b      	ldrb	r3, [r3, #0]
 8000a2e:	3302      	adds	r3, #2
 8000a30:	b2da      	uxtb	r2, r3
 8000a32:	4b3e      	ldr	r3, [pc, #248]	; (8000b2c <main+0x1d0>)
 8000a34:	701a      	strb	r2, [r3, #0]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if (flag_blink_light && blink_status) {
 8000a36:	4b3e      	ldr	r3, [pc, #248]	; (8000b30 <main+0x1d4>)
 8000a38:	781b      	ldrb	r3, [r3, #0]
 8000a3a:	2b00      	cmp	r3, #0
 8000a3c:	d009      	beq.n	8000a52 <main+0xf6>
 8000a3e:	4b3d      	ldr	r3, [pc, #244]	; (8000b34 <main+0x1d8>)
 8000a40:	681b      	ldr	r3, [r3, #0]
 8000a42:	2b00      	cmp	r3, #0
 8000a44:	d005      	beq.n	8000a52 <main+0xf6>
		  HAL_GPIO_WritePin(BLINKER_PORT, BLINKER_PIN, GPIO_PIN_SET);
 8000a46:	2201      	movs	r2, #1
 8000a48:	2108      	movs	r1, #8
 8000a4a:	483b      	ldr	r0, [pc, #236]	; (8000b38 <main+0x1dc>)
 8000a4c:	f001 fe17 	bl	800267e <HAL_GPIO_WritePin>
 8000a50:	e004      	b.n	8000a5c <main+0x100>
	  } else {
		  HAL_GPIO_WritePin(BLINKER_PORT, BLINKER_PIN, GPIO_PIN_RESET);
 8000a52:	2200      	movs	r2, #0
 8000a54:	2108      	movs	r1, #8
 8000a56:	4838      	ldr	r0, [pc, #224]	; (8000b38 <main+0x1dc>)
 8000a58:	f001 fe11 	bl	800267e <HAL_GPIO_WritePin>
	  }
	  if (light_status) {
 8000a5c:	4b37      	ldr	r3, [pc, #220]	; (8000b3c <main+0x1e0>)
 8000a5e:	681b      	ldr	r3, [r3, #0]
 8000a60:	2b00      	cmp	r3, #0
 8000a62:	d005      	beq.n	8000a70 <main+0x114>
		  HAL_GPIO_WritePin(LIGHT_PORT, LIGHT_PIN, GPIO_PIN_SET);
 8000a64:	2201      	movs	r2, #1
 8000a66:	2140      	movs	r1, #64	; 0x40
 8000a68:	4833      	ldr	r0, [pc, #204]	; (8000b38 <main+0x1dc>)
 8000a6a:	f001 fe08 	bl	800267e <HAL_GPIO_WritePin>
 8000a6e:	e004      	b.n	8000a7a <main+0x11e>
	  } else {
		  HAL_GPIO_WritePin(LIGHT_PORT, LIGHT_PIN, GPIO_PIN_RESET);
 8000a70:	2200      	movs	r2, #0
 8000a72:	2140      	movs	r1, #64	; 0x40
 8000a74:	4830      	ldr	r0, [pc, #192]	; (8000b38 <main+0x1dc>)
 8000a76:	f001 fe02 	bl	800267e <HAL_GPIO_WritePin>
	  }
	  if (flag_send_test_msg && flag_send_data) {
 8000a7a:	4b31      	ldr	r3, [pc, #196]	; (8000b40 <main+0x1e4>)
 8000a7c:	781b      	ldrb	r3, [r3, #0]
 8000a7e:	2b00      	cmp	r3, #0
 8000a80:	d014      	beq.n	8000aac <main+0x150>
 8000a82:	4b30      	ldr	r3, [pc, #192]	; (8000b44 <main+0x1e8>)
 8000a84:	781b      	ldrb	r3, [r3, #0]
 8000a86:	2b00      	cmp	r3, #0
 8000a88:	d010      	beq.n	8000aac <main+0x150>
		  txHeader.StdId = CAN_TEST_MSG_ID;
 8000a8a:	4b25      	ldr	r3, [pc, #148]	; (8000b20 <main+0x1c4>)
 8000a8c:	2250      	movs	r2, #80	; 0x50
 8000a8e:	601a      	str	r2, [r3, #0]
		  uint8_t csend[] = {0x01,0x02,0x03,0x04,0x05,0x06,0x07,0x08};
 8000a90:	4a2d      	ldr	r2, [pc, #180]	; (8000b48 <main+0x1ec>)
 8000a92:	f107 0308 	add.w	r3, r7, #8
 8000a96:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000a9a:	e883 0003 	stmia.w	r3, {r0, r1}
		  HAL_CAN_AddTxMessage(&hcan,&txHeader,csend,&canMailbox);
 8000a9e:	f107 0208 	add.w	r2, r7, #8
 8000aa2:	4b2a      	ldr	r3, [pc, #168]	; (8000b4c <main+0x1f0>)
 8000aa4:	491e      	ldr	r1, [pc, #120]	; (8000b20 <main+0x1c4>)
 8000aa6:	481f      	ldr	r0, [pc, #124]	; (8000b24 <main+0x1c8>)
 8000aa8:	f000 ff0c 	bl	80018c4 <HAL_CAN_AddTxMessage>

	  }
	  if (flag_send_data) {
 8000aac:	4b25      	ldr	r3, [pc, #148]	; (8000b44 <main+0x1e8>)
 8000aae:	781b      	ldrb	r3, [r3, #0]
 8000ab0:	2b00      	cmp	r3, #0
 8000ab2:	d002      	beq.n	8000aba <main+0x15e>
		  flag_send_data = 0;
 8000ab4:	4b23      	ldr	r3, [pc, #140]	; (8000b44 <main+0x1e8>)
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	701a      	strb	r2, [r3, #0]
	  }
	  if (flag_read_dist_sensor) {
 8000aba:	4b25      	ldr	r3, [pc, #148]	; (8000b50 <main+0x1f4>)
 8000abc:	781b      	ldrb	r3, [r3, #0]
 8000abe:	2b00      	cmp	r3, #0
 8000ac0:	d004      	beq.n	8000acc <main+0x170>
		  flag_read_dist_sensor = 0;
 8000ac2:	4b23      	ldr	r3, [pc, #140]	; (8000b50 <main+0x1f4>)
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	701a      	strb	r2, [r3, #0]
		  HCSR04_Read();
 8000ac8:	f000 fae8 	bl	800109c <HCSR04_Read>
	  }
	  if (flag_tx_sensor_data != 0) {
 8000acc:	4b21      	ldr	r3, [pc, #132]	; (8000b54 <main+0x1f8>)
 8000ace:	781b      	ldrb	r3, [r3, #0]
 8000ad0:	2b00      	cmp	r3, #0
 8000ad2:	d0b0      	beq.n	8000a36 <main+0xda>
		  flag_tx_sensor_data = 0;
 8000ad4:	4b1f      	ldr	r3, [pc, #124]	; (8000b54 <main+0x1f8>)
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	701a      	strb	r2, [r3, #0]
		  uint8_t csend[] = {Placement,0x00,0x00,0x00,0x00,0x00,0x00,hcsr04_dist};
 8000ada:	4b14      	ldr	r3, [pc, #80]	; (8000b2c <main+0x1d0>)
 8000adc:	781b      	ldrb	r3, [r3, #0]
 8000ade:	703b      	strb	r3, [r7, #0]
 8000ae0:	2300      	movs	r3, #0
 8000ae2:	707b      	strb	r3, [r7, #1]
 8000ae4:	2300      	movs	r3, #0
 8000ae6:	70bb      	strb	r3, [r7, #2]
 8000ae8:	2300      	movs	r3, #0
 8000aea:	70fb      	strb	r3, [r7, #3]
 8000aec:	2300      	movs	r3, #0
 8000aee:	713b      	strb	r3, [r7, #4]
 8000af0:	2300      	movs	r3, #0
 8000af2:	717b      	strb	r3, [r7, #5]
 8000af4:	2300      	movs	r3, #0
 8000af6:	71bb      	strb	r3, [r7, #6]
 8000af8:	4b17      	ldr	r3, [pc, #92]	; (8000b58 <main+0x1fc>)
 8000afa:	781b      	ldrb	r3, [r3, #0]
 8000afc:	71fb      	strb	r3, [r7, #7]
		  txHeader.StdId = CAN_SENSOR_DATA_ID;
 8000afe:	4b08      	ldr	r3, [pc, #32]	; (8000b20 <main+0x1c4>)
 8000b00:	2230      	movs	r2, #48	; 0x30
 8000b02:	601a      	str	r2, [r3, #0]
		  HAL_CAN_AddTxMessage(&hcan,&txHeader,csend,&canMailbox);
 8000b04:	463a      	mov	r2, r7
 8000b06:	4b11      	ldr	r3, [pc, #68]	; (8000b4c <main+0x1f0>)
 8000b08:	4905      	ldr	r1, [pc, #20]	; (8000b20 <main+0x1c4>)
 8000b0a:	4806      	ldr	r0, [pc, #24]	; (8000b24 <main+0x1c8>)
 8000b0c:	f000 feda 	bl	80018c4 <HAL_CAN_AddTxMessage>
	  if (flag_blink_light && blink_status) {
 8000b10:	e791      	b.n	8000a36 <main+0xda>
 8000b12:	bf00      	nop
 8000b14:	20000050 	.word	0x20000050
 8000b18:	20000098 	.word	0x20000098
 8000b1c:	20000140 	.word	0x20000140
 8000b20:	20000120 	.word	0x20000120
 8000b24:	20000028 	.word	0x20000028
 8000b28:	40010c00 	.word	0x40010c00
 8000b2c:	200000e0 	.word	0x200000e0
 8000b30:	200000e2 	.word	0x200000e2
 8000b34:	200000ec 	.word	0x200000ec
 8000b38:	40010800 	.word	0x40010800
 8000b3c:	200000e8 	.word	0x200000e8
 8000b40:	200000e6 	.word	0x200000e6
 8000b44:	200000e1 	.word	0x200000e1
 8000b48:	08003d94 	.word	0x08003d94
 8000b4c:	20000168 	.word	0x20000168
 8000b50:	200000e3 	.word	0x200000e3
 8000b54:	200000e4 	.word	0x200000e4
 8000b58:	20000100 	.word	0x20000100

08000b5c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	b090      	sub	sp, #64	; 0x40
 8000b60:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b62:	f107 0318 	add.w	r3, r7, #24
 8000b66:	2228      	movs	r2, #40	; 0x28
 8000b68:	2100      	movs	r1, #0
 8000b6a:	4618      	mov	r0, r3
 8000b6c:	f003 f8fe 	bl	8003d6c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b70:	1d3b      	adds	r3, r7, #4
 8000b72:	2200      	movs	r2, #0
 8000b74:	601a      	str	r2, [r3, #0]
 8000b76:	605a      	str	r2, [r3, #4]
 8000b78:	609a      	str	r2, [r3, #8]
 8000b7a:	60da      	str	r2, [r3, #12]
 8000b7c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000b7e:	2301      	movs	r3, #1
 8000b80:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000b82:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000b86:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000b88:	2300      	movs	r3, #0
 8000b8a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000b8c:	2301      	movs	r3, #1
 8000b8e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b90:	2302      	movs	r3, #2
 8000b92:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000b94:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000b98:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000b9a:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000b9e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ba0:	f107 0318 	add.w	r3, r7, #24
 8000ba4:	4618      	mov	r0, r3
 8000ba6:	f001 fd83 	bl	80026b0 <HAL_RCC_OscConfig>
 8000baa:	4603      	mov	r3, r0
 8000bac:	2b00      	cmp	r3, #0
 8000bae:	d001      	beq.n	8000bb4 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000bb0:	f000 fa94 	bl	80010dc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000bb4:	230f      	movs	r3, #15
 8000bb6:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000bb8:	2302      	movs	r3, #2
 8000bba:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000bc0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000bc4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000bca:	1d3b      	adds	r3, r7, #4
 8000bcc:	2102      	movs	r1, #2
 8000bce:	4618      	mov	r0, r3
 8000bd0:	f001 fff0 	bl	8002bb4 <HAL_RCC_ClockConfig>
 8000bd4:	4603      	mov	r3, r0
 8000bd6:	2b00      	cmp	r3, #0
 8000bd8:	d001      	beq.n	8000bde <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000bda:	f000 fa7f 	bl	80010dc <Error_Handler>
  }
}
 8000bde:	bf00      	nop
 8000be0:	3740      	adds	r7, #64	; 0x40
 8000be2:	46bd      	mov	sp, r7
 8000be4:	bd80      	pop	{r7, pc}
	...

08000be8 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 8000bec:	4b17      	ldr	r3, [pc, #92]	; (8000c4c <MX_CAN_Init+0x64>)
 8000bee:	4a18      	ldr	r2, [pc, #96]	; (8000c50 <MX_CAN_Init+0x68>)
 8000bf0:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 9;
 8000bf2:	4b16      	ldr	r3, [pc, #88]	; (8000c4c <MX_CAN_Init+0x64>)
 8000bf4:	2209      	movs	r2, #9
 8000bf6:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8000bf8:	4b14      	ldr	r3, [pc, #80]	; (8000c4c <MX_CAN_Init+0x64>)
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000bfe:	4b13      	ldr	r3, [pc, #76]	; (8000c4c <MX_CAN_Init+0x64>)
 8000c00:	2200      	movs	r2, #0
 8000c02:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_3TQ;
 8000c04:	4b11      	ldr	r3, [pc, #68]	; (8000c4c <MX_CAN_Init+0x64>)
 8000c06:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000c0a:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_4TQ;
 8000c0c:	4b0f      	ldr	r3, [pc, #60]	; (8000c4c <MX_CAN_Init+0x64>)
 8000c0e:	f44f 1240 	mov.w	r2, #3145728	; 0x300000
 8000c12:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8000c14:	4b0d      	ldr	r3, [pc, #52]	; (8000c4c <MX_CAN_Init+0x64>)
 8000c16:	2200      	movs	r2, #0
 8000c18:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 8000c1a:	4b0c      	ldr	r3, [pc, #48]	; (8000c4c <MX_CAN_Init+0x64>)
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8000c20:	4b0a      	ldr	r3, [pc, #40]	; (8000c4c <MX_CAN_Init+0x64>)
 8000c22:	2200      	movs	r2, #0
 8000c24:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 8000c26:	4b09      	ldr	r3, [pc, #36]	; (8000c4c <MX_CAN_Init+0x64>)
 8000c28:	2200      	movs	r2, #0
 8000c2a:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8000c2c:	4b07      	ldr	r3, [pc, #28]	; (8000c4c <MX_CAN_Init+0x64>)
 8000c2e:	2200      	movs	r2, #0
 8000c30:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8000c32:	4b06      	ldr	r3, [pc, #24]	; (8000c4c <MX_CAN_Init+0x64>)
 8000c34:	2200      	movs	r2, #0
 8000c36:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8000c38:	4804      	ldr	r0, [pc, #16]	; (8000c4c <MX_CAN_Init+0x64>)
 8000c3a:	f000 fc3b 	bl	80014b4 <HAL_CAN_Init>
 8000c3e:	4603      	mov	r3, r0
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	d001      	beq.n	8000c48 <MX_CAN_Init+0x60>
  {
    Error_Handler();
 8000c44:	f000 fa4a 	bl	80010dc <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 8000c48:	bf00      	nop
 8000c4a:	bd80      	pop	{r7, pc}
 8000c4c:	20000028 	.word	0x20000028
 8000c50:	40006400 	.word	0x40006400

08000c54 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	b086      	sub	sp, #24
 8000c58:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c5a:	f107 0310 	add.w	r3, r7, #16
 8000c5e:	2200      	movs	r2, #0
 8000c60:	601a      	str	r2, [r3, #0]
 8000c62:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000c64:	463b      	mov	r3, r7
 8000c66:	2200      	movs	r2, #0
 8000c68:	601a      	str	r2, [r3, #0]
 8000c6a:	605a      	str	r2, [r3, #4]
 8000c6c:	609a      	str	r2, [r3, #8]
 8000c6e:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000c70:	4b21      	ldr	r3, [pc, #132]	; (8000cf8 <MX_TIM1_Init+0xa4>)
 8000c72:	4a22      	ldr	r2, [pc, #136]	; (8000cfc <MX_TIM1_Init+0xa8>)
 8000c74:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 72-1;
 8000c76:	4b20      	ldr	r3, [pc, #128]	; (8000cf8 <MX_TIM1_Init+0xa4>)
 8000c78:	2247      	movs	r2, #71	; 0x47
 8000c7a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c7c:	4b1e      	ldr	r3, [pc, #120]	; (8000cf8 <MX_TIM1_Init+0xa4>)
 8000c7e:	2200      	movs	r2, #0
 8000c80:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0xffff-1;
 8000c82:	4b1d      	ldr	r3, [pc, #116]	; (8000cf8 <MX_TIM1_Init+0xa4>)
 8000c84:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8000c88:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c8a:	4b1b      	ldr	r3, [pc, #108]	; (8000cf8 <MX_TIM1_Init+0xa4>)
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000c90:	4b19      	ldr	r3, [pc, #100]	; (8000cf8 <MX_TIM1_Init+0xa4>)
 8000c92:	2200      	movs	r2, #0
 8000c94:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c96:	4b18      	ldr	r3, [pc, #96]	; (8000cf8 <MX_TIM1_Init+0xa4>)
 8000c98:	2200      	movs	r2, #0
 8000c9a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 8000c9c:	4816      	ldr	r0, [pc, #88]	; (8000cf8 <MX_TIM1_Init+0xa4>)
 8000c9e:	f002 f991 	bl	8002fc4 <HAL_TIM_IC_Init>
 8000ca2:	4603      	mov	r3, r0
 8000ca4:	2b00      	cmp	r3, #0
 8000ca6:	d001      	beq.n	8000cac <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8000ca8:	f000 fa18 	bl	80010dc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000cac:	2300      	movs	r3, #0
 8000cae:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000cb4:	f107 0310 	add.w	r3, r7, #16
 8000cb8:	4619      	mov	r1, r3
 8000cba:	480f      	ldr	r0, [pc, #60]	; (8000cf8 <MX_TIM1_Init+0xa4>)
 8000cbc:	f002 ffc2 	bl	8003c44 <HAL_TIMEx_MasterConfigSynchronization>
 8000cc0:	4603      	mov	r3, r0
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d001      	beq.n	8000cca <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 8000cc6:	f000 fa09 	bl	80010dc <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000cca:	2300      	movs	r3, #0
 8000ccc:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000cce:	2301      	movs	r3, #1
 8000cd0:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8000cda:	463b      	mov	r3, r7
 8000cdc:	2200      	movs	r2, #0
 8000cde:	4619      	mov	r1, r3
 8000ce0:	4805      	ldr	r0, [pc, #20]	; (8000cf8 <MX_TIM1_Init+0xa4>)
 8000ce2:	f002 fbcd 	bl	8003480 <HAL_TIM_IC_ConfigChannel>
 8000ce6:	4603      	mov	r3, r0
 8000ce8:	2b00      	cmp	r3, #0
 8000cea:	d001      	beq.n	8000cf0 <MX_TIM1_Init+0x9c>
  {
    Error_Handler();
 8000cec:	f000 f9f6 	bl	80010dc <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000cf0:	bf00      	nop
 8000cf2:	3718      	adds	r7, #24
 8000cf4:	46bd      	mov	sp, r7
 8000cf6:	bd80      	pop	{r7, pc}
 8000cf8:	20000050 	.word	0x20000050
 8000cfc:	40012c00 	.word	0x40012c00

08000d00 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	b086      	sub	sp, #24
 8000d04:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000d06:	f107 0308 	add.w	r3, r7, #8
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	601a      	str	r2, [r3, #0]
 8000d0e:	605a      	str	r2, [r3, #4]
 8000d10:	609a      	str	r2, [r3, #8]
 8000d12:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d14:	463b      	mov	r3, r7
 8000d16:	2200      	movs	r2, #0
 8000d18:	601a      	str	r2, [r3, #0]
 8000d1a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000d1c:	4b1e      	ldr	r3, [pc, #120]	; (8000d98 <MX_TIM2_Init+0x98>)
 8000d1e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000d22:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 35999;
 8000d24:	4b1c      	ldr	r3, [pc, #112]	; (8000d98 <MX_TIM2_Init+0x98>)
 8000d26:	f648 429f 	movw	r2, #35999	; 0x8c9f
 8000d2a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d2c:	4b1a      	ldr	r3, [pc, #104]	; (8000d98 <MX_TIM2_Init+0x98>)
 8000d2e:	2200      	movs	r2, #0
 8000d30:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 800;
 8000d32:	4b19      	ldr	r3, [pc, #100]	; (8000d98 <MX_TIM2_Init+0x98>)
 8000d34:	f44f 7248 	mov.w	r2, #800	; 0x320
 8000d38:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d3a:	4b17      	ldr	r3, [pc, #92]	; (8000d98 <MX_TIM2_Init+0x98>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d40:	4b15      	ldr	r3, [pc, #84]	; (8000d98 <MX_TIM2_Init+0x98>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000d46:	4814      	ldr	r0, [pc, #80]	; (8000d98 <MX_TIM2_Init+0x98>)
 8000d48:	f002 f89a 	bl	8002e80 <HAL_TIM_Base_Init>
 8000d4c:	4603      	mov	r3, r0
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d001      	beq.n	8000d56 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8000d52:	f000 f9c3 	bl	80010dc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d56:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d5a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000d5c:	f107 0308 	add.w	r3, r7, #8
 8000d60:	4619      	mov	r1, r3
 8000d62:	480d      	ldr	r0, [pc, #52]	; (8000d98 <MX_TIM2_Init+0x98>)
 8000d64:	f002 fc20 	bl	80035a8 <HAL_TIM_ConfigClockSource>
 8000d68:	4603      	mov	r3, r0
 8000d6a:	2b00      	cmp	r3, #0
 8000d6c:	d001      	beq.n	8000d72 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8000d6e:	f000 f9b5 	bl	80010dc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d72:	2300      	movs	r3, #0
 8000d74:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d76:	2300      	movs	r3, #0
 8000d78:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000d7a:	463b      	mov	r3, r7
 8000d7c:	4619      	mov	r1, r3
 8000d7e:	4806      	ldr	r0, [pc, #24]	; (8000d98 <MX_TIM2_Init+0x98>)
 8000d80:	f002 ff60 	bl	8003c44 <HAL_TIMEx_MasterConfigSynchronization>
 8000d84:	4603      	mov	r3, r0
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	d001      	beq.n	8000d8e <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8000d8a:	f000 f9a7 	bl	80010dc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000d8e:	bf00      	nop
 8000d90:	3718      	adds	r7, #24
 8000d92:	46bd      	mov	sp, r7
 8000d94:	bd80      	pop	{r7, pc}
 8000d96:	bf00      	nop
 8000d98:	20000098 	.word	0x20000098

08000d9c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	b088      	sub	sp, #32
 8000da0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000da2:	f107 0310 	add.w	r3, r7, #16
 8000da6:	2200      	movs	r2, #0
 8000da8:	601a      	str	r2, [r3, #0]
 8000daa:	605a      	str	r2, [r3, #4]
 8000dac:	609a      	str	r2, [r3, #8]
 8000dae:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000db0:	4b24      	ldr	r3, [pc, #144]	; (8000e44 <MX_GPIO_Init+0xa8>)
 8000db2:	699b      	ldr	r3, [r3, #24]
 8000db4:	4a23      	ldr	r2, [pc, #140]	; (8000e44 <MX_GPIO_Init+0xa8>)
 8000db6:	f043 0320 	orr.w	r3, r3, #32
 8000dba:	6193      	str	r3, [r2, #24]
 8000dbc:	4b21      	ldr	r3, [pc, #132]	; (8000e44 <MX_GPIO_Init+0xa8>)
 8000dbe:	699b      	ldr	r3, [r3, #24]
 8000dc0:	f003 0320 	and.w	r3, r3, #32
 8000dc4:	60fb      	str	r3, [r7, #12]
 8000dc6:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dc8:	4b1e      	ldr	r3, [pc, #120]	; (8000e44 <MX_GPIO_Init+0xa8>)
 8000dca:	699b      	ldr	r3, [r3, #24]
 8000dcc:	4a1d      	ldr	r2, [pc, #116]	; (8000e44 <MX_GPIO_Init+0xa8>)
 8000dce:	f043 0304 	orr.w	r3, r3, #4
 8000dd2:	6193      	str	r3, [r2, #24]
 8000dd4:	4b1b      	ldr	r3, [pc, #108]	; (8000e44 <MX_GPIO_Init+0xa8>)
 8000dd6:	699b      	ldr	r3, [r3, #24]
 8000dd8:	f003 0304 	and.w	r3, r3, #4
 8000ddc:	60bb      	str	r3, [r7, #8]
 8000dde:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000de0:	4b18      	ldr	r3, [pc, #96]	; (8000e44 <MX_GPIO_Init+0xa8>)
 8000de2:	699b      	ldr	r3, [r3, #24]
 8000de4:	4a17      	ldr	r2, [pc, #92]	; (8000e44 <MX_GPIO_Init+0xa8>)
 8000de6:	f043 0308 	orr.w	r3, r3, #8
 8000dea:	6193      	str	r3, [r2, #24]
 8000dec:	4b15      	ldr	r3, [pc, #84]	; (8000e44 <MX_GPIO_Init+0xa8>)
 8000dee:	699b      	ldr	r3, [r3, #24]
 8000df0:	f003 0308 	and.w	r3, r3, #8
 8000df4:	607b      	str	r3, [r7, #4]
 8000df6:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3|GPIO_PIN_6|GPIO_PIN_9, GPIO_PIN_RESET);
 8000df8:	2200      	movs	r2, #0
 8000dfa:	f44f 7112 	mov.w	r1, #584	; 0x248
 8000dfe:	4812      	ldr	r0, [pc, #72]	; (8000e48 <MX_GPIO_Init+0xac>)
 8000e00:	f001 fc3d 	bl	800267e <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA3 PA6 PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_6|GPIO_PIN_9;
 8000e04:	f44f 7312 	mov.w	r3, #584	; 0x248
 8000e08:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e0a:	2301      	movs	r3, #1
 8000e0c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e0e:	2300      	movs	r3, #0
 8000e10:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e12:	2302      	movs	r3, #2
 8000e14:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e16:	f107 0310 	add.w	r3, r7, #16
 8000e1a:	4619      	mov	r1, r3
 8000e1c:	480a      	ldr	r0, [pc, #40]	; (8000e48 <MX_GPIO_Init+0xac>)
 8000e1e:	f001 fa93 	bl	8002348 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 PB10 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_10;
 8000e22:	f240 4304 	movw	r3, #1028	; 0x404
 8000e26:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e28:	2300      	movs	r3, #0
 8000e2a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e2c:	2300      	movs	r3, #0
 8000e2e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e30:	f107 0310 	add.w	r3, r7, #16
 8000e34:	4619      	mov	r1, r3
 8000e36:	4805      	ldr	r0, [pc, #20]	; (8000e4c <MX_GPIO_Init+0xb0>)
 8000e38:	f001 fa86 	bl	8002348 <HAL_GPIO_Init>

}
 8000e3c:	bf00      	nop
 8000e3e:	3720      	adds	r7, #32
 8000e40:	46bd      	mov	sp, r7
 8000e42:	bd80      	pop	{r7, pc}
 8000e44:	40021000 	.word	0x40021000
 8000e48:	40010800 	.word	0x40010800
 8000e4c:	40010c00 	.word	0x40010c00

08000e50 <HAL_CAN_RxFifo0MsgPendingCallback>:

/* USER CODE BEGIN 4 */

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan1)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	b082      	sub	sp, #8
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	6078      	str	r0, [r7, #4]
	HAL_CAN_GetRxMessage(hcan1, CAN_RX_FIFO0, &rxHeader, canRX);
 8000e58:	4b20      	ldr	r3, [pc, #128]	; (8000edc <HAL_CAN_RxFifo0MsgPendingCallback+0x8c>)
 8000e5a:	4a21      	ldr	r2, [pc, #132]	; (8000ee0 <HAL_CAN_RxFifo0MsgPendingCallback+0x90>)
 8000e5c:	2100      	movs	r1, #0
 8000e5e:	6878      	ldr	r0, [r7, #4]
 8000e60:	f000 fe0a 	bl	8001a78 <HAL_CAN_GetRxMessage>
	switch (rxHeader.StdId) {
 8000e64:	4b1e      	ldr	r3, [pc, #120]	; (8000ee0 <HAL_CAN_RxFifo0MsgPendingCallback+0x90>)
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	2b60      	cmp	r3, #96	; 0x60
 8000e6a:	d01e      	beq.n	8000eaa <HAL_CAN_RxFifo0MsgPendingCallback+0x5a>
 8000e6c:	2b60      	cmp	r3, #96	; 0x60
 8000e6e:	d831      	bhi.n	8000ed4 <HAL_CAN_RxFifo0MsgPendingCallback+0x84>
 8000e70:	2b11      	cmp	r3, #17
 8000e72:	d002      	beq.n	8000e7a <HAL_CAN_RxFifo0MsgPendingCallback+0x2a>
 8000e74:	2b12      	cmp	r3, #18
 8000e76:	d00c      	beq.n	8000e92 <HAL_CAN_RxFifo0MsgPendingCallback+0x42>
				flag_send_test_msg = 0;
			}
		}
		break;
	}
}
 8000e78:	e02c      	b.n	8000ed4 <HAL_CAN_RxFifo0MsgPendingCallback+0x84>
		if (canRX[0] == 0) {
 8000e7a:	4b18      	ldr	r3, [pc, #96]	; (8000edc <HAL_CAN_RxFifo0MsgPendingCallback+0x8c>)
 8000e7c:	781b      	ldrb	r3, [r3, #0]
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	d125      	bne.n	8000ece <HAL_CAN_RxFifo0MsgPendingCallback+0x7e>
			flag_blink_light ^= 0x01;
 8000e82:	4b18      	ldr	r3, [pc, #96]	; (8000ee4 <HAL_CAN_RxFifo0MsgPendingCallback+0x94>)
 8000e84:	781b      	ldrb	r3, [r3, #0]
 8000e86:	f083 0301 	eor.w	r3, r3, #1
 8000e8a:	b2da      	uxtb	r2, r3
 8000e8c:	4b15      	ldr	r3, [pc, #84]	; (8000ee4 <HAL_CAN_RxFifo0MsgPendingCallback+0x94>)
 8000e8e:	701a      	strb	r2, [r3, #0]
		break;
 8000e90:	e01d      	b.n	8000ece <HAL_CAN_RxFifo0MsgPendingCallback+0x7e>
		if (canRX[0] == 1) {
 8000e92:	4b12      	ldr	r3, [pc, #72]	; (8000edc <HAL_CAN_RxFifo0MsgPendingCallback+0x8c>)
 8000e94:	781b      	ldrb	r3, [r3, #0]
 8000e96:	2b01      	cmp	r3, #1
 8000e98:	d103      	bne.n	8000ea2 <HAL_CAN_RxFifo0MsgPendingCallback+0x52>
			light_status = 1;
 8000e9a:	4b13      	ldr	r3, [pc, #76]	; (8000ee8 <HAL_CAN_RxFifo0MsgPendingCallback+0x98>)
 8000e9c:	2201      	movs	r2, #1
 8000e9e:	601a      	str	r2, [r3, #0]
		break;
 8000ea0:	e018      	b.n	8000ed4 <HAL_CAN_RxFifo0MsgPendingCallback+0x84>
			light_status = 0;
 8000ea2:	4b11      	ldr	r3, [pc, #68]	; (8000ee8 <HAL_CAN_RxFifo0MsgPendingCallback+0x98>)
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	601a      	str	r2, [r3, #0]
		break;
 8000ea8:	e014      	b.n	8000ed4 <HAL_CAN_RxFifo0MsgPendingCallback+0x84>
		if (canRX[0] == Placement) {
 8000eaa:	4b0c      	ldr	r3, [pc, #48]	; (8000edc <HAL_CAN_RxFifo0MsgPendingCallback+0x8c>)
 8000eac:	781a      	ldrb	r2, [r3, #0]
 8000eae:	4b0f      	ldr	r3, [pc, #60]	; (8000eec <HAL_CAN_RxFifo0MsgPendingCallback+0x9c>)
 8000eb0:	781b      	ldrb	r3, [r3, #0]
 8000eb2:	429a      	cmp	r2, r3
 8000eb4:	d10d      	bne.n	8000ed2 <HAL_CAN_RxFifo0MsgPendingCallback+0x82>
			if (canRX[1] == 1) {
 8000eb6:	4b09      	ldr	r3, [pc, #36]	; (8000edc <HAL_CAN_RxFifo0MsgPendingCallback+0x8c>)
 8000eb8:	785b      	ldrb	r3, [r3, #1]
 8000eba:	2b01      	cmp	r3, #1
 8000ebc:	d103      	bne.n	8000ec6 <HAL_CAN_RxFifo0MsgPendingCallback+0x76>
				flag_send_test_msg = 1;
 8000ebe:	4b0c      	ldr	r3, [pc, #48]	; (8000ef0 <HAL_CAN_RxFifo0MsgPendingCallback+0xa0>)
 8000ec0:	2201      	movs	r2, #1
 8000ec2:	701a      	strb	r2, [r3, #0]
		break;
 8000ec4:	e005      	b.n	8000ed2 <HAL_CAN_RxFifo0MsgPendingCallback+0x82>
				flag_send_test_msg = 0;
 8000ec6:	4b0a      	ldr	r3, [pc, #40]	; (8000ef0 <HAL_CAN_RxFifo0MsgPendingCallback+0xa0>)
 8000ec8:	2200      	movs	r2, #0
 8000eca:	701a      	strb	r2, [r3, #0]
		break;
 8000ecc:	e001      	b.n	8000ed2 <HAL_CAN_RxFifo0MsgPendingCallback+0x82>
		break;
 8000ece:	bf00      	nop
 8000ed0:	e000      	b.n	8000ed4 <HAL_CAN_RxFifo0MsgPendingCallback+0x84>
		break;
 8000ed2:	bf00      	nop
}
 8000ed4:	bf00      	nop
 8000ed6:	3708      	adds	r7, #8
 8000ed8:	46bd      	mov	sp, r7
 8000eda:	bd80      	pop	{r7, pc}
 8000edc:	20000138 	.word	0x20000138
 8000ee0:	20000104 	.word	0x20000104
 8000ee4:	200000e2 	.word	0x200000e2
 8000ee8:	200000e8 	.word	0x200000e8
 8000eec:	200000e0 	.word	0x200000e0
 8000ef0:	200000e6 	.word	0x200000e6

08000ef4 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000ef4:	b480      	push	{r7}
 8000ef6:	b083      	sub	sp, #12
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM2) {
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000f04:	d105      	bne.n	8000f12 <HAL_TIM_PeriodElapsedCallback+0x1e>
		blink_status ^= 0x01;
 8000f06:	4b0e      	ldr	r3, [pc, #56]	; (8000f40 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	f083 0301 	eor.w	r3, r3, #1
 8000f0e:	4a0c      	ldr	r2, [pc, #48]	; (8000f40 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8000f10:	6013      	str	r3, [r2, #0]
	}
	msg_counter++;
 8000f12:	4b0c      	ldr	r3, [pc, #48]	; (8000f44 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	3301      	adds	r3, #1
 8000f18:	4a0a      	ldr	r2, [pc, #40]	; (8000f44 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8000f1a:	6013      	str	r3, [r2, #0]
	if (msg_counter == 5) {
 8000f1c:	4b09      	ldr	r3, [pc, #36]	; (8000f44 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	2b05      	cmp	r3, #5
 8000f22:	d108      	bne.n	8000f36 <HAL_TIM_PeriodElapsedCallback+0x42>
		flag_send_data = 1;
 8000f24:	4b08      	ldr	r3, [pc, #32]	; (8000f48 <HAL_TIM_PeriodElapsedCallback+0x54>)
 8000f26:	2201      	movs	r2, #1
 8000f28:	701a      	strb	r2, [r3, #0]
		flag_read_dist_sensor = 1;
 8000f2a:	4b08      	ldr	r3, [pc, #32]	; (8000f4c <HAL_TIM_PeriodElapsedCallback+0x58>)
 8000f2c:	2201      	movs	r2, #1
 8000f2e:	701a      	strb	r2, [r3, #0]
		msg_counter = 0;
 8000f30:	4b04      	ldr	r3, [pc, #16]	; (8000f44 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8000f32:	2200      	movs	r2, #0
 8000f34:	601a      	str	r2, [r3, #0]
	}
}
 8000f36:	bf00      	nop
 8000f38:	370c      	adds	r7, #12
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	bc80      	pop	{r7}
 8000f3e:	4770      	bx	lr
 8000f40:	200000ec 	.word	0x200000ec
 8000f44:	200000f0 	.word	0x200000f0
 8000f48:	200000e1 	.word	0x200000e1
 8000f4c:	200000e3 	.word	0x200000e3

08000f50 <HAL_TIM_IC_CaptureCallback>:

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim) {
 8000f50:	b580      	push	{r7, lr}
 8000f52:	b082      	sub	sp, #8
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	6078      	str	r0, [r7, #4]
	if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1) 	{
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	7f1b      	ldrb	r3, [r3, #28]
 8000f5c:	2b01      	cmp	r3, #1
 8000f5e:	f040 8086 	bne.w	800106e <HAL_TIM_IC_CaptureCallback+0x11e>
		if (!flag_hcsr04_first_captured) {
 8000f62:	4b47      	ldr	r3, [pc, #284]	; (8001080 <HAL_TIM_IC_CaptureCallback+0x130>)
 8000f64:	781b      	ldrb	r3, [r3, #0]
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d11a      	bne.n	8000fa0 <HAL_TIM_IC_CaptureCallback+0x50>
			// if the first value is not captured, set the first captured as true
			// Change the polarity to falling edge
			IC_Val1 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 8000f6a:	2100      	movs	r1, #0
 8000f6c:	6878      	ldr	r0, [r7, #4]
 8000f6e:	f002 fbdf 	bl	8003730 <HAL_TIM_ReadCapturedValue>
 8000f72:	4603      	mov	r3, r0
 8000f74:	4a43      	ldr	r2, [pc, #268]	; (8001084 <HAL_TIM_IC_CaptureCallback+0x134>)
 8000f76:	6013      	str	r3, [r2, #0]
			flag_hcsr04_first_captured = 1;  //
 8000f78:	4b41      	ldr	r3, [pc, #260]	; (8001080 <HAL_TIM_IC_CaptureCallback+0x130>)
 8000f7a:	2201      	movs	r2, #1
 8000f7c:	701a      	strb	r2, [r3, #0]
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_FALLING);
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	6a1a      	ldr	r2, [r3, #32]
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	f022 020a 	bic.w	r2, r2, #10
 8000f8c:	621a      	str	r2, [r3, #32]
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	6a1a      	ldr	r2, [r3, #32]
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	f042 0202 	orr.w	r2, r2, #2
 8000f9c:	621a      	str	r2, [r3, #32]
			// set polarity to rising edge, in case it was changed
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_RISING);
			__HAL_TIM_DISABLE_IT(&htim1, TIM_IT_CC1);
		}
	}
}
 8000f9e:	e066      	b.n	800106e <HAL_TIM_IC_CaptureCallback+0x11e>
		} else if (flag_hcsr04_first_captured) {
 8000fa0:	4b37      	ldr	r3, [pc, #220]	; (8001080 <HAL_TIM_IC_CaptureCallback+0x130>)
 8000fa2:	781b      	ldrb	r3, [r3, #0]
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	d062      	beq.n	800106e <HAL_TIM_IC_CaptureCallback+0x11e>
			IC_Val2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 8000fa8:	2100      	movs	r1, #0
 8000faa:	6878      	ldr	r0, [r7, #4]
 8000fac:	f002 fbc0 	bl	8003730 <HAL_TIM_ReadCapturedValue>
 8000fb0:	4603      	mov	r3, r0
 8000fb2:	4a35      	ldr	r2, [pc, #212]	; (8001088 <HAL_TIM_IC_CaptureCallback+0x138>)
 8000fb4:	6013      	str	r3, [r2, #0]
			__HAL_TIM_SET_COUNTER(htim, 0);
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	2200      	movs	r2, #0
 8000fbc:	625a      	str	r2, [r3, #36]	; 0x24
			if (IC_Val2 > IC_Val1) {
 8000fbe:	4b32      	ldr	r3, [pc, #200]	; (8001088 <HAL_TIM_IC_CaptureCallback+0x138>)
 8000fc0:	681a      	ldr	r2, [r3, #0]
 8000fc2:	4b30      	ldr	r3, [pc, #192]	; (8001084 <HAL_TIM_IC_CaptureCallback+0x134>)
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	429a      	cmp	r2, r3
 8000fc8:	d907      	bls.n	8000fda <HAL_TIM_IC_CaptureCallback+0x8a>
				Difference = IC_Val2-IC_Val1;
 8000fca:	4b2f      	ldr	r3, [pc, #188]	; (8001088 <HAL_TIM_IC_CaptureCallback+0x138>)
 8000fcc:	681a      	ldr	r2, [r3, #0]
 8000fce:	4b2d      	ldr	r3, [pc, #180]	; (8001084 <HAL_TIM_IC_CaptureCallback+0x134>)
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	1ad3      	subs	r3, r2, r3
 8000fd4:	4a2d      	ldr	r2, [pc, #180]	; (800108c <HAL_TIM_IC_CaptureCallback+0x13c>)
 8000fd6:	6013      	str	r3, [r2, #0]
 8000fd8:	e00f      	b.n	8000ffa <HAL_TIM_IC_CaptureCallback+0xaa>
			} else if (IC_Val1 > IC_Val2) {
 8000fda:	4b2a      	ldr	r3, [pc, #168]	; (8001084 <HAL_TIM_IC_CaptureCallback+0x134>)
 8000fdc:	681a      	ldr	r2, [r3, #0]
 8000fde:	4b2a      	ldr	r3, [pc, #168]	; (8001088 <HAL_TIM_IC_CaptureCallback+0x138>)
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	429a      	cmp	r2, r3
 8000fe4:	d909      	bls.n	8000ffa <HAL_TIM_IC_CaptureCallback+0xaa>
				Difference = (0xffff - IC_Val1) + IC_Val2;
 8000fe6:	4b28      	ldr	r3, [pc, #160]	; (8001088 <HAL_TIM_IC_CaptureCallback+0x138>)
 8000fe8:	681a      	ldr	r2, [r3, #0]
 8000fea:	4b26      	ldr	r3, [pc, #152]	; (8001084 <HAL_TIM_IC_CaptureCallback+0x134>)
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	1ad3      	subs	r3, r2, r3
 8000ff0:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 8000ff4:	33ff      	adds	r3, #255	; 0xff
 8000ff6:	4a25      	ldr	r2, [pc, #148]	; (800108c <HAL_TIM_IC_CaptureCallback+0x13c>)
 8000ff8:	6013      	str	r3, [r2, #0]
			hcsr04_dist = Difference * .034/2;
 8000ffa:	4b24      	ldr	r3, [pc, #144]	; (800108c <HAL_TIM_IC_CaptureCallback+0x13c>)
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	4618      	mov	r0, r3
 8001000:	f7ff f9e8 	bl	80003d4 <__aeabi_ui2d>
 8001004:	a31c      	add	r3, pc, #112	; (adr r3, 8001078 <HAL_TIM_IC_CaptureCallback+0x128>)
 8001006:	e9d3 2300 	ldrd	r2, r3, [r3]
 800100a:	f7ff fa5d 	bl	80004c8 <__aeabi_dmul>
 800100e:	4602      	mov	r2, r0
 8001010:	460b      	mov	r3, r1
 8001012:	4610      	mov	r0, r2
 8001014:	4619      	mov	r1, r3
 8001016:	f04f 0200 	mov.w	r2, #0
 800101a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800101e:	f7ff fb7d 	bl	800071c <__aeabi_ddiv>
 8001022:	4602      	mov	r2, r0
 8001024:	460b      	mov	r3, r1
 8001026:	4610      	mov	r0, r2
 8001028:	4619      	mov	r1, r3
 800102a:	f7ff fc5f 	bl	80008ec <__aeabi_d2uiz>
 800102e:	4603      	mov	r3, r0
 8001030:	b2da      	uxtb	r2, r3
 8001032:	4b17      	ldr	r3, [pc, #92]	; (8001090 <HAL_TIM_IC_CaptureCallback+0x140>)
 8001034:	701a      	strb	r2, [r3, #0]
			flag_tx_sensor_data = 1;
 8001036:	4b17      	ldr	r3, [pc, #92]	; (8001094 <HAL_TIM_IC_CaptureCallback+0x144>)
 8001038:	2201      	movs	r2, #1
 800103a:	701a      	strb	r2, [r3, #0]
			flag_hcsr04_first_captured = 0;
 800103c:	4b10      	ldr	r3, [pc, #64]	; (8001080 <HAL_TIM_IC_CaptureCallback+0x130>)
 800103e:	2200      	movs	r2, #0
 8001040:	701a      	strb	r2, [r3, #0]
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_RISING);
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	6a1a      	ldr	r2, [r3, #32]
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	f022 020a 	bic.w	r2, r2, #10
 8001050:	621a      	str	r2, [r3, #32]
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	681a      	ldr	r2, [r3, #0]
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	6a12      	ldr	r2, [r2, #32]
 800105c:	621a      	str	r2, [r3, #32]
			__HAL_TIM_DISABLE_IT(&htim1, TIM_IT_CC1);
 800105e:	4b0e      	ldr	r3, [pc, #56]	; (8001098 <HAL_TIM_IC_CaptureCallback+0x148>)
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	68da      	ldr	r2, [r3, #12]
 8001064:	4b0c      	ldr	r3, [pc, #48]	; (8001098 <HAL_TIM_IC_CaptureCallback+0x148>)
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	f022 0202 	bic.w	r2, r2, #2
 800106c:	60da      	str	r2, [r3, #12]
}
 800106e:	bf00      	nop
 8001070:	3708      	adds	r7, #8
 8001072:	46bd      	mov	sp, r7
 8001074:	bd80      	pop	{r7, pc}
 8001076:	bf00      	nop
 8001078:	b020c49c 	.word	0xb020c49c
 800107c:	3fa16872 	.word	0x3fa16872
 8001080:	200000e5 	.word	0x200000e5
 8001084:	200000f4 	.word	0x200000f4
 8001088:	200000f8 	.word	0x200000f8
 800108c:	200000fc 	.word	0x200000fc
 8001090:	20000100 	.word	0x20000100
 8001094:	200000e4 	.word	0x200000e4
 8001098:	20000050 	.word	0x20000050

0800109c <HCSR04_Read>:

void HCSR04_Read (void)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN, GPIO_PIN_SET);
 80010a0:	2201      	movs	r2, #1
 80010a2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80010a6:	480b      	ldr	r0, [pc, #44]	; (80010d4 <HCSR04_Read+0x38>)
 80010a8:	f001 fae9 	bl	800267e <HAL_GPIO_WritePin>
	delay(10);  // wait for 10 us
 80010ac:	200a      	movs	r0, #10
 80010ae:	f7ff fc3d 	bl	800092c <delay>
	HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN, GPIO_PIN_RESET);
 80010b2:	2200      	movs	r2, #0
 80010b4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80010b8:	4806      	ldr	r0, [pc, #24]	; (80010d4 <HCSR04_Read+0x38>)
 80010ba:	f001 fae0 	bl	800267e <HAL_GPIO_WritePin>
	__HAL_TIM_ENABLE_IT(&htim1, TIM_IT_CC1);
 80010be:	4b06      	ldr	r3, [pc, #24]	; (80010d8 <HCSR04_Read+0x3c>)
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	68da      	ldr	r2, [r3, #12]
 80010c4:	4b04      	ldr	r3, [pc, #16]	; (80010d8 <HCSR04_Read+0x3c>)
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	f042 0202 	orr.w	r2, r2, #2
 80010cc:	60da      	str	r2, [r3, #12]
}
 80010ce:	bf00      	nop
 80010d0:	bd80      	pop	{r7, pc}
 80010d2:	bf00      	nop
 80010d4:	40010800 	.word	0x40010800
 80010d8:	20000050 	.word	0x20000050

080010dc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80010dc:	b480      	push	{r7}
 80010de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80010e0:	bf00      	nop
 80010e2:	46bd      	mov	sp, r7
 80010e4:	bc80      	pop	{r7}
 80010e6:	4770      	bx	lr

080010e8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80010e8:	b480      	push	{r7}
 80010ea:	b083      	sub	sp, #12
 80010ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80010ee:	4b0e      	ldr	r3, [pc, #56]	; (8001128 <HAL_MspInit+0x40>)
 80010f0:	699b      	ldr	r3, [r3, #24]
 80010f2:	4a0d      	ldr	r2, [pc, #52]	; (8001128 <HAL_MspInit+0x40>)
 80010f4:	f043 0301 	orr.w	r3, r3, #1
 80010f8:	6193      	str	r3, [r2, #24]
 80010fa:	4b0b      	ldr	r3, [pc, #44]	; (8001128 <HAL_MspInit+0x40>)
 80010fc:	699b      	ldr	r3, [r3, #24]
 80010fe:	f003 0301 	and.w	r3, r3, #1
 8001102:	607b      	str	r3, [r7, #4]
 8001104:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001106:	4b08      	ldr	r3, [pc, #32]	; (8001128 <HAL_MspInit+0x40>)
 8001108:	69db      	ldr	r3, [r3, #28]
 800110a:	4a07      	ldr	r2, [pc, #28]	; (8001128 <HAL_MspInit+0x40>)
 800110c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001110:	61d3      	str	r3, [r2, #28]
 8001112:	4b05      	ldr	r3, [pc, #20]	; (8001128 <HAL_MspInit+0x40>)
 8001114:	69db      	ldr	r3, [r3, #28]
 8001116:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800111a:	603b      	str	r3, [r7, #0]
 800111c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800111e:	bf00      	nop
 8001120:	370c      	adds	r7, #12
 8001122:	46bd      	mov	sp, r7
 8001124:	bc80      	pop	{r7}
 8001126:	4770      	bx	lr
 8001128:	40021000 	.word	0x40021000

0800112c <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	b088      	sub	sp, #32
 8001130:	af00      	add	r7, sp, #0
 8001132:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001134:	f107 0310 	add.w	r3, r7, #16
 8001138:	2200      	movs	r2, #0
 800113a:	601a      	str	r2, [r3, #0]
 800113c:	605a      	str	r2, [r3, #4]
 800113e:	609a      	str	r2, [r3, #8]
 8001140:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	4a20      	ldr	r2, [pc, #128]	; (80011c8 <HAL_CAN_MspInit+0x9c>)
 8001148:	4293      	cmp	r3, r2
 800114a:	d139      	bne.n	80011c0 <HAL_CAN_MspInit+0x94>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 800114c:	4b1f      	ldr	r3, [pc, #124]	; (80011cc <HAL_CAN_MspInit+0xa0>)
 800114e:	69db      	ldr	r3, [r3, #28]
 8001150:	4a1e      	ldr	r2, [pc, #120]	; (80011cc <HAL_CAN_MspInit+0xa0>)
 8001152:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001156:	61d3      	str	r3, [r2, #28]
 8001158:	4b1c      	ldr	r3, [pc, #112]	; (80011cc <HAL_CAN_MspInit+0xa0>)
 800115a:	69db      	ldr	r3, [r3, #28]
 800115c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001160:	60fb      	str	r3, [r7, #12]
 8001162:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001164:	4b19      	ldr	r3, [pc, #100]	; (80011cc <HAL_CAN_MspInit+0xa0>)
 8001166:	699b      	ldr	r3, [r3, #24]
 8001168:	4a18      	ldr	r2, [pc, #96]	; (80011cc <HAL_CAN_MspInit+0xa0>)
 800116a:	f043 0304 	orr.w	r3, r3, #4
 800116e:	6193      	str	r3, [r2, #24]
 8001170:	4b16      	ldr	r3, [pc, #88]	; (80011cc <HAL_CAN_MspInit+0xa0>)
 8001172:	699b      	ldr	r3, [r3, #24]
 8001174:	f003 0304 	and.w	r3, r3, #4
 8001178:	60bb      	str	r3, [r7, #8]
 800117a:	68bb      	ldr	r3, [r7, #8]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 800117c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001180:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001182:	2300      	movs	r3, #0
 8001184:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001186:	2300      	movs	r3, #0
 8001188:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800118a:	f107 0310 	add.w	r3, r7, #16
 800118e:	4619      	mov	r1, r3
 8001190:	480f      	ldr	r0, [pc, #60]	; (80011d0 <HAL_CAN_MspInit+0xa4>)
 8001192:	f001 f8d9 	bl	8002348 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001196:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800119a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800119c:	2302      	movs	r3, #2
 800119e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80011a0:	2303      	movs	r3, #3
 80011a2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011a4:	f107 0310 	add.w	r3, r7, #16
 80011a8:	4619      	mov	r1, r3
 80011aa:	4809      	ldr	r0, [pc, #36]	; (80011d0 <HAL_CAN_MspInit+0xa4>)
 80011ac:	f001 f8cc 	bl	8002348 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 80011b0:	2200      	movs	r2, #0
 80011b2:	2100      	movs	r1, #0
 80011b4:	2014      	movs	r0, #20
 80011b6:	f001 f890 	bl	80022da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 80011ba:	2014      	movs	r0, #20
 80011bc:	f001 f8a9 	bl	8002312 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 80011c0:	bf00      	nop
 80011c2:	3720      	adds	r7, #32
 80011c4:	46bd      	mov	sp, r7
 80011c6:	bd80      	pop	{r7, pc}
 80011c8:	40006400 	.word	0x40006400
 80011cc:	40021000 	.word	0x40021000
 80011d0:	40010800 	.word	0x40010800

080011d4 <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	b088      	sub	sp, #32
 80011d8:	af00      	add	r7, sp, #0
 80011da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011dc:	f107 0310 	add.w	r3, r7, #16
 80011e0:	2200      	movs	r2, #0
 80011e2:	601a      	str	r2, [r3, #0]
 80011e4:	605a      	str	r2, [r3, #4]
 80011e6:	609a      	str	r2, [r3, #8]
 80011e8:	60da      	str	r2, [r3, #12]
  if(htim_ic->Instance==TIM1)
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	4a1a      	ldr	r2, [pc, #104]	; (8001258 <HAL_TIM_IC_MspInit+0x84>)
 80011f0:	4293      	cmp	r3, r2
 80011f2:	d12c      	bne.n	800124e <HAL_TIM_IC_MspInit+0x7a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80011f4:	4b19      	ldr	r3, [pc, #100]	; (800125c <HAL_TIM_IC_MspInit+0x88>)
 80011f6:	699b      	ldr	r3, [r3, #24]
 80011f8:	4a18      	ldr	r2, [pc, #96]	; (800125c <HAL_TIM_IC_MspInit+0x88>)
 80011fa:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80011fe:	6193      	str	r3, [r2, #24]
 8001200:	4b16      	ldr	r3, [pc, #88]	; (800125c <HAL_TIM_IC_MspInit+0x88>)
 8001202:	699b      	ldr	r3, [r3, #24]
 8001204:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001208:	60fb      	str	r3, [r7, #12]
 800120a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800120c:	4b13      	ldr	r3, [pc, #76]	; (800125c <HAL_TIM_IC_MspInit+0x88>)
 800120e:	699b      	ldr	r3, [r3, #24]
 8001210:	4a12      	ldr	r2, [pc, #72]	; (800125c <HAL_TIM_IC_MspInit+0x88>)
 8001212:	f043 0304 	orr.w	r3, r3, #4
 8001216:	6193      	str	r3, [r2, #24]
 8001218:	4b10      	ldr	r3, [pc, #64]	; (800125c <HAL_TIM_IC_MspInit+0x88>)
 800121a:	699b      	ldr	r3, [r3, #24]
 800121c:	f003 0304 	and.w	r3, r3, #4
 8001220:	60bb      	str	r3, [r7, #8]
 8001222:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001224:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001228:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800122a:	2300      	movs	r3, #0
 800122c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800122e:	2300      	movs	r3, #0
 8001230:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001232:	f107 0310 	add.w	r3, r7, #16
 8001236:	4619      	mov	r1, r3
 8001238:	4809      	ldr	r0, [pc, #36]	; (8001260 <HAL_TIM_IC_MspInit+0x8c>)
 800123a:	f001 f885 	bl	8002348 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 800123e:	2200      	movs	r2, #0
 8001240:	2100      	movs	r1, #0
 8001242:	201b      	movs	r0, #27
 8001244:	f001 f849 	bl	80022da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8001248:	201b      	movs	r0, #27
 800124a:	f001 f862 	bl	8002312 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 800124e:	bf00      	nop
 8001250:	3720      	adds	r7, #32
 8001252:	46bd      	mov	sp, r7
 8001254:	bd80      	pop	{r7, pc}
 8001256:	bf00      	nop
 8001258:	40012c00 	.word	0x40012c00
 800125c:	40021000 	.word	0x40021000
 8001260:	40010800 	.word	0x40010800

08001264 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	b084      	sub	sp, #16
 8001268:	af00      	add	r7, sp, #0
 800126a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001274:	d113      	bne.n	800129e <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001276:	4b0c      	ldr	r3, [pc, #48]	; (80012a8 <HAL_TIM_Base_MspInit+0x44>)
 8001278:	69db      	ldr	r3, [r3, #28]
 800127a:	4a0b      	ldr	r2, [pc, #44]	; (80012a8 <HAL_TIM_Base_MspInit+0x44>)
 800127c:	f043 0301 	orr.w	r3, r3, #1
 8001280:	61d3      	str	r3, [r2, #28]
 8001282:	4b09      	ldr	r3, [pc, #36]	; (80012a8 <HAL_TIM_Base_MspInit+0x44>)
 8001284:	69db      	ldr	r3, [r3, #28]
 8001286:	f003 0301 	and.w	r3, r3, #1
 800128a:	60fb      	str	r3, [r7, #12]
 800128c:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800128e:	2200      	movs	r2, #0
 8001290:	2100      	movs	r1, #0
 8001292:	201c      	movs	r0, #28
 8001294:	f001 f821 	bl	80022da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001298:	201c      	movs	r0, #28
 800129a:	f001 f83a 	bl	8002312 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800129e:	bf00      	nop
 80012a0:	3710      	adds	r7, #16
 80012a2:	46bd      	mov	sp, r7
 80012a4:	bd80      	pop	{r7, pc}
 80012a6:	bf00      	nop
 80012a8:	40021000 	.word	0x40021000

080012ac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80012ac:	b480      	push	{r7}
 80012ae:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80012b0:	bf00      	nop
 80012b2:	46bd      	mov	sp, r7
 80012b4:	bc80      	pop	{r7}
 80012b6:	4770      	bx	lr

080012b8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80012b8:	b480      	push	{r7}
 80012ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80012bc:	e7fe      	b.n	80012bc <HardFault_Handler+0x4>

080012be <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80012be:	b480      	push	{r7}
 80012c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80012c2:	e7fe      	b.n	80012c2 <MemManage_Handler+0x4>

080012c4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80012c4:	b480      	push	{r7}
 80012c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80012c8:	e7fe      	b.n	80012c8 <BusFault_Handler+0x4>

080012ca <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80012ca:	b480      	push	{r7}
 80012cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80012ce:	e7fe      	b.n	80012ce <UsageFault_Handler+0x4>

080012d0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80012d0:	b480      	push	{r7}
 80012d2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80012d4:	bf00      	nop
 80012d6:	46bd      	mov	sp, r7
 80012d8:	bc80      	pop	{r7}
 80012da:	4770      	bx	lr

080012dc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80012dc:	b480      	push	{r7}
 80012de:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80012e0:	bf00      	nop
 80012e2:	46bd      	mov	sp, r7
 80012e4:	bc80      	pop	{r7}
 80012e6:	4770      	bx	lr

080012e8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80012e8:	b480      	push	{r7}
 80012ea:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80012ec:	bf00      	nop
 80012ee:	46bd      	mov	sp, r7
 80012f0:	bc80      	pop	{r7}
 80012f2:	4770      	bx	lr

080012f4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80012f8:	f000 f8c0 	bl	800147c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80012fc:	bf00      	nop
 80012fe:	bd80      	pop	{r7, pc}

08001300 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8001304:	4802      	ldr	r0, [pc, #8]	; (8001310 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8001306:	f000 fced 	bl	8001ce4 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 800130a:	bf00      	nop
 800130c:	bd80      	pop	{r7, pc}
 800130e:	bf00      	nop
 8001310:	20000028 	.word	0x20000028

08001314 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8001314:	b580      	push	{r7, lr}
 8001316:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001318:	4802      	ldr	r0, [pc, #8]	; (8001324 <TIM1_CC_IRQHandler+0x10>)
 800131a:	f001 ffa9 	bl	8003270 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 800131e:	bf00      	nop
 8001320:	bd80      	pop	{r7, pc}
 8001322:	bf00      	nop
 8001324:	20000050 	.word	0x20000050

08001328 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800132c:	4802      	ldr	r0, [pc, #8]	; (8001338 <TIM2_IRQHandler+0x10>)
 800132e:	f001 ff9f 	bl	8003270 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001332:	bf00      	nop
 8001334:	bd80      	pop	{r7, pc}
 8001336:	bf00      	nop
 8001338:	20000098 	.word	0x20000098

0800133c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800133c:	b480      	push	{r7}
 800133e:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8001340:	4b15      	ldr	r3, [pc, #84]	; (8001398 <SystemInit+0x5c>)
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	4a14      	ldr	r2, [pc, #80]	; (8001398 <SystemInit+0x5c>)
 8001346:	f043 0301 	orr.w	r3, r3, #1
 800134a:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 800134c:	4b12      	ldr	r3, [pc, #72]	; (8001398 <SystemInit+0x5c>)
 800134e:	685a      	ldr	r2, [r3, #4]
 8001350:	4911      	ldr	r1, [pc, #68]	; (8001398 <SystemInit+0x5c>)
 8001352:	4b12      	ldr	r3, [pc, #72]	; (800139c <SystemInit+0x60>)
 8001354:	4013      	ands	r3, r2
 8001356:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8001358:	4b0f      	ldr	r3, [pc, #60]	; (8001398 <SystemInit+0x5c>)
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	4a0e      	ldr	r2, [pc, #56]	; (8001398 <SystemInit+0x5c>)
 800135e:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8001362:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001366:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001368:	4b0b      	ldr	r3, [pc, #44]	; (8001398 <SystemInit+0x5c>)
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	4a0a      	ldr	r2, [pc, #40]	; (8001398 <SystemInit+0x5c>)
 800136e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001372:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8001374:	4b08      	ldr	r3, [pc, #32]	; (8001398 <SystemInit+0x5c>)
 8001376:	685b      	ldr	r3, [r3, #4]
 8001378:	4a07      	ldr	r2, [pc, #28]	; (8001398 <SystemInit+0x5c>)
 800137a:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 800137e:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8001380:	4b05      	ldr	r3, [pc, #20]	; (8001398 <SystemInit+0x5c>)
 8001382:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8001386:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8001388:	4b05      	ldr	r3, [pc, #20]	; (80013a0 <SystemInit+0x64>)
 800138a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800138e:	609a      	str	r2, [r3, #8]
#endif 
}
 8001390:	bf00      	nop
 8001392:	46bd      	mov	sp, r7
 8001394:	bc80      	pop	{r7}
 8001396:	4770      	bx	lr
 8001398:	40021000 	.word	0x40021000
 800139c:	f8ff0000 	.word	0xf8ff0000
 80013a0:	e000ed00 	.word	0xe000ed00

080013a4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80013a4:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80013a6:	e003      	b.n	80013b0 <LoopCopyDataInit>

080013a8 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80013a8:	4b0b      	ldr	r3, [pc, #44]	; (80013d8 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 80013aa:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80013ac:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80013ae:	3104      	adds	r1, #4

080013b0 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80013b0:	480a      	ldr	r0, [pc, #40]	; (80013dc <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 80013b2:	4b0b      	ldr	r3, [pc, #44]	; (80013e0 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 80013b4:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80013b6:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80013b8:	d3f6      	bcc.n	80013a8 <CopyDataInit>
  ldr r2, =_sbss
 80013ba:	4a0a      	ldr	r2, [pc, #40]	; (80013e4 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 80013bc:	e002      	b.n	80013c4 <LoopFillZerobss>

080013be <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80013be:	2300      	movs	r3, #0
  str r3, [r2], #4
 80013c0:	f842 3b04 	str.w	r3, [r2], #4

080013c4 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 80013c4:	4b08      	ldr	r3, [pc, #32]	; (80013e8 <LoopFillZerobss+0x24>)
  cmp r2, r3
 80013c6:	429a      	cmp	r2, r3
  bcc FillZerobss
 80013c8:	d3f9      	bcc.n	80013be <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80013ca:	f7ff ffb7 	bl	800133c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80013ce:	f002 fca9 	bl	8003d24 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80013d2:	f7ff fac3 	bl	800095c <main>
  bx lr
 80013d6:	4770      	bx	lr
  ldr r3, =_sidata
 80013d8:	08003dc4 	.word	0x08003dc4
  ldr r0, =_sdata
 80013dc:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80013e0:	2000000c 	.word	0x2000000c
  ldr r2, =_sbss
 80013e4:	2000000c 	.word	0x2000000c
  ldr r3, = _ebss
 80013e8:	20000170 	.word	0x20000170

080013ec <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80013ec:	e7fe      	b.n	80013ec <ADC1_2_IRQHandler>
	...

080013f0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80013f4:	4b08      	ldr	r3, [pc, #32]	; (8001418 <HAL_Init+0x28>)
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	4a07      	ldr	r2, [pc, #28]	; (8001418 <HAL_Init+0x28>)
 80013fa:	f043 0310 	orr.w	r3, r3, #16
 80013fe:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001400:	2003      	movs	r0, #3
 8001402:	f000 ff5f 	bl	80022c4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001406:	2000      	movs	r0, #0
 8001408:	f000 f808 	bl	800141c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800140c:	f7ff fe6c 	bl	80010e8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001410:	2300      	movs	r3, #0
}
 8001412:	4618      	mov	r0, r3
 8001414:	bd80      	pop	{r7, pc}
 8001416:	bf00      	nop
 8001418:	40022000 	.word	0x40022000

0800141c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	b082      	sub	sp, #8
 8001420:	af00      	add	r7, sp, #0
 8001422:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001424:	4b12      	ldr	r3, [pc, #72]	; (8001470 <HAL_InitTick+0x54>)
 8001426:	681a      	ldr	r2, [r3, #0]
 8001428:	4b12      	ldr	r3, [pc, #72]	; (8001474 <HAL_InitTick+0x58>)
 800142a:	781b      	ldrb	r3, [r3, #0]
 800142c:	4619      	mov	r1, r3
 800142e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001432:	fbb3 f3f1 	udiv	r3, r3, r1
 8001436:	fbb2 f3f3 	udiv	r3, r2, r3
 800143a:	4618      	mov	r0, r3
 800143c:	f000 ff77 	bl	800232e <HAL_SYSTICK_Config>
 8001440:	4603      	mov	r3, r0
 8001442:	2b00      	cmp	r3, #0
 8001444:	d001      	beq.n	800144a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001446:	2301      	movs	r3, #1
 8001448:	e00e      	b.n	8001468 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	2b0f      	cmp	r3, #15
 800144e:	d80a      	bhi.n	8001466 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001450:	2200      	movs	r2, #0
 8001452:	6879      	ldr	r1, [r7, #4]
 8001454:	f04f 30ff 	mov.w	r0, #4294967295
 8001458:	f000 ff3f 	bl	80022da <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800145c:	4a06      	ldr	r2, [pc, #24]	; (8001478 <HAL_InitTick+0x5c>)
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001462:	2300      	movs	r3, #0
 8001464:	e000      	b.n	8001468 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001466:	2301      	movs	r3, #1
}
 8001468:	4618      	mov	r0, r3
 800146a:	3708      	adds	r7, #8
 800146c:	46bd      	mov	sp, r7
 800146e:	bd80      	pop	{r7, pc}
 8001470:	20000000 	.word	0x20000000
 8001474:	20000008 	.word	0x20000008
 8001478:	20000004 	.word	0x20000004

0800147c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800147c:	b480      	push	{r7}
 800147e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001480:	4b05      	ldr	r3, [pc, #20]	; (8001498 <HAL_IncTick+0x1c>)
 8001482:	781b      	ldrb	r3, [r3, #0]
 8001484:	461a      	mov	r2, r3
 8001486:	4b05      	ldr	r3, [pc, #20]	; (800149c <HAL_IncTick+0x20>)
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	4413      	add	r3, r2
 800148c:	4a03      	ldr	r2, [pc, #12]	; (800149c <HAL_IncTick+0x20>)
 800148e:	6013      	str	r3, [r2, #0]
}
 8001490:	bf00      	nop
 8001492:	46bd      	mov	sp, r7
 8001494:	bc80      	pop	{r7}
 8001496:	4770      	bx	lr
 8001498:	20000008 	.word	0x20000008
 800149c:	2000016c 	.word	0x2000016c

080014a0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80014a0:	b480      	push	{r7}
 80014a2:	af00      	add	r7, sp, #0
  return uwTick;
 80014a4:	4b02      	ldr	r3, [pc, #8]	; (80014b0 <HAL_GetTick+0x10>)
 80014a6:	681b      	ldr	r3, [r3, #0]
}
 80014a8:	4618      	mov	r0, r3
 80014aa:	46bd      	mov	sp, r7
 80014ac:	bc80      	pop	{r7}
 80014ae:	4770      	bx	lr
 80014b0:	2000016c 	.word	0x2000016c

080014b4 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	b084      	sub	sp, #16
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d101      	bne.n	80014c6 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80014c2:	2301      	movs	r3, #1
 80014c4:	e0ed      	b.n	80016a2 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80014cc:	b2db      	uxtb	r3, r3
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d102      	bne.n	80014d8 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80014d2:	6878      	ldr	r0, [r7, #4]
 80014d4:	f7ff fe2a 	bl	800112c <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	681a      	ldr	r2, [r3, #0]
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	f042 0201 	orr.w	r2, r2, #1
 80014e6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80014e8:	f7ff ffda 	bl	80014a0 <HAL_GetTick>
 80014ec:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80014ee:	e012      	b.n	8001516 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80014f0:	f7ff ffd6 	bl	80014a0 <HAL_GetTick>
 80014f4:	4602      	mov	r2, r0
 80014f6:	68fb      	ldr	r3, [r7, #12]
 80014f8:	1ad3      	subs	r3, r2, r3
 80014fa:	2b0a      	cmp	r3, #10
 80014fc:	d90b      	bls.n	8001516 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001502:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	2205      	movs	r2, #5
 800150e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001512:	2301      	movs	r3, #1
 8001514:	e0c5      	b.n	80016a2 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	685b      	ldr	r3, [r3, #4]
 800151c:	f003 0301 	and.w	r3, r3, #1
 8001520:	2b00      	cmp	r3, #0
 8001522:	d0e5      	beq.n	80014f0 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	681a      	ldr	r2, [r3, #0]
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	f022 0202 	bic.w	r2, r2, #2
 8001532:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001534:	f7ff ffb4 	bl	80014a0 <HAL_GetTick>
 8001538:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800153a:	e012      	b.n	8001562 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800153c:	f7ff ffb0 	bl	80014a0 <HAL_GetTick>
 8001540:	4602      	mov	r2, r0
 8001542:	68fb      	ldr	r3, [r7, #12]
 8001544:	1ad3      	subs	r3, r2, r3
 8001546:	2b0a      	cmp	r3, #10
 8001548:	d90b      	bls.n	8001562 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800154e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	2205      	movs	r2, #5
 800155a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800155e:	2301      	movs	r3, #1
 8001560:	e09f      	b.n	80016a2 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	685b      	ldr	r3, [r3, #4]
 8001568:	f003 0302 	and.w	r3, r3, #2
 800156c:	2b00      	cmp	r3, #0
 800156e:	d1e5      	bne.n	800153c <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	7e1b      	ldrb	r3, [r3, #24]
 8001574:	2b01      	cmp	r3, #1
 8001576:	d108      	bne.n	800158a <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	681a      	ldr	r2, [r3, #0]
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001586:	601a      	str	r2, [r3, #0]
 8001588:	e007      	b.n	800159a <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	681a      	ldr	r2, [r3, #0]
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001598:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	7e5b      	ldrb	r3, [r3, #25]
 800159e:	2b01      	cmp	r3, #1
 80015a0:	d108      	bne.n	80015b4 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	681a      	ldr	r2, [r3, #0]
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80015b0:	601a      	str	r2, [r3, #0]
 80015b2:	e007      	b.n	80015c4 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	681a      	ldr	r2, [r3, #0]
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80015c2:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	7e9b      	ldrb	r3, [r3, #26]
 80015c8:	2b01      	cmp	r3, #1
 80015ca:	d108      	bne.n	80015de <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	681a      	ldr	r2, [r3, #0]
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	f042 0220 	orr.w	r2, r2, #32
 80015da:	601a      	str	r2, [r3, #0]
 80015dc:	e007      	b.n	80015ee <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	681a      	ldr	r2, [r3, #0]
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	f022 0220 	bic.w	r2, r2, #32
 80015ec:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	7edb      	ldrb	r3, [r3, #27]
 80015f2:	2b01      	cmp	r3, #1
 80015f4:	d108      	bne.n	8001608 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	681a      	ldr	r2, [r3, #0]
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	f022 0210 	bic.w	r2, r2, #16
 8001604:	601a      	str	r2, [r3, #0]
 8001606:	e007      	b.n	8001618 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	681a      	ldr	r2, [r3, #0]
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	f042 0210 	orr.w	r2, r2, #16
 8001616:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	7f1b      	ldrb	r3, [r3, #28]
 800161c:	2b01      	cmp	r3, #1
 800161e:	d108      	bne.n	8001632 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	681a      	ldr	r2, [r3, #0]
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	f042 0208 	orr.w	r2, r2, #8
 800162e:	601a      	str	r2, [r3, #0]
 8001630:	e007      	b.n	8001642 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	681a      	ldr	r2, [r3, #0]
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	f022 0208 	bic.w	r2, r2, #8
 8001640:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	7f5b      	ldrb	r3, [r3, #29]
 8001646:	2b01      	cmp	r3, #1
 8001648:	d108      	bne.n	800165c <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	681a      	ldr	r2, [r3, #0]
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	f042 0204 	orr.w	r2, r2, #4
 8001658:	601a      	str	r2, [r3, #0]
 800165a:	e007      	b.n	800166c <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	681a      	ldr	r2, [r3, #0]
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	f022 0204 	bic.w	r2, r2, #4
 800166a:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	689a      	ldr	r2, [r3, #8]
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	68db      	ldr	r3, [r3, #12]
 8001674:	431a      	orrs	r2, r3
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	691b      	ldr	r3, [r3, #16]
 800167a:	431a      	orrs	r2, r3
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	695b      	ldr	r3, [r3, #20]
 8001680:	ea42 0103 	orr.w	r1, r2, r3
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	685b      	ldr	r3, [r3, #4]
 8001688:	1e5a      	subs	r2, r3, #1
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	430a      	orrs	r2, r1
 8001690:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	2200      	movs	r2, #0
 8001696:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	2201      	movs	r2, #1
 800169c:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80016a0:	2300      	movs	r3, #0
}
 80016a2:	4618      	mov	r0, r3
 80016a4:	3710      	adds	r7, #16
 80016a6:	46bd      	mov	sp, r7
 80016a8:	bd80      	pop	{r7, pc}

080016aa <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 80016aa:	b480      	push	{r7}
 80016ac:	b087      	sub	sp, #28
 80016ae:	af00      	add	r7, sp, #0
 80016b0:	6078      	str	r0, [r7, #4]
 80016b2:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80016c0:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 80016c2:	7cfb      	ldrb	r3, [r7, #19]
 80016c4:	2b01      	cmp	r3, #1
 80016c6:	d003      	beq.n	80016d0 <HAL_CAN_ConfigFilter+0x26>
 80016c8:	7cfb      	ldrb	r3, [r7, #19]
 80016ca:	2b02      	cmp	r3, #2
 80016cc:	f040 80aa 	bne.w	8001824 <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80016d0:	697b      	ldr	r3, [r7, #20]
 80016d2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80016d6:	f043 0201 	orr.w	r2, r3, #1
 80016da:	697b      	ldr	r3, [r7, #20]
 80016dc:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80016e0:	683b      	ldr	r3, [r7, #0]
 80016e2:	695b      	ldr	r3, [r3, #20]
 80016e4:	f003 031f 	and.w	r3, r3, #31
 80016e8:	2201      	movs	r2, #1
 80016ea:	fa02 f303 	lsl.w	r3, r2, r3
 80016ee:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80016f0:	697b      	ldr	r3, [r7, #20]
 80016f2:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80016f6:	68fb      	ldr	r3, [r7, #12]
 80016f8:	43db      	mvns	r3, r3
 80016fa:	401a      	ands	r2, r3
 80016fc:	697b      	ldr	r3, [r7, #20]
 80016fe:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8001702:	683b      	ldr	r3, [r7, #0]
 8001704:	69db      	ldr	r3, [r3, #28]
 8001706:	2b00      	cmp	r3, #0
 8001708:	d123      	bne.n	8001752 <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 800170a:	697b      	ldr	r3, [r7, #20]
 800170c:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8001710:	68fb      	ldr	r3, [r7, #12]
 8001712:	43db      	mvns	r3, r3
 8001714:	401a      	ands	r2, r3
 8001716:	697b      	ldr	r3, [r7, #20]
 8001718:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800171c:	683b      	ldr	r3, [r7, #0]
 800171e:	68db      	ldr	r3, [r3, #12]
 8001720:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001722:	683b      	ldr	r3, [r7, #0]
 8001724:	685b      	ldr	r3, [r3, #4]
 8001726:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001728:	683a      	ldr	r2, [r7, #0]
 800172a:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800172c:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800172e:	697b      	ldr	r3, [r7, #20]
 8001730:	3248      	adds	r2, #72	; 0x48
 8001732:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001736:	683b      	ldr	r3, [r7, #0]
 8001738:	689b      	ldr	r3, [r3, #8]
 800173a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 800173c:	683b      	ldr	r3, [r7, #0]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001742:	683b      	ldr	r3, [r7, #0]
 8001744:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001746:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001748:	6979      	ldr	r1, [r7, #20]
 800174a:	3348      	adds	r3, #72	; 0x48
 800174c:	00db      	lsls	r3, r3, #3
 800174e:	440b      	add	r3, r1
 8001750:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8001752:	683b      	ldr	r3, [r7, #0]
 8001754:	69db      	ldr	r3, [r3, #28]
 8001756:	2b01      	cmp	r3, #1
 8001758:	d122      	bne.n	80017a0 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 800175a:	697b      	ldr	r3, [r7, #20]
 800175c:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8001760:	68fb      	ldr	r3, [r7, #12]
 8001762:	431a      	orrs	r2, r3
 8001764:	697b      	ldr	r3, [r7, #20]
 8001766:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800176a:	683b      	ldr	r3, [r7, #0]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001770:	683b      	ldr	r3, [r7, #0]
 8001772:	685b      	ldr	r3, [r3, #4]
 8001774:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001776:	683a      	ldr	r2, [r7, #0]
 8001778:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800177a:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800177c:	697b      	ldr	r3, [r7, #20]
 800177e:	3248      	adds	r2, #72	; 0x48
 8001780:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001784:	683b      	ldr	r3, [r7, #0]
 8001786:	689b      	ldr	r3, [r3, #8]
 8001788:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 800178a:	683b      	ldr	r3, [r7, #0]
 800178c:	68db      	ldr	r3, [r3, #12]
 800178e:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001790:	683b      	ldr	r3, [r7, #0]
 8001792:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001794:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001796:	6979      	ldr	r1, [r7, #20]
 8001798:	3348      	adds	r3, #72	; 0x48
 800179a:	00db      	lsls	r3, r3, #3
 800179c:	440b      	add	r3, r1
 800179e:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 80017a0:	683b      	ldr	r3, [r7, #0]
 80017a2:	699b      	ldr	r3, [r3, #24]
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d109      	bne.n	80017bc <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 80017a8:	697b      	ldr	r3, [r7, #20]
 80017aa:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80017ae:	68fb      	ldr	r3, [r7, #12]
 80017b0:	43db      	mvns	r3, r3
 80017b2:	401a      	ands	r2, r3
 80017b4:	697b      	ldr	r3, [r7, #20]
 80017b6:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 80017ba:	e007      	b.n	80017cc <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 80017bc:	697b      	ldr	r3, [r7, #20]
 80017be:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80017c2:	68fb      	ldr	r3, [r7, #12]
 80017c4:	431a      	orrs	r2, r3
 80017c6:	697b      	ldr	r3, [r7, #20]
 80017c8:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 80017cc:	683b      	ldr	r3, [r7, #0]
 80017ce:	691b      	ldr	r3, [r3, #16]
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d109      	bne.n	80017e8 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 80017d4:	697b      	ldr	r3, [r7, #20]
 80017d6:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80017da:	68fb      	ldr	r3, [r7, #12]
 80017dc:	43db      	mvns	r3, r3
 80017de:	401a      	ands	r2, r3
 80017e0:	697b      	ldr	r3, [r7, #20]
 80017e2:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 80017e6:	e007      	b.n	80017f8 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 80017e8:	697b      	ldr	r3, [r7, #20]
 80017ea:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80017ee:	68fb      	ldr	r3, [r7, #12]
 80017f0:	431a      	orrs	r2, r3
 80017f2:	697b      	ldr	r3, [r7, #20]
 80017f4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80017f8:	683b      	ldr	r3, [r7, #0]
 80017fa:	6a1b      	ldr	r3, [r3, #32]
 80017fc:	2b01      	cmp	r3, #1
 80017fe:	d107      	bne.n	8001810 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8001800:	697b      	ldr	r3, [r7, #20]
 8001802:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8001806:	68fb      	ldr	r3, [r7, #12]
 8001808:	431a      	orrs	r2, r3
 800180a:	697b      	ldr	r3, [r7, #20]
 800180c:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001810:	697b      	ldr	r3, [r7, #20]
 8001812:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001816:	f023 0201 	bic.w	r2, r3, #1
 800181a:	697b      	ldr	r3, [r7, #20]
 800181c:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8001820:	2300      	movs	r3, #0
 8001822:	e006      	b.n	8001832 <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001828:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001830:	2301      	movs	r3, #1
  }
}
 8001832:	4618      	mov	r0, r3
 8001834:	371c      	adds	r7, #28
 8001836:	46bd      	mov	sp, r7
 8001838:	bc80      	pop	{r7}
 800183a:	4770      	bx	lr

0800183c <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 800183c:	b580      	push	{r7, lr}
 800183e:	b084      	sub	sp, #16
 8001840:	af00      	add	r7, sp, #0
 8001842:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	f893 3020 	ldrb.w	r3, [r3, #32]
 800184a:	b2db      	uxtb	r3, r3
 800184c:	2b01      	cmp	r3, #1
 800184e:	d12e      	bne.n	80018ae <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	2202      	movs	r2, #2
 8001854:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	681a      	ldr	r2, [r3, #0]
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	f022 0201 	bic.w	r2, r2, #1
 8001866:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001868:	f7ff fe1a 	bl	80014a0 <HAL_GetTick>
 800186c:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800186e:	e012      	b.n	8001896 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001870:	f7ff fe16 	bl	80014a0 <HAL_GetTick>
 8001874:	4602      	mov	r2, r0
 8001876:	68fb      	ldr	r3, [r7, #12]
 8001878:	1ad3      	subs	r3, r2, r3
 800187a:	2b0a      	cmp	r3, #10
 800187c:	d90b      	bls.n	8001896 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001882:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	2205      	movs	r2, #5
 800188e:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8001892:	2301      	movs	r3, #1
 8001894:	e012      	b.n	80018bc <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	685b      	ldr	r3, [r3, #4]
 800189c:	f003 0301 	and.w	r3, r3, #1
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d1e5      	bne.n	8001870 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	2200      	movs	r2, #0
 80018a8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 80018aa:	2300      	movs	r3, #0
 80018ac:	e006      	b.n	80018bc <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018b2:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80018ba:	2301      	movs	r3, #1
  }
}
 80018bc:	4618      	mov	r0, r3
 80018be:	3710      	adds	r7, #16
 80018c0:	46bd      	mov	sp, r7
 80018c2:	bd80      	pop	{r7, pc}

080018c4 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 80018c4:	b480      	push	{r7}
 80018c6:	b089      	sub	sp, #36	; 0x24
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	60f8      	str	r0, [r7, #12]
 80018cc:	60b9      	str	r1, [r7, #8]
 80018ce:	607a      	str	r2, [r7, #4]
 80018d0:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 80018d2:	68fb      	ldr	r3, [r7, #12]
 80018d4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80018d8:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 80018da:	68fb      	ldr	r3, [r7, #12]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	689b      	ldr	r3, [r3, #8]
 80018e0:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 80018e2:	7ffb      	ldrb	r3, [r7, #31]
 80018e4:	2b01      	cmp	r3, #1
 80018e6:	d003      	beq.n	80018f0 <HAL_CAN_AddTxMessage+0x2c>
 80018e8:	7ffb      	ldrb	r3, [r7, #31]
 80018ea:	2b02      	cmp	r3, #2
 80018ec:	f040 80b8 	bne.w	8001a60 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80018f0:	69bb      	ldr	r3, [r7, #24]
 80018f2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d10a      	bne.n	8001910 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80018fa:	69bb      	ldr	r3, [r7, #24]
 80018fc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001900:	2b00      	cmp	r3, #0
 8001902:	d105      	bne.n	8001910 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8001904:	69bb      	ldr	r3, [r7, #24]
 8001906:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800190a:	2b00      	cmp	r3, #0
 800190c:	f000 80a0 	beq.w	8001a50 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8001910:	69bb      	ldr	r3, [r7, #24]
 8001912:	0e1b      	lsrs	r3, r3, #24
 8001914:	f003 0303 	and.w	r3, r3, #3
 8001918:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 800191a:	697b      	ldr	r3, [r7, #20]
 800191c:	2b02      	cmp	r3, #2
 800191e:	d907      	bls.n	8001930 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001924:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800192c:	2301      	movs	r3, #1
 800192e:	e09e      	b.n	8001a6e <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8001930:	2201      	movs	r2, #1
 8001932:	697b      	ldr	r3, [r7, #20]
 8001934:	409a      	lsls	r2, r3
 8001936:	683b      	ldr	r3, [r7, #0]
 8001938:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 800193a:	68bb      	ldr	r3, [r7, #8]
 800193c:	689b      	ldr	r3, [r3, #8]
 800193e:	2b00      	cmp	r3, #0
 8001940:	d10d      	bne.n	800195e <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001942:	68bb      	ldr	r3, [r7, #8]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8001948:	68bb      	ldr	r3, [r7, #8]
 800194a:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800194c:	68f9      	ldr	r1, [r7, #12]
 800194e:	6809      	ldr	r1, [r1, #0]
 8001950:	431a      	orrs	r2, r3
 8001952:	697b      	ldr	r3, [r7, #20]
 8001954:	3318      	adds	r3, #24
 8001956:	011b      	lsls	r3, r3, #4
 8001958:	440b      	add	r3, r1
 800195a:	601a      	str	r2, [r3, #0]
 800195c:	e00f      	b.n	800197e <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800195e:	68bb      	ldr	r3, [r7, #8]
 8001960:	685b      	ldr	r3, [r3, #4]
 8001962:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8001964:	68bb      	ldr	r3, [r7, #8]
 8001966:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001968:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 800196a:	68bb      	ldr	r3, [r7, #8]
 800196c:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800196e:	68f9      	ldr	r1, [r7, #12]
 8001970:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8001972:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001974:	697b      	ldr	r3, [r7, #20]
 8001976:	3318      	adds	r3, #24
 8001978:	011b      	lsls	r3, r3, #4
 800197a:	440b      	add	r3, r1
 800197c:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 800197e:	68fb      	ldr	r3, [r7, #12]
 8001980:	6819      	ldr	r1, [r3, #0]
 8001982:	68bb      	ldr	r3, [r7, #8]
 8001984:	691a      	ldr	r2, [r3, #16]
 8001986:	697b      	ldr	r3, [r7, #20]
 8001988:	3318      	adds	r3, #24
 800198a:	011b      	lsls	r3, r3, #4
 800198c:	440b      	add	r3, r1
 800198e:	3304      	adds	r3, #4
 8001990:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8001992:	68bb      	ldr	r3, [r7, #8]
 8001994:	7d1b      	ldrb	r3, [r3, #20]
 8001996:	2b01      	cmp	r3, #1
 8001998:	d111      	bne.n	80019be <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	681a      	ldr	r2, [r3, #0]
 800199e:	697b      	ldr	r3, [r7, #20]
 80019a0:	3318      	adds	r3, #24
 80019a2:	011b      	lsls	r3, r3, #4
 80019a4:	4413      	add	r3, r2
 80019a6:	3304      	adds	r3, #4
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	68fa      	ldr	r2, [r7, #12]
 80019ac:	6811      	ldr	r1, [r2, #0]
 80019ae:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80019b2:	697b      	ldr	r3, [r7, #20]
 80019b4:	3318      	adds	r3, #24
 80019b6:	011b      	lsls	r3, r3, #4
 80019b8:	440b      	add	r3, r1
 80019ba:	3304      	adds	r3, #4
 80019bc:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	3307      	adds	r3, #7
 80019c2:	781b      	ldrb	r3, [r3, #0]
 80019c4:	061a      	lsls	r2, r3, #24
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	3306      	adds	r3, #6
 80019ca:	781b      	ldrb	r3, [r3, #0]
 80019cc:	041b      	lsls	r3, r3, #16
 80019ce:	431a      	orrs	r2, r3
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	3305      	adds	r3, #5
 80019d4:	781b      	ldrb	r3, [r3, #0]
 80019d6:	021b      	lsls	r3, r3, #8
 80019d8:	4313      	orrs	r3, r2
 80019da:	687a      	ldr	r2, [r7, #4]
 80019dc:	3204      	adds	r2, #4
 80019de:	7812      	ldrb	r2, [r2, #0]
 80019e0:	4610      	mov	r0, r2
 80019e2:	68fa      	ldr	r2, [r7, #12]
 80019e4:	6811      	ldr	r1, [r2, #0]
 80019e6:	ea43 0200 	orr.w	r2, r3, r0
 80019ea:	697b      	ldr	r3, [r7, #20]
 80019ec:	011b      	lsls	r3, r3, #4
 80019ee:	440b      	add	r3, r1
 80019f0:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 80019f4:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	3303      	adds	r3, #3
 80019fa:	781b      	ldrb	r3, [r3, #0]
 80019fc:	061a      	lsls	r2, r3, #24
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	3302      	adds	r3, #2
 8001a02:	781b      	ldrb	r3, [r3, #0]
 8001a04:	041b      	lsls	r3, r3, #16
 8001a06:	431a      	orrs	r2, r3
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	3301      	adds	r3, #1
 8001a0c:	781b      	ldrb	r3, [r3, #0]
 8001a0e:	021b      	lsls	r3, r3, #8
 8001a10:	4313      	orrs	r3, r2
 8001a12:	687a      	ldr	r2, [r7, #4]
 8001a14:	7812      	ldrb	r2, [r2, #0]
 8001a16:	4610      	mov	r0, r2
 8001a18:	68fa      	ldr	r2, [r7, #12]
 8001a1a:	6811      	ldr	r1, [r2, #0]
 8001a1c:	ea43 0200 	orr.w	r2, r3, r0
 8001a20:	697b      	ldr	r3, [r7, #20]
 8001a22:	011b      	lsls	r3, r3, #4
 8001a24:	440b      	add	r3, r1
 8001a26:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8001a2a:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	681a      	ldr	r2, [r3, #0]
 8001a30:	697b      	ldr	r3, [r7, #20]
 8001a32:	3318      	adds	r3, #24
 8001a34:	011b      	lsls	r3, r3, #4
 8001a36:	4413      	add	r3, r2
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	68fa      	ldr	r2, [r7, #12]
 8001a3c:	6811      	ldr	r1, [r2, #0]
 8001a3e:	f043 0201 	orr.w	r2, r3, #1
 8001a42:	697b      	ldr	r3, [r7, #20]
 8001a44:	3318      	adds	r3, #24
 8001a46:	011b      	lsls	r3, r3, #4
 8001a48:	440b      	add	r3, r1
 8001a4a:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8001a4c:	2300      	movs	r3, #0
 8001a4e:	e00e      	b.n	8001a6e <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a54:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8001a5c:	2301      	movs	r3, #1
 8001a5e:	e006      	b.n	8001a6e <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a64:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001a6c:	2301      	movs	r3, #1
  }
}
 8001a6e:	4618      	mov	r0, r3
 8001a70:	3724      	adds	r7, #36	; 0x24
 8001a72:	46bd      	mov	sp, r7
 8001a74:	bc80      	pop	{r7}
 8001a76:	4770      	bx	lr

08001a78 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8001a78:	b480      	push	{r7}
 8001a7a:	b087      	sub	sp, #28
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	60f8      	str	r0, [r7, #12]
 8001a80:	60b9      	str	r1, [r7, #8]
 8001a82:	607a      	str	r2, [r7, #4]
 8001a84:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001a8c:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8001a8e:	7dfb      	ldrb	r3, [r7, #23]
 8001a90:	2b01      	cmp	r3, #1
 8001a92:	d003      	beq.n	8001a9c <HAL_CAN_GetRxMessage+0x24>
 8001a94:	7dfb      	ldrb	r3, [r7, #23]
 8001a96:	2b02      	cmp	r3, #2
 8001a98:	f040 80f3 	bne.w	8001c82 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001a9c:	68bb      	ldr	r3, [r7, #8]
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d10e      	bne.n	8001ac0 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	68db      	ldr	r3, [r3, #12]
 8001aa8:	f003 0303 	and.w	r3, r3, #3
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d116      	bne.n	8001ade <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ab4:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001abc:	2301      	movs	r3, #1
 8001abe:	e0e7      	b.n	8001c90 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	691b      	ldr	r3, [r3, #16]
 8001ac6:	f003 0303 	and.w	r3, r3, #3
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d107      	bne.n	8001ade <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ad2:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001ada:	2301      	movs	r3, #1
 8001adc:	e0d8      	b.n	8001c90 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8001ade:	68fb      	ldr	r3, [r7, #12]
 8001ae0:	681a      	ldr	r2, [r3, #0]
 8001ae2:	68bb      	ldr	r3, [r7, #8]
 8001ae4:	331b      	adds	r3, #27
 8001ae6:	011b      	lsls	r3, r3, #4
 8001ae8:	4413      	add	r3, r2
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	f003 0204 	and.w	r2, r3, #4
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	689b      	ldr	r3, [r3, #8]
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d10c      	bne.n	8001b16 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	681a      	ldr	r2, [r3, #0]
 8001b00:	68bb      	ldr	r3, [r7, #8]
 8001b02:	331b      	adds	r3, #27
 8001b04:	011b      	lsls	r3, r3, #4
 8001b06:	4413      	add	r3, r2
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	0d5b      	lsrs	r3, r3, #21
 8001b0c:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	601a      	str	r2, [r3, #0]
 8001b14:	e00b      	b.n	8001b2e <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	681a      	ldr	r2, [r3, #0]
 8001b1a:	68bb      	ldr	r3, [r7, #8]
 8001b1c:	331b      	adds	r3, #27
 8001b1e:	011b      	lsls	r3, r3, #4
 8001b20:	4413      	add	r3, r2
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	08db      	lsrs	r3, r3, #3
 8001b26:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	681a      	ldr	r2, [r3, #0]
 8001b32:	68bb      	ldr	r3, [r7, #8]
 8001b34:	331b      	adds	r3, #27
 8001b36:	011b      	lsls	r3, r3, #4
 8001b38:	4413      	add	r3, r2
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	f003 0202 	and.w	r2, r3, #2
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	681a      	ldr	r2, [r3, #0]
 8001b48:	68bb      	ldr	r3, [r7, #8]
 8001b4a:	331b      	adds	r3, #27
 8001b4c:	011b      	lsls	r3, r3, #4
 8001b4e:	4413      	add	r3, r2
 8001b50:	3304      	adds	r3, #4
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	f003 020f 	and.w	r2, r3, #15
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	681a      	ldr	r2, [r3, #0]
 8001b60:	68bb      	ldr	r3, [r7, #8]
 8001b62:	331b      	adds	r3, #27
 8001b64:	011b      	lsls	r3, r3, #4
 8001b66:	4413      	add	r3, r2
 8001b68:	3304      	adds	r3, #4
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	0a1b      	lsrs	r3, r3, #8
 8001b6e:	b2da      	uxtb	r2, r3
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	681a      	ldr	r2, [r3, #0]
 8001b78:	68bb      	ldr	r3, [r7, #8]
 8001b7a:	331b      	adds	r3, #27
 8001b7c:	011b      	lsls	r3, r3, #4
 8001b7e:	4413      	add	r3, r2
 8001b80:	3304      	adds	r3, #4
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	0c1b      	lsrs	r3, r3, #16
 8001b86:	b29a      	uxth	r2, r3
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	681a      	ldr	r2, [r3, #0]
 8001b90:	68bb      	ldr	r3, [r7, #8]
 8001b92:	011b      	lsls	r3, r3, #4
 8001b94:	4413      	add	r3, r2
 8001b96:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	b2da      	uxtb	r2, r3
 8001b9e:	683b      	ldr	r3, [r7, #0]
 8001ba0:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	681a      	ldr	r2, [r3, #0]
 8001ba6:	68bb      	ldr	r3, [r7, #8]
 8001ba8:	011b      	lsls	r3, r3, #4
 8001baa:	4413      	add	r3, r2
 8001bac:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	0a1a      	lsrs	r2, r3, #8
 8001bb4:	683b      	ldr	r3, [r7, #0]
 8001bb6:	3301      	adds	r3, #1
 8001bb8:	b2d2      	uxtb	r2, r2
 8001bba:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	681a      	ldr	r2, [r3, #0]
 8001bc0:	68bb      	ldr	r3, [r7, #8]
 8001bc2:	011b      	lsls	r3, r3, #4
 8001bc4:	4413      	add	r3, r2
 8001bc6:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	0c1a      	lsrs	r2, r3, #16
 8001bce:	683b      	ldr	r3, [r7, #0]
 8001bd0:	3302      	adds	r3, #2
 8001bd2:	b2d2      	uxtb	r2, r2
 8001bd4:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	681a      	ldr	r2, [r3, #0]
 8001bda:	68bb      	ldr	r3, [r7, #8]
 8001bdc:	011b      	lsls	r3, r3, #4
 8001bde:	4413      	add	r3, r2
 8001be0:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	0e1a      	lsrs	r2, r3, #24
 8001be8:	683b      	ldr	r3, [r7, #0]
 8001bea:	3303      	adds	r3, #3
 8001bec:	b2d2      	uxtb	r2, r2
 8001bee:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	681a      	ldr	r2, [r3, #0]
 8001bf4:	68bb      	ldr	r3, [r7, #8]
 8001bf6:	011b      	lsls	r3, r3, #4
 8001bf8:	4413      	add	r3, r2
 8001bfa:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001bfe:	681a      	ldr	r2, [r3, #0]
 8001c00:	683b      	ldr	r3, [r7, #0]
 8001c02:	3304      	adds	r3, #4
 8001c04:	b2d2      	uxtb	r2, r2
 8001c06:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	681a      	ldr	r2, [r3, #0]
 8001c0c:	68bb      	ldr	r3, [r7, #8]
 8001c0e:	011b      	lsls	r3, r3, #4
 8001c10:	4413      	add	r3, r2
 8001c12:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	0a1a      	lsrs	r2, r3, #8
 8001c1a:	683b      	ldr	r3, [r7, #0]
 8001c1c:	3305      	adds	r3, #5
 8001c1e:	b2d2      	uxtb	r2, r2
 8001c20:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	681a      	ldr	r2, [r3, #0]
 8001c26:	68bb      	ldr	r3, [r7, #8]
 8001c28:	011b      	lsls	r3, r3, #4
 8001c2a:	4413      	add	r3, r2
 8001c2c:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	0c1a      	lsrs	r2, r3, #16
 8001c34:	683b      	ldr	r3, [r7, #0]
 8001c36:	3306      	adds	r3, #6
 8001c38:	b2d2      	uxtb	r2, r2
 8001c3a:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	681a      	ldr	r2, [r3, #0]
 8001c40:	68bb      	ldr	r3, [r7, #8]
 8001c42:	011b      	lsls	r3, r3, #4
 8001c44:	4413      	add	r3, r2
 8001c46:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	0e1a      	lsrs	r2, r3, #24
 8001c4e:	683b      	ldr	r3, [r7, #0]
 8001c50:	3307      	adds	r3, #7
 8001c52:	b2d2      	uxtb	r2, r2
 8001c54:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001c56:	68bb      	ldr	r3, [r7, #8]
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d108      	bne.n	8001c6e <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	68da      	ldr	r2, [r3, #12]
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	f042 0220 	orr.w	r2, r2, #32
 8001c6a:	60da      	str	r2, [r3, #12]
 8001c6c:	e007      	b.n	8001c7e <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	691a      	ldr	r2, [r3, #16]
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	f042 0220 	orr.w	r2, r2, #32
 8001c7c:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8001c7e:	2300      	movs	r3, #0
 8001c80:	e006      	b.n	8001c90 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c86:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001c8e:	2301      	movs	r3, #1
  }
}
 8001c90:	4618      	mov	r0, r3
 8001c92:	371c      	adds	r7, #28
 8001c94:	46bd      	mov	sp, r7
 8001c96:	bc80      	pop	{r7}
 8001c98:	4770      	bx	lr

08001c9a <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8001c9a:	b480      	push	{r7}
 8001c9c:	b085      	sub	sp, #20
 8001c9e:	af00      	add	r7, sp, #0
 8001ca0:	6078      	str	r0, [r7, #4]
 8001ca2:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001caa:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8001cac:	7bfb      	ldrb	r3, [r7, #15]
 8001cae:	2b01      	cmp	r3, #1
 8001cb0:	d002      	beq.n	8001cb8 <HAL_CAN_ActivateNotification+0x1e>
 8001cb2:	7bfb      	ldrb	r3, [r7, #15]
 8001cb4:	2b02      	cmp	r3, #2
 8001cb6:	d109      	bne.n	8001ccc <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	6959      	ldr	r1, [r3, #20]
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	683a      	ldr	r2, [r7, #0]
 8001cc4:	430a      	orrs	r2, r1
 8001cc6:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8001cc8:	2300      	movs	r3, #0
 8001cca:	e006      	b.n	8001cda <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cd0:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001cd8:	2301      	movs	r3, #1
  }
}
 8001cda:	4618      	mov	r0, r3
 8001cdc:	3714      	adds	r7, #20
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	bc80      	pop	{r7}
 8001ce2:	4770      	bx	lr

08001ce4 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	b08a      	sub	sp, #40	; 0x28
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8001cec:	2300      	movs	r3, #0
 8001cee:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	695b      	ldr	r3, [r3, #20]
 8001cf6:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	685b      	ldr	r3, [r3, #4]
 8001cfe:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	689b      	ldr	r3, [r3, #8]
 8001d06:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	68db      	ldr	r3, [r3, #12]
 8001d0e:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	691b      	ldr	r3, [r3, #16]
 8001d16:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	699b      	ldr	r3, [r3, #24]
 8001d1e:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8001d20:	6a3b      	ldr	r3, [r7, #32]
 8001d22:	f003 0301 	and.w	r3, r3, #1
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d07c      	beq.n	8001e24 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8001d2a:	69bb      	ldr	r3, [r7, #24]
 8001d2c:	f003 0301 	and.w	r3, r3, #1
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d023      	beq.n	8001d7c <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	2201      	movs	r2, #1
 8001d3a:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8001d3c:	69bb      	ldr	r3, [r7, #24]
 8001d3e:	f003 0302 	and.w	r3, r3, #2
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d003      	beq.n	8001d4e <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8001d46:	6878      	ldr	r0, [r7, #4]
 8001d48:	f000 f983 	bl	8002052 <HAL_CAN_TxMailbox0CompleteCallback>
 8001d4c:	e016      	b.n	8001d7c <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8001d4e:	69bb      	ldr	r3, [r7, #24]
 8001d50:	f003 0304 	and.w	r3, r3, #4
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d004      	beq.n	8001d62 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8001d58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d5a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001d5e:	627b      	str	r3, [r7, #36]	; 0x24
 8001d60:	e00c      	b.n	8001d7c <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8001d62:	69bb      	ldr	r3, [r7, #24]
 8001d64:	f003 0308 	and.w	r3, r3, #8
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d004      	beq.n	8001d76 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8001d6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d6e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001d72:	627b      	str	r3, [r7, #36]	; 0x24
 8001d74:	e002      	b.n	8001d7c <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8001d76:	6878      	ldr	r0, [r7, #4]
 8001d78:	f000 f986 	bl	8002088 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8001d7c:	69bb      	ldr	r3, [r7, #24]
 8001d7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d024      	beq.n	8001dd0 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001d8e:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8001d90:	69bb      	ldr	r3, [r7, #24]
 8001d92:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d003      	beq.n	8001da2 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8001d9a:	6878      	ldr	r0, [r7, #4]
 8001d9c:	f000 f962 	bl	8002064 <HAL_CAN_TxMailbox1CompleteCallback>
 8001da0:	e016      	b.n	8001dd0 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8001da2:	69bb      	ldr	r3, [r7, #24]
 8001da4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d004      	beq.n	8001db6 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8001dac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dae:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001db2:	627b      	str	r3, [r7, #36]	; 0x24
 8001db4:	e00c      	b.n	8001dd0 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8001db6:	69bb      	ldr	r3, [r7, #24]
 8001db8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d004      	beq.n	8001dca <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8001dc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dc2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001dc6:	627b      	str	r3, [r7, #36]	; 0x24
 8001dc8:	e002      	b.n	8001dd0 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8001dca:	6878      	ldr	r0, [r7, #4]
 8001dcc:	f000 f965 	bl	800209a <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8001dd0:	69bb      	ldr	r3, [r7, #24]
 8001dd2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d024      	beq.n	8001e24 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001de2:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8001de4:	69bb      	ldr	r3, [r7, #24]
 8001de6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d003      	beq.n	8001df6 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8001dee:	6878      	ldr	r0, [r7, #4]
 8001df0:	f000 f941 	bl	8002076 <HAL_CAN_TxMailbox2CompleteCallback>
 8001df4:	e016      	b.n	8001e24 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8001df6:	69bb      	ldr	r3, [r7, #24]
 8001df8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d004      	beq.n	8001e0a <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8001e00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e02:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001e06:	627b      	str	r3, [r7, #36]	; 0x24
 8001e08:	e00c      	b.n	8001e24 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8001e0a:	69bb      	ldr	r3, [r7, #24]
 8001e0c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d004      	beq.n	8001e1e <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8001e14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e16:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e1a:	627b      	str	r3, [r7, #36]	; 0x24
 8001e1c:	e002      	b.n	8001e24 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8001e1e:	6878      	ldr	r0, [r7, #4]
 8001e20:	f000 f944 	bl	80020ac <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8001e24:	6a3b      	ldr	r3, [r7, #32]
 8001e26:	f003 0308 	and.w	r3, r3, #8
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d00c      	beq.n	8001e48 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8001e2e:	697b      	ldr	r3, [r7, #20]
 8001e30:	f003 0310 	and.w	r3, r3, #16
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d007      	beq.n	8001e48 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8001e38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e3a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001e3e:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	2210      	movs	r2, #16
 8001e46:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8001e48:	6a3b      	ldr	r3, [r7, #32]
 8001e4a:	f003 0304 	and.w	r3, r3, #4
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d00b      	beq.n	8001e6a <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8001e52:	697b      	ldr	r3, [r7, #20]
 8001e54:	f003 0308 	and.w	r3, r3, #8
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d006      	beq.n	8001e6a <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	2208      	movs	r2, #8
 8001e62:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8001e64:	6878      	ldr	r0, [r7, #4]
 8001e66:	f000 f92a 	bl	80020be <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8001e6a:	6a3b      	ldr	r3, [r7, #32]
 8001e6c:	f003 0302 	and.w	r3, r3, #2
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d009      	beq.n	8001e88 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	68db      	ldr	r3, [r3, #12]
 8001e7a:	f003 0303 	and.w	r3, r3, #3
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d002      	beq.n	8001e88 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8001e82:	6878      	ldr	r0, [r7, #4]
 8001e84:	f7fe ffe4 	bl	8000e50 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8001e88:	6a3b      	ldr	r3, [r7, #32]
 8001e8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d00c      	beq.n	8001eac <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8001e92:	693b      	ldr	r3, [r7, #16]
 8001e94:	f003 0310 	and.w	r3, r3, #16
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d007      	beq.n	8001eac <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8001e9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e9e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001ea2:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	2210      	movs	r2, #16
 8001eaa:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8001eac:	6a3b      	ldr	r3, [r7, #32]
 8001eae:	f003 0320 	and.w	r3, r3, #32
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d00b      	beq.n	8001ece <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8001eb6:	693b      	ldr	r3, [r7, #16]
 8001eb8:	f003 0308 	and.w	r3, r3, #8
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d006      	beq.n	8001ece <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	2208      	movs	r2, #8
 8001ec6:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8001ec8:	6878      	ldr	r0, [r7, #4]
 8001eca:	f000 f90a 	bl	80020e2 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8001ece:	6a3b      	ldr	r3, [r7, #32]
 8001ed0:	f003 0310 	and.w	r3, r3, #16
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d009      	beq.n	8001eec <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	691b      	ldr	r3, [r3, #16]
 8001ede:	f003 0303 	and.w	r3, r3, #3
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d002      	beq.n	8001eec <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8001ee6:	6878      	ldr	r0, [r7, #4]
 8001ee8:	f000 f8f2 	bl	80020d0 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8001eec:	6a3b      	ldr	r3, [r7, #32]
 8001eee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d00b      	beq.n	8001f0e <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8001ef6:	69fb      	ldr	r3, [r7, #28]
 8001ef8:	f003 0310 	and.w	r3, r3, #16
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d006      	beq.n	8001f0e <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	2210      	movs	r2, #16
 8001f06:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8001f08:	6878      	ldr	r0, [r7, #4]
 8001f0a:	f000 f8f3 	bl	80020f4 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8001f0e:	6a3b      	ldr	r3, [r7, #32]
 8001f10:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d00b      	beq.n	8001f30 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8001f18:	69fb      	ldr	r3, [r7, #28]
 8001f1a:	f003 0308 	and.w	r3, r3, #8
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d006      	beq.n	8001f30 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	2208      	movs	r2, #8
 8001f28:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8001f2a:	6878      	ldr	r0, [r7, #4]
 8001f2c:	f000 f8eb 	bl	8002106 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8001f30:	6a3b      	ldr	r3, [r7, #32]
 8001f32:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d07b      	beq.n	8002032 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8001f3a:	69fb      	ldr	r3, [r7, #28]
 8001f3c:	f003 0304 	and.w	r3, r3, #4
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d072      	beq.n	800202a <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001f44:	6a3b      	ldr	r3, [r7, #32]
 8001f46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d008      	beq.n	8001f60 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d003      	beq.n	8001f60 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8001f58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f5a:	f043 0301 	orr.w	r3, r3, #1
 8001f5e:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001f60:	6a3b      	ldr	r3, [r7, #32]
 8001f62:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d008      	beq.n	8001f7c <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d003      	beq.n	8001f7c <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8001f74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f76:	f043 0302 	orr.w	r3, r3, #2
 8001f7a:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001f7c:	6a3b      	ldr	r3, [r7, #32]
 8001f7e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d008      	beq.n	8001f98 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d003      	beq.n	8001f98 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8001f90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f92:	f043 0304 	orr.w	r3, r3, #4
 8001f96:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001f98:	6a3b      	ldr	r3, [r7, #32]
 8001f9a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d043      	beq.n	800202a <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d03e      	beq.n	800202a <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001fb2:	2b60      	cmp	r3, #96	; 0x60
 8001fb4:	d02b      	beq.n	800200e <HAL_CAN_IRQHandler+0x32a>
 8001fb6:	2b60      	cmp	r3, #96	; 0x60
 8001fb8:	d82e      	bhi.n	8002018 <HAL_CAN_IRQHandler+0x334>
 8001fba:	2b50      	cmp	r3, #80	; 0x50
 8001fbc:	d022      	beq.n	8002004 <HAL_CAN_IRQHandler+0x320>
 8001fbe:	2b50      	cmp	r3, #80	; 0x50
 8001fc0:	d82a      	bhi.n	8002018 <HAL_CAN_IRQHandler+0x334>
 8001fc2:	2b40      	cmp	r3, #64	; 0x40
 8001fc4:	d019      	beq.n	8001ffa <HAL_CAN_IRQHandler+0x316>
 8001fc6:	2b40      	cmp	r3, #64	; 0x40
 8001fc8:	d826      	bhi.n	8002018 <HAL_CAN_IRQHandler+0x334>
 8001fca:	2b30      	cmp	r3, #48	; 0x30
 8001fcc:	d010      	beq.n	8001ff0 <HAL_CAN_IRQHandler+0x30c>
 8001fce:	2b30      	cmp	r3, #48	; 0x30
 8001fd0:	d822      	bhi.n	8002018 <HAL_CAN_IRQHandler+0x334>
 8001fd2:	2b10      	cmp	r3, #16
 8001fd4:	d002      	beq.n	8001fdc <HAL_CAN_IRQHandler+0x2f8>
 8001fd6:	2b20      	cmp	r3, #32
 8001fd8:	d005      	beq.n	8001fe6 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8001fda:	e01d      	b.n	8002018 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8001fdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fde:	f043 0308 	orr.w	r3, r3, #8
 8001fe2:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001fe4:	e019      	b.n	800201a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8001fe6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fe8:	f043 0310 	orr.w	r3, r3, #16
 8001fec:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001fee:	e014      	b.n	800201a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8001ff0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ff2:	f043 0320 	orr.w	r3, r3, #32
 8001ff6:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001ff8:	e00f      	b.n	800201a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8001ffa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ffc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002000:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002002:	e00a      	b.n	800201a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8002004:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002006:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800200a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800200c:	e005      	b.n	800201a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 800200e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002010:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002014:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002016:	e000      	b.n	800201a <HAL_CAN_IRQHandler+0x336>
            break;
 8002018:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	699a      	ldr	r2, [r3, #24]
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8002028:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	2204      	movs	r2, #4
 8002030:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8002032:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002034:	2b00      	cmp	r3, #0
 8002036:	d008      	beq.n	800204a <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800203c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800203e:	431a      	orrs	r2, r3
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8002044:	6878      	ldr	r0, [r7, #4]
 8002046:	f000 f867 	bl	8002118 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 800204a:	bf00      	nop
 800204c:	3728      	adds	r7, #40	; 0x28
 800204e:	46bd      	mov	sp, r7
 8002050:	bd80      	pop	{r7, pc}

08002052 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002052:	b480      	push	{r7}
 8002054:	b083      	sub	sp, #12
 8002056:	af00      	add	r7, sp, #0
 8002058:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 800205a:	bf00      	nop
 800205c:	370c      	adds	r7, #12
 800205e:	46bd      	mov	sp, r7
 8002060:	bc80      	pop	{r7}
 8002062:	4770      	bx	lr

08002064 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002064:	b480      	push	{r7}
 8002066:	b083      	sub	sp, #12
 8002068:	af00      	add	r7, sp, #0
 800206a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 800206c:	bf00      	nop
 800206e:	370c      	adds	r7, #12
 8002070:	46bd      	mov	sp, r7
 8002072:	bc80      	pop	{r7}
 8002074:	4770      	bx	lr

08002076 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002076:	b480      	push	{r7}
 8002078:	b083      	sub	sp, #12
 800207a:	af00      	add	r7, sp, #0
 800207c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 800207e:	bf00      	nop
 8002080:	370c      	adds	r7, #12
 8002082:	46bd      	mov	sp, r7
 8002084:	bc80      	pop	{r7}
 8002086:	4770      	bx	lr

08002088 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002088:	b480      	push	{r7}
 800208a:	b083      	sub	sp, #12
 800208c:	af00      	add	r7, sp, #0
 800208e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8002090:	bf00      	nop
 8002092:	370c      	adds	r7, #12
 8002094:	46bd      	mov	sp, r7
 8002096:	bc80      	pop	{r7}
 8002098:	4770      	bx	lr

0800209a <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 800209a:	b480      	push	{r7}
 800209c:	b083      	sub	sp, #12
 800209e:	af00      	add	r7, sp, #0
 80020a0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 80020a2:	bf00      	nop
 80020a4:	370c      	adds	r7, #12
 80020a6:	46bd      	mov	sp, r7
 80020a8:	bc80      	pop	{r7}
 80020aa:	4770      	bx	lr

080020ac <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 80020ac:	b480      	push	{r7}
 80020ae:	b083      	sub	sp, #12
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 80020b4:	bf00      	nop
 80020b6:	370c      	adds	r7, #12
 80020b8:	46bd      	mov	sp, r7
 80020ba:	bc80      	pop	{r7}
 80020bc:	4770      	bx	lr

080020be <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 80020be:	b480      	push	{r7}
 80020c0:	b083      	sub	sp, #12
 80020c2:	af00      	add	r7, sp, #0
 80020c4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 80020c6:	bf00      	nop
 80020c8:	370c      	adds	r7, #12
 80020ca:	46bd      	mov	sp, r7
 80020cc:	bc80      	pop	{r7}
 80020ce:	4770      	bx	lr

080020d0 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80020d0:	b480      	push	{r7}
 80020d2:	b083      	sub	sp, #12
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 80020d8:	bf00      	nop
 80020da:	370c      	adds	r7, #12
 80020dc:	46bd      	mov	sp, r7
 80020de:	bc80      	pop	{r7}
 80020e0:	4770      	bx	lr

080020e2 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 80020e2:	b480      	push	{r7}
 80020e4:	b083      	sub	sp, #12
 80020e6:	af00      	add	r7, sp, #0
 80020e8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 80020ea:	bf00      	nop
 80020ec:	370c      	adds	r7, #12
 80020ee:	46bd      	mov	sp, r7
 80020f0:	bc80      	pop	{r7}
 80020f2:	4770      	bx	lr

080020f4 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 80020f4:	b480      	push	{r7}
 80020f6:	b083      	sub	sp, #12
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 80020fc:	bf00      	nop
 80020fe:	370c      	adds	r7, #12
 8002100:	46bd      	mov	sp, r7
 8002102:	bc80      	pop	{r7}
 8002104:	4770      	bx	lr

08002106 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8002106:	b480      	push	{r7}
 8002108:	b083      	sub	sp, #12
 800210a:	af00      	add	r7, sp, #0
 800210c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 800210e:	bf00      	nop
 8002110:	370c      	adds	r7, #12
 8002112:	46bd      	mov	sp, r7
 8002114:	bc80      	pop	{r7}
 8002116:	4770      	bx	lr

08002118 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8002118:	b480      	push	{r7}
 800211a:	b083      	sub	sp, #12
 800211c:	af00      	add	r7, sp, #0
 800211e:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8002120:	bf00      	nop
 8002122:	370c      	adds	r7, #12
 8002124:	46bd      	mov	sp, r7
 8002126:	bc80      	pop	{r7}
 8002128:	4770      	bx	lr
	...

0800212c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800212c:	b480      	push	{r7}
 800212e:	b085      	sub	sp, #20
 8002130:	af00      	add	r7, sp, #0
 8002132:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	f003 0307 	and.w	r3, r3, #7
 800213a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800213c:	4b0c      	ldr	r3, [pc, #48]	; (8002170 <__NVIC_SetPriorityGrouping+0x44>)
 800213e:	68db      	ldr	r3, [r3, #12]
 8002140:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002142:	68ba      	ldr	r2, [r7, #8]
 8002144:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002148:	4013      	ands	r3, r2
 800214a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002150:	68bb      	ldr	r3, [r7, #8]
 8002152:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002154:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002158:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800215c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800215e:	4a04      	ldr	r2, [pc, #16]	; (8002170 <__NVIC_SetPriorityGrouping+0x44>)
 8002160:	68bb      	ldr	r3, [r7, #8]
 8002162:	60d3      	str	r3, [r2, #12]
}
 8002164:	bf00      	nop
 8002166:	3714      	adds	r7, #20
 8002168:	46bd      	mov	sp, r7
 800216a:	bc80      	pop	{r7}
 800216c:	4770      	bx	lr
 800216e:	bf00      	nop
 8002170:	e000ed00 	.word	0xe000ed00

08002174 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002174:	b480      	push	{r7}
 8002176:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002178:	4b04      	ldr	r3, [pc, #16]	; (800218c <__NVIC_GetPriorityGrouping+0x18>)
 800217a:	68db      	ldr	r3, [r3, #12]
 800217c:	0a1b      	lsrs	r3, r3, #8
 800217e:	f003 0307 	and.w	r3, r3, #7
}
 8002182:	4618      	mov	r0, r3
 8002184:	46bd      	mov	sp, r7
 8002186:	bc80      	pop	{r7}
 8002188:	4770      	bx	lr
 800218a:	bf00      	nop
 800218c:	e000ed00 	.word	0xe000ed00

08002190 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002190:	b480      	push	{r7}
 8002192:	b083      	sub	sp, #12
 8002194:	af00      	add	r7, sp, #0
 8002196:	4603      	mov	r3, r0
 8002198:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800219a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800219e:	2b00      	cmp	r3, #0
 80021a0:	db0b      	blt.n	80021ba <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80021a2:	79fb      	ldrb	r3, [r7, #7]
 80021a4:	f003 021f 	and.w	r2, r3, #31
 80021a8:	4906      	ldr	r1, [pc, #24]	; (80021c4 <__NVIC_EnableIRQ+0x34>)
 80021aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021ae:	095b      	lsrs	r3, r3, #5
 80021b0:	2001      	movs	r0, #1
 80021b2:	fa00 f202 	lsl.w	r2, r0, r2
 80021b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80021ba:	bf00      	nop
 80021bc:	370c      	adds	r7, #12
 80021be:	46bd      	mov	sp, r7
 80021c0:	bc80      	pop	{r7}
 80021c2:	4770      	bx	lr
 80021c4:	e000e100 	.word	0xe000e100

080021c8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80021c8:	b480      	push	{r7}
 80021ca:	b083      	sub	sp, #12
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	4603      	mov	r3, r0
 80021d0:	6039      	str	r1, [r7, #0]
 80021d2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80021d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021d8:	2b00      	cmp	r3, #0
 80021da:	db0a      	blt.n	80021f2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021dc:	683b      	ldr	r3, [r7, #0]
 80021de:	b2da      	uxtb	r2, r3
 80021e0:	490c      	ldr	r1, [pc, #48]	; (8002214 <__NVIC_SetPriority+0x4c>)
 80021e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021e6:	0112      	lsls	r2, r2, #4
 80021e8:	b2d2      	uxtb	r2, r2
 80021ea:	440b      	add	r3, r1
 80021ec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80021f0:	e00a      	b.n	8002208 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021f2:	683b      	ldr	r3, [r7, #0]
 80021f4:	b2da      	uxtb	r2, r3
 80021f6:	4908      	ldr	r1, [pc, #32]	; (8002218 <__NVIC_SetPriority+0x50>)
 80021f8:	79fb      	ldrb	r3, [r7, #7]
 80021fa:	f003 030f 	and.w	r3, r3, #15
 80021fe:	3b04      	subs	r3, #4
 8002200:	0112      	lsls	r2, r2, #4
 8002202:	b2d2      	uxtb	r2, r2
 8002204:	440b      	add	r3, r1
 8002206:	761a      	strb	r2, [r3, #24]
}
 8002208:	bf00      	nop
 800220a:	370c      	adds	r7, #12
 800220c:	46bd      	mov	sp, r7
 800220e:	bc80      	pop	{r7}
 8002210:	4770      	bx	lr
 8002212:	bf00      	nop
 8002214:	e000e100 	.word	0xe000e100
 8002218:	e000ed00 	.word	0xe000ed00

0800221c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800221c:	b480      	push	{r7}
 800221e:	b089      	sub	sp, #36	; 0x24
 8002220:	af00      	add	r7, sp, #0
 8002222:	60f8      	str	r0, [r7, #12]
 8002224:	60b9      	str	r1, [r7, #8]
 8002226:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	f003 0307 	and.w	r3, r3, #7
 800222e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002230:	69fb      	ldr	r3, [r7, #28]
 8002232:	f1c3 0307 	rsb	r3, r3, #7
 8002236:	2b04      	cmp	r3, #4
 8002238:	bf28      	it	cs
 800223a:	2304      	movcs	r3, #4
 800223c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800223e:	69fb      	ldr	r3, [r7, #28]
 8002240:	3304      	adds	r3, #4
 8002242:	2b06      	cmp	r3, #6
 8002244:	d902      	bls.n	800224c <NVIC_EncodePriority+0x30>
 8002246:	69fb      	ldr	r3, [r7, #28]
 8002248:	3b03      	subs	r3, #3
 800224a:	e000      	b.n	800224e <NVIC_EncodePriority+0x32>
 800224c:	2300      	movs	r3, #0
 800224e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002250:	f04f 32ff 	mov.w	r2, #4294967295
 8002254:	69bb      	ldr	r3, [r7, #24]
 8002256:	fa02 f303 	lsl.w	r3, r2, r3
 800225a:	43da      	mvns	r2, r3
 800225c:	68bb      	ldr	r3, [r7, #8]
 800225e:	401a      	ands	r2, r3
 8002260:	697b      	ldr	r3, [r7, #20]
 8002262:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002264:	f04f 31ff 	mov.w	r1, #4294967295
 8002268:	697b      	ldr	r3, [r7, #20]
 800226a:	fa01 f303 	lsl.w	r3, r1, r3
 800226e:	43d9      	mvns	r1, r3
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002274:	4313      	orrs	r3, r2
         );
}
 8002276:	4618      	mov	r0, r3
 8002278:	3724      	adds	r7, #36	; 0x24
 800227a:	46bd      	mov	sp, r7
 800227c:	bc80      	pop	{r7}
 800227e:	4770      	bx	lr

08002280 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002280:	b580      	push	{r7, lr}
 8002282:	b082      	sub	sp, #8
 8002284:	af00      	add	r7, sp, #0
 8002286:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	3b01      	subs	r3, #1
 800228c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002290:	d301      	bcc.n	8002296 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002292:	2301      	movs	r3, #1
 8002294:	e00f      	b.n	80022b6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002296:	4a0a      	ldr	r2, [pc, #40]	; (80022c0 <SysTick_Config+0x40>)
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	3b01      	subs	r3, #1
 800229c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800229e:	210f      	movs	r1, #15
 80022a0:	f04f 30ff 	mov.w	r0, #4294967295
 80022a4:	f7ff ff90 	bl	80021c8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80022a8:	4b05      	ldr	r3, [pc, #20]	; (80022c0 <SysTick_Config+0x40>)
 80022aa:	2200      	movs	r2, #0
 80022ac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80022ae:	4b04      	ldr	r3, [pc, #16]	; (80022c0 <SysTick_Config+0x40>)
 80022b0:	2207      	movs	r2, #7
 80022b2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80022b4:	2300      	movs	r3, #0
}
 80022b6:	4618      	mov	r0, r3
 80022b8:	3708      	adds	r7, #8
 80022ba:	46bd      	mov	sp, r7
 80022bc:	bd80      	pop	{r7, pc}
 80022be:	bf00      	nop
 80022c0:	e000e010 	.word	0xe000e010

080022c4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80022c4:	b580      	push	{r7, lr}
 80022c6:	b082      	sub	sp, #8
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80022cc:	6878      	ldr	r0, [r7, #4]
 80022ce:	f7ff ff2d 	bl	800212c <__NVIC_SetPriorityGrouping>
}
 80022d2:	bf00      	nop
 80022d4:	3708      	adds	r7, #8
 80022d6:	46bd      	mov	sp, r7
 80022d8:	bd80      	pop	{r7, pc}

080022da <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80022da:	b580      	push	{r7, lr}
 80022dc:	b086      	sub	sp, #24
 80022de:	af00      	add	r7, sp, #0
 80022e0:	4603      	mov	r3, r0
 80022e2:	60b9      	str	r1, [r7, #8]
 80022e4:	607a      	str	r2, [r7, #4]
 80022e6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80022e8:	2300      	movs	r3, #0
 80022ea:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80022ec:	f7ff ff42 	bl	8002174 <__NVIC_GetPriorityGrouping>
 80022f0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80022f2:	687a      	ldr	r2, [r7, #4]
 80022f4:	68b9      	ldr	r1, [r7, #8]
 80022f6:	6978      	ldr	r0, [r7, #20]
 80022f8:	f7ff ff90 	bl	800221c <NVIC_EncodePriority>
 80022fc:	4602      	mov	r2, r0
 80022fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002302:	4611      	mov	r1, r2
 8002304:	4618      	mov	r0, r3
 8002306:	f7ff ff5f 	bl	80021c8 <__NVIC_SetPriority>
}
 800230a:	bf00      	nop
 800230c:	3718      	adds	r7, #24
 800230e:	46bd      	mov	sp, r7
 8002310:	bd80      	pop	{r7, pc}

08002312 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002312:	b580      	push	{r7, lr}
 8002314:	b082      	sub	sp, #8
 8002316:	af00      	add	r7, sp, #0
 8002318:	4603      	mov	r3, r0
 800231a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800231c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002320:	4618      	mov	r0, r3
 8002322:	f7ff ff35 	bl	8002190 <__NVIC_EnableIRQ>
}
 8002326:	bf00      	nop
 8002328:	3708      	adds	r7, #8
 800232a:	46bd      	mov	sp, r7
 800232c:	bd80      	pop	{r7, pc}

0800232e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800232e:	b580      	push	{r7, lr}
 8002330:	b082      	sub	sp, #8
 8002332:	af00      	add	r7, sp, #0
 8002334:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002336:	6878      	ldr	r0, [r7, #4]
 8002338:	f7ff ffa2 	bl	8002280 <SysTick_Config>
 800233c:	4603      	mov	r3, r0
}
 800233e:	4618      	mov	r0, r3
 8002340:	3708      	adds	r7, #8
 8002342:	46bd      	mov	sp, r7
 8002344:	bd80      	pop	{r7, pc}
	...

08002348 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002348:	b480      	push	{r7}
 800234a:	b08b      	sub	sp, #44	; 0x2c
 800234c:	af00      	add	r7, sp, #0
 800234e:	6078      	str	r0, [r7, #4]
 8002350:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002352:	2300      	movs	r3, #0
 8002354:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002356:	2300      	movs	r3, #0
 8002358:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800235a:	e169      	b.n	8002630 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800235c:	2201      	movs	r2, #1
 800235e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002360:	fa02 f303 	lsl.w	r3, r2, r3
 8002364:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002366:	683b      	ldr	r3, [r7, #0]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	69fa      	ldr	r2, [r7, #28]
 800236c:	4013      	ands	r3, r2
 800236e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002370:	69ba      	ldr	r2, [r7, #24]
 8002372:	69fb      	ldr	r3, [r7, #28]
 8002374:	429a      	cmp	r2, r3
 8002376:	f040 8158 	bne.w	800262a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800237a:	683b      	ldr	r3, [r7, #0]
 800237c:	685b      	ldr	r3, [r3, #4]
 800237e:	4a9a      	ldr	r2, [pc, #616]	; (80025e8 <HAL_GPIO_Init+0x2a0>)
 8002380:	4293      	cmp	r3, r2
 8002382:	d05e      	beq.n	8002442 <HAL_GPIO_Init+0xfa>
 8002384:	4a98      	ldr	r2, [pc, #608]	; (80025e8 <HAL_GPIO_Init+0x2a0>)
 8002386:	4293      	cmp	r3, r2
 8002388:	d875      	bhi.n	8002476 <HAL_GPIO_Init+0x12e>
 800238a:	4a98      	ldr	r2, [pc, #608]	; (80025ec <HAL_GPIO_Init+0x2a4>)
 800238c:	4293      	cmp	r3, r2
 800238e:	d058      	beq.n	8002442 <HAL_GPIO_Init+0xfa>
 8002390:	4a96      	ldr	r2, [pc, #600]	; (80025ec <HAL_GPIO_Init+0x2a4>)
 8002392:	4293      	cmp	r3, r2
 8002394:	d86f      	bhi.n	8002476 <HAL_GPIO_Init+0x12e>
 8002396:	4a96      	ldr	r2, [pc, #600]	; (80025f0 <HAL_GPIO_Init+0x2a8>)
 8002398:	4293      	cmp	r3, r2
 800239a:	d052      	beq.n	8002442 <HAL_GPIO_Init+0xfa>
 800239c:	4a94      	ldr	r2, [pc, #592]	; (80025f0 <HAL_GPIO_Init+0x2a8>)
 800239e:	4293      	cmp	r3, r2
 80023a0:	d869      	bhi.n	8002476 <HAL_GPIO_Init+0x12e>
 80023a2:	4a94      	ldr	r2, [pc, #592]	; (80025f4 <HAL_GPIO_Init+0x2ac>)
 80023a4:	4293      	cmp	r3, r2
 80023a6:	d04c      	beq.n	8002442 <HAL_GPIO_Init+0xfa>
 80023a8:	4a92      	ldr	r2, [pc, #584]	; (80025f4 <HAL_GPIO_Init+0x2ac>)
 80023aa:	4293      	cmp	r3, r2
 80023ac:	d863      	bhi.n	8002476 <HAL_GPIO_Init+0x12e>
 80023ae:	4a92      	ldr	r2, [pc, #584]	; (80025f8 <HAL_GPIO_Init+0x2b0>)
 80023b0:	4293      	cmp	r3, r2
 80023b2:	d046      	beq.n	8002442 <HAL_GPIO_Init+0xfa>
 80023b4:	4a90      	ldr	r2, [pc, #576]	; (80025f8 <HAL_GPIO_Init+0x2b0>)
 80023b6:	4293      	cmp	r3, r2
 80023b8:	d85d      	bhi.n	8002476 <HAL_GPIO_Init+0x12e>
 80023ba:	2b12      	cmp	r3, #18
 80023bc:	d82a      	bhi.n	8002414 <HAL_GPIO_Init+0xcc>
 80023be:	2b12      	cmp	r3, #18
 80023c0:	d859      	bhi.n	8002476 <HAL_GPIO_Init+0x12e>
 80023c2:	a201      	add	r2, pc, #4	; (adr r2, 80023c8 <HAL_GPIO_Init+0x80>)
 80023c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80023c8:	08002443 	.word	0x08002443
 80023cc:	0800241d 	.word	0x0800241d
 80023d0:	0800242f 	.word	0x0800242f
 80023d4:	08002471 	.word	0x08002471
 80023d8:	08002477 	.word	0x08002477
 80023dc:	08002477 	.word	0x08002477
 80023e0:	08002477 	.word	0x08002477
 80023e4:	08002477 	.word	0x08002477
 80023e8:	08002477 	.word	0x08002477
 80023ec:	08002477 	.word	0x08002477
 80023f0:	08002477 	.word	0x08002477
 80023f4:	08002477 	.word	0x08002477
 80023f8:	08002477 	.word	0x08002477
 80023fc:	08002477 	.word	0x08002477
 8002400:	08002477 	.word	0x08002477
 8002404:	08002477 	.word	0x08002477
 8002408:	08002477 	.word	0x08002477
 800240c:	08002425 	.word	0x08002425
 8002410:	08002439 	.word	0x08002439
 8002414:	4a79      	ldr	r2, [pc, #484]	; (80025fc <HAL_GPIO_Init+0x2b4>)
 8002416:	4293      	cmp	r3, r2
 8002418:	d013      	beq.n	8002442 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800241a:	e02c      	b.n	8002476 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800241c:	683b      	ldr	r3, [r7, #0]
 800241e:	68db      	ldr	r3, [r3, #12]
 8002420:	623b      	str	r3, [r7, #32]
          break;
 8002422:	e029      	b.n	8002478 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002424:	683b      	ldr	r3, [r7, #0]
 8002426:	68db      	ldr	r3, [r3, #12]
 8002428:	3304      	adds	r3, #4
 800242a:	623b      	str	r3, [r7, #32]
          break;
 800242c:	e024      	b.n	8002478 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800242e:	683b      	ldr	r3, [r7, #0]
 8002430:	68db      	ldr	r3, [r3, #12]
 8002432:	3308      	adds	r3, #8
 8002434:	623b      	str	r3, [r7, #32]
          break;
 8002436:	e01f      	b.n	8002478 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002438:	683b      	ldr	r3, [r7, #0]
 800243a:	68db      	ldr	r3, [r3, #12]
 800243c:	330c      	adds	r3, #12
 800243e:	623b      	str	r3, [r7, #32]
          break;
 8002440:	e01a      	b.n	8002478 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002442:	683b      	ldr	r3, [r7, #0]
 8002444:	689b      	ldr	r3, [r3, #8]
 8002446:	2b00      	cmp	r3, #0
 8002448:	d102      	bne.n	8002450 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800244a:	2304      	movs	r3, #4
 800244c:	623b      	str	r3, [r7, #32]
          break;
 800244e:	e013      	b.n	8002478 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002450:	683b      	ldr	r3, [r7, #0]
 8002452:	689b      	ldr	r3, [r3, #8]
 8002454:	2b01      	cmp	r3, #1
 8002456:	d105      	bne.n	8002464 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002458:	2308      	movs	r3, #8
 800245a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	69fa      	ldr	r2, [r7, #28]
 8002460:	611a      	str	r2, [r3, #16]
          break;
 8002462:	e009      	b.n	8002478 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002464:	2308      	movs	r3, #8
 8002466:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	69fa      	ldr	r2, [r7, #28]
 800246c:	615a      	str	r2, [r3, #20]
          break;
 800246e:	e003      	b.n	8002478 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002470:	2300      	movs	r3, #0
 8002472:	623b      	str	r3, [r7, #32]
          break;
 8002474:	e000      	b.n	8002478 <HAL_GPIO_Init+0x130>
          break;
 8002476:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002478:	69bb      	ldr	r3, [r7, #24]
 800247a:	2bff      	cmp	r3, #255	; 0xff
 800247c:	d801      	bhi.n	8002482 <HAL_GPIO_Init+0x13a>
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	e001      	b.n	8002486 <HAL_GPIO_Init+0x13e>
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	3304      	adds	r3, #4
 8002486:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002488:	69bb      	ldr	r3, [r7, #24]
 800248a:	2bff      	cmp	r3, #255	; 0xff
 800248c:	d802      	bhi.n	8002494 <HAL_GPIO_Init+0x14c>
 800248e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002490:	009b      	lsls	r3, r3, #2
 8002492:	e002      	b.n	800249a <HAL_GPIO_Init+0x152>
 8002494:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002496:	3b08      	subs	r3, #8
 8002498:	009b      	lsls	r3, r3, #2
 800249a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800249c:	697b      	ldr	r3, [r7, #20]
 800249e:	681a      	ldr	r2, [r3, #0]
 80024a0:	210f      	movs	r1, #15
 80024a2:	693b      	ldr	r3, [r7, #16]
 80024a4:	fa01 f303 	lsl.w	r3, r1, r3
 80024a8:	43db      	mvns	r3, r3
 80024aa:	401a      	ands	r2, r3
 80024ac:	6a39      	ldr	r1, [r7, #32]
 80024ae:	693b      	ldr	r3, [r7, #16]
 80024b0:	fa01 f303 	lsl.w	r3, r1, r3
 80024b4:	431a      	orrs	r2, r3
 80024b6:	697b      	ldr	r3, [r7, #20]
 80024b8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80024ba:	683b      	ldr	r3, [r7, #0]
 80024bc:	685b      	ldr	r3, [r3, #4]
 80024be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	f000 80b1 	beq.w	800262a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80024c8:	4b4d      	ldr	r3, [pc, #308]	; (8002600 <HAL_GPIO_Init+0x2b8>)
 80024ca:	699b      	ldr	r3, [r3, #24]
 80024cc:	4a4c      	ldr	r2, [pc, #304]	; (8002600 <HAL_GPIO_Init+0x2b8>)
 80024ce:	f043 0301 	orr.w	r3, r3, #1
 80024d2:	6193      	str	r3, [r2, #24]
 80024d4:	4b4a      	ldr	r3, [pc, #296]	; (8002600 <HAL_GPIO_Init+0x2b8>)
 80024d6:	699b      	ldr	r3, [r3, #24]
 80024d8:	f003 0301 	and.w	r3, r3, #1
 80024dc:	60bb      	str	r3, [r7, #8]
 80024de:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80024e0:	4a48      	ldr	r2, [pc, #288]	; (8002604 <HAL_GPIO_Init+0x2bc>)
 80024e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024e4:	089b      	lsrs	r3, r3, #2
 80024e6:	3302      	adds	r3, #2
 80024e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80024ec:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80024ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024f0:	f003 0303 	and.w	r3, r3, #3
 80024f4:	009b      	lsls	r3, r3, #2
 80024f6:	220f      	movs	r2, #15
 80024f8:	fa02 f303 	lsl.w	r3, r2, r3
 80024fc:	43db      	mvns	r3, r3
 80024fe:	68fa      	ldr	r2, [r7, #12]
 8002500:	4013      	ands	r3, r2
 8002502:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	4a40      	ldr	r2, [pc, #256]	; (8002608 <HAL_GPIO_Init+0x2c0>)
 8002508:	4293      	cmp	r3, r2
 800250a:	d013      	beq.n	8002534 <HAL_GPIO_Init+0x1ec>
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	4a3f      	ldr	r2, [pc, #252]	; (800260c <HAL_GPIO_Init+0x2c4>)
 8002510:	4293      	cmp	r3, r2
 8002512:	d00d      	beq.n	8002530 <HAL_GPIO_Init+0x1e8>
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	4a3e      	ldr	r2, [pc, #248]	; (8002610 <HAL_GPIO_Init+0x2c8>)
 8002518:	4293      	cmp	r3, r2
 800251a:	d007      	beq.n	800252c <HAL_GPIO_Init+0x1e4>
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	4a3d      	ldr	r2, [pc, #244]	; (8002614 <HAL_GPIO_Init+0x2cc>)
 8002520:	4293      	cmp	r3, r2
 8002522:	d101      	bne.n	8002528 <HAL_GPIO_Init+0x1e0>
 8002524:	2303      	movs	r3, #3
 8002526:	e006      	b.n	8002536 <HAL_GPIO_Init+0x1ee>
 8002528:	2304      	movs	r3, #4
 800252a:	e004      	b.n	8002536 <HAL_GPIO_Init+0x1ee>
 800252c:	2302      	movs	r3, #2
 800252e:	e002      	b.n	8002536 <HAL_GPIO_Init+0x1ee>
 8002530:	2301      	movs	r3, #1
 8002532:	e000      	b.n	8002536 <HAL_GPIO_Init+0x1ee>
 8002534:	2300      	movs	r3, #0
 8002536:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002538:	f002 0203 	and.w	r2, r2, #3
 800253c:	0092      	lsls	r2, r2, #2
 800253e:	4093      	lsls	r3, r2
 8002540:	68fa      	ldr	r2, [r7, #12]
 8002542:	4313      	orrs	r3, r2
 8002544:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002546:	492f      	ldr	r1, [pc, #188]	; (8002604 <HAL_GPIO_Init+0x2bc>)
 8002548:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800254a:	089b      	lsrs	r3, r3, #2
 800254c:	3302      	adds	r3, #2
 800254e:	68fa      	ldr	r2, [r7, #12]
 8002550:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002554:	683b      	ldr	r3, [r7, #0]
 8002556:	685b      	ldr	r3, [r3, #4]
 8002558:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800255c:	2b00      	cmp	r3, #0
 800255e:	d006      	beq.n	800256e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002560:	4b2d      	ldr	r3, [pc, #180]	; (8002618 <HAL_GPIO_Init+0x2d0>)
 8002562:	681a      	ldr	r2, [r3, #0]
 8002564:	492c      	ldr	r1, [pc, #176]	; (8002618 <HAL_GPIO_Init+0x2d0>)
 8002566:	69bb      	ldr	r3, [r7, #24]
 8002568:	4313      	orrs	r3, r2
 800256a:	600b      	str	r3, [r1, #0]
 800256c:	e006      	b.n	800257c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800256e:	4b2a      	ldr	r3, [pc, #168]	; (8002618 <HAL_GPIO_Init+0x2d0>)
 8002570:	681a      	ldr	r2, [r3, #0]
 8002572:	69bb      	ldr	r3, [r7, #24]
 8002574:	43db      	mvns	r3, r3
 8002576:	4928      	ldr	r1, [pc, #160]	; (8002618 <HAL_GPIO_Init+0x2d0>)
 8002578:	4013      	ands	r3, r2
 800257a:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800257c:	683b      	ldr	r3, [r7, #0]
 800257e:	685b      	ldr	r3, [r3, #4]
 8002580:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002584:	2b00      	cmp	r3, #0
 8002586:	d006      	beq.n	8002596 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002588:	4b23      	ldr	r3, [pc, #140]	; (8002618 <HAL_GPIO_Init+0x2d0>)
 800258a:	685a      	ldr	r2, [r3, #4]
 800258c:	4922      	ldr	r1, [pc, #136]	; (8002618 <HAL_GPIO_Init+0x2d0>)
 800258e:	69bb      	ldr	r3, [r7, #24]
 8002590:	4313      	orrs	r3, r2
 8002592:	604b      	str	r3, [r1, #4]
 8002594:	e006      	b.n	80025a4 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002596:	4b20      	ldr	r3, [pc, #128]	; (8002618 <HAL_GPIO_Init+0x2d0>)
 8002598:	685a      	ldr	r2, [r3, #4]
 800259a:	69bb      	ldr	r3, [r7, #24]
 800259c:	43db      	mvns	r3, r3
 800259e:	491e      	ldr	r1, [pc, #120]	; (8002618 <HAL_GPIO_Init+0x2d0>)
 80025a0:	4013      	ands	r3, r2
 80025a2:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80025a4:	683b      	ldr	r3, [r7, #0]
 80025a6:	685b      	ldr	r3, [r3, #4]
 80025a8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d006      	beq.n	80025be <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80025b0:	4b19      	ldr	r3, [pc, #100]	; (8002618 <HAL_GPIO_Init+0x2d0>)
 80025b2:	689a      	ldr	r2, [r3, #8]
 80025b4:	4918      	ldr	r1, [pc, #96]	; (8002618 <HAL_GPIO_Init+0x2d0>)
 80025b6:	69bb      	ldr	r3, [r7, #24]
 80025b8:	4313      	orrs	r3, r2
 80025ba:	608b      	str	r3, [r1, #8]
 80025bc:	e006      	b.n	80025cc <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80025be:	4b16      	ldr	r3, [pc, #88]	; (8002618 <HAL_GPIO_Init+0x2d0>)
 80025c0:	689a      	ldr	r2, [r3, #8]
 80025c2:	69bb      	ldr	r3, [r7, #24]
 80025c4:	43db      	mvns	r3, r3
 80025c6:	4914      	ldr	r1, [pc, #80]	; (8002618 <HAL_GPIO_Init+0x2d0>)
 80025c8:	4013      	ands	r3, r2
 80025ca:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80025cc:	683b      	ldr	r3, [r7, #0]
 80025ce:	685b      	ldr	r3, [r3, #4]
 80025d0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d021      	beq.n	800261c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80025d8:	4b0f      	ldr	r3, [pc, #60]	; (8002618 <HAL_GPIO_Init+0x2d0>)
 80025da:	68da      	ldr	r2, [r3, #12]
 80025dc:	490e      	ldr	r1, [pc, #56]	; (8002618 <HAL_GPIO_Init+0x2d0>)
 80025de:	69bb      	ldr	r3, [r7, #24]
 80025e0:	4313      	orrs	r3, r2
 80025e2:	60cb      	str	r3, [r1, #12]
 80025e4:	e021      	b.n	800262a <HAL_GPIO_Init+0x2e2>
 80025e6:	bf00      	nop
 80025e8:	10320000 	.word	0x10320000
 80025ec:	10310000 	.word	0x10310000
 80025f0:	10220000 	.word	0x10220000
 80025f4:	10210000 	.word	0x10210000
 80025f8:	10120000 	.word	0x10120000
 80025fc:	10110000 	.word	0x10110000
 8002600:	40021000 	.word	0x40021000
 8002604:	40010000 	.word	0x40010000
 8002608:	40010800 	.word	0x40010800
 800260c:	40010c00 	.word	0x40010c00
 8002610:	40011000 	.word	0x40011000
 8002614:	40011400 	.word	0x40011400
 8002618:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800261c:	4b0b      	ldr	r3, [pc, #44]	; (800264c <HAL_GPIO_Init+0x304>)
 800261e:	68da      	ldr	r2, [r3, #12]
 8002620:	69bb      	ldr	r3, [r7, #24]
 8002622:	43db      	mvns	r3, r3
 8002624:	4909      	ldr	r1, [pc, #36]	; (800264c <HAL_GPIO_Init+0x304>)
 8002626:	4013      	ands	r3, r2
 8002628:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800262a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800262c:	3301      	adds	r3, #1
 800262e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002630:	683b      	ldr	r3, [r7, #0]
 8002632:	681a      	ldr	r2, [r3, #0]
 8002634:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002636:	fa22 f303 	lsr.w	r3, r2, r3
 800263a:	2b00      	cmp	r3, #0
 800263c:	f47f ae8e 	bne.w	800235c <HAL_GPIO_Init+0x14>
  }
}
 8002640:	bf00      	nop
 8002642:	bf00      	nop
 8002644:	372c      	adds	r7, #44	; 0x2c
 8002646:	46bd      	mov	sp, r7
 8002648:	bc80      	pop	{r7}
 800264a:	4770      	bx	lr
 800264c:	40010400 	.word	0x40010400

08002650 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002650:	b480      	push	{r7}
 8002652:	b085      	sub	sp, #20
 8002654:	af00      	add	r7, sp, #0
 8002656:	6078      	str	r0, [r7, #4]
 8002658:	460b      	mov	r3, r1
 800265a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	689a      	ldr	r2, [r3, #8]
 8002660:	887b      	ldrh	r3, [r7, #2]
 8002662:	4013      	ands	r3, r2
 8002664:	2b00      	cmp	r3, #0
 8002666:	d002      	beq.n	800266e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002668:	2301      	movs	r3, #1
 800266a:	73fb      	strb	r3, [r7, #15]
 800266c:	e001      	b.n	8002672 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800266e:	2300      	movs	r3, #0
 8002670:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002672:	7bfb      	ldrb	r3, [r7, #15]
}
 8002674:	4618      	mov	r0, r3
 8002676:	3714      	adds	r7, #20
 8002678:	46bd      	mov	sp, r7
 800267a:	bc80      	pop	{r7}
 800267c:	4770      	bx	lr

0800267e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800267e:	b480      	push	{r7}
 8002680:	b083      	sub	sp, #12
 8002682:	af00      	add	r7, sp, #0
 8002684:	6078      	str	r0, [r7, #4]
 8002686:	460b      	mov	r3, r1
 8002688:	807b      	strh	r3, [r7, #2]
 800268a:	4613      	mov	r3, r2
 800268c:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800268e:	787b      	ldrb	r3, [r7, #1]
 8002690:	2b00      	cmp	r3, #0
 8002692:	d003      	beq.n	800269c <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002694:	887a      	ldrh	r2, [r7, #2]
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800269a:	e003      	b.n	80026a4 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800269c:	887b      	ldrh	r3, [r7, #2]
 800269e:	041a      	lsls	r2, r3, #16
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	611a      	str	r2, [r3, #16]
}
 80026a4:	bf00      	nop
 80026a6:	370c      	adds	r7, #12
 80026a8:	46bd      	mov	sp, r7
 80026aa:	bc80      	pop	{r7}
 80026ac:	4770      	bx	lr
	...

080026b0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80026b0:	b580      	push	{r7, lr}
 80026b2:	b086      	sub	sp, #24
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d101      	bne.n	80026c2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80026be:	2301      	movs	r3, #1
 80026c0:	e272      	b.n	8002ba8 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	f003 0301 	and.w	r3, r3, #1
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	f000 8087 	beq.w	80027de <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80026d0:	4b92      	ldr	r3, [pc, #584]	; (800291c <HAL_RCC_OscConfig+0x26c>)
 80026d2:	685b      	ldr	r3, [r3, #4]
 80026d4:	f003 030c 	and.w	r3, r3, #12
 80026d8:	2b04      	cmp	r3, #4
 80026da:	d00c      	beq.n	80026f6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80026dc:	4b8f      	ldr	r3, [pc, #572]	; (800291c <HAL_RCC_OscConfig+0x26c>)
 80026de:	685b      	ldr	r3, [r3, #4]
 80026e0:	f003 030c 	and.w	r3, r3, #12
 80026e4:	2b08      	cmp	r3, #8
 80026e6:	d112      	bne.n	800270e <HAL_RCC_OscConfig+0x5e>
 80026e8:	4b8c      	ldr	r3, [pc, #560]	; (800291c <HAL_RCC_OscConfig+0x26c>)
 80026ea:	685b      	ldr	r3, [r3, #4]
 80026ec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80026f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80026f4:	d10b      	bne.n	800270e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80026f6:	4b89      	ldr	r3, [pc, #548]	; (800291c <HAL_RCC_OscConfig+0x26c>)
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d06c      	beq.n	80027dc <HAL_RCC_OscConfig+0x12c>
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	685b      	ldr	r3, [r3, #4]
 8002706:	2b00      	cmp	r3, #0
 8002708:	d168      	bne.n	80027dc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800270a:	2301      	movs	r3, #1
 800270c:	e24c      	b.n	8002ba8 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	685b      	ldr	r3, [r3, #4]
 8002712:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002716:	d106      	bne.n	8002726 <HAL_RCC_OscConfig+0x76>
 8002718:	4b80      	ldr	r3, [pc, #512]	; (800291c <HAL_RCC_OscConfig+0x26c>)
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	4a7f      	ldr	r2, [pc, #508]	; (800291c <HAL_RCC_OscConfig+0x26c>)
 800271e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002722:	6013      	str	r3, [r2, #0]
 8002724:	e02e      	b.n	8002784 <HAL_RCC_OscConfig+0xd4>
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	685b      	ldr	r3, [r3, #4]
 800272a:	2b00      	cmp	r3, #0
 800272c:	d10c      	bne.n	8002748 <HAL_RCC_OscConfig+0x98>
 800272e:	4b7b      	ldr	r3, [pc, #492]	; (800291c <HAL_RCC_OscConfig+0x26c>)
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	4a7a      	ldr	r2, [pc, #488]	; (800291c <HAL_RCC_OscConfig+0x26c>)
 8002734:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002738:	6013      	str	r3, [r2, #0]
 800273a:	4b78      	ldr	r3, [pc, #480]	; (800291c <HAL_RCC_OscConfig+0x26c>)
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	4a77      	ldr	r2, [pc, #476]	; (800291c <HAL_RCC_OscConfig+0x26c>)
 8002740:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002744:	6013      	str	r3, [r2, #0]
 8002746:	e01d      	b.n	8002784 <HAL_RCC_OscConfig+0xd4>
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	685b      	ldr	r3, [r3, #4]
 800274c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002750:	d10c      	bne.n	800276c <HAL_RCC_OscConfig+0xbc>
 8002752:	4b72      	ldr	r3, [pc, #456]	; (800291c <HAL_RCC_OscConfig+0x26c>)
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	4a71      	ldr	r2, [pc, #452]	; (800291c <HAL_RCC_OscConfig+0x26c>)
 8002758:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800275c:	6013      	str	r3, [r2, #0]
 800275e:	4b6f      	ldr	r3, [pc, #444]	; (800291c <HAL_RCC_OscConfig+0x26c>)
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	4a6e      	ldr	r2, [pc, #440]	; (800291c <HAL_RCC_OscConfig+0x26c>)
 8002764:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002768:	6013      	str	r3, [r2, #0]
 800276a:	e00b      	b.n	8002784 <HAL_RCC_OscConfig+0xd4>
 800276c:	4b6b      	ldr	r3, [pc, #428]	; (800291c <HAL_RCC_OscConfig+0x26c>)
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	4a6a      	ldr	r2, [pc, #424]	; (800291c <HAL_RCC_OscConfig+0x26c>)
 8002772:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002776:	6013      	str	r3, [r2, #0]
 8002778:	4b68      	ldr	r3, [pc, #416]	; (800291c <HAL_RCC_OscConfig+0x26c>)
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	4a67      	ldr	r2, [pc, #412]	; (800291c <HAL_RCC_OscConfig+0x26c>)
 800277e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002782:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	685b      	ldr	r3, [r3, #4]
 8002788:	2b00      	cmp	r3, #0
 800278a:	d013      	beq.n	80027b4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800278c:	f7fe fe88 	bl	80014a0 <HAL_GetTick>
 8002790:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002792:	e008      	b.n	80027a6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002794:	f7fe fe84 	bl	80014a0 <HAL_GetTick>
 8002798:	4602      	mov	r2, r0
 800279a:	693b      	ldr	r3, [r7, #16]
 800279c:	1ad3      	subs	r3, r2, r3
 800279e:	2b64      	cmp	r3, #100	; 0x64
 80027a0:	d901      	bls.n	80027a6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80027a2:	2303      	movs	r3, #3
 80027a4:	e200      	b.n	8002ba8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027a6:	4b5d      	ldr	r3, [pc, #372]	; (800291c <HAL_RCC_OscConfig+0x26c>)
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d0f0      	beq.n	8002794 <HAL_RCC_OscConfig+0xe4>
 80027b2:	e014      	b.n	80027de <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027b4:	f7fe fe74 	bl	80014a0 <HAL_GetTick>
 80027b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80027ba:	e008      	b.n	80027ce <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80027bc:	f7fe fe70 	bl	80014a0 <HAL_GetTick>
 80027c0:	4602      	mov	r2, r0
 80027c2:	693b      	ldr	r3, [r7, #16]
 80027c4:	1ad3      	subs	r3, r2, r3
 80027c6:	2b64      	cmp	r3, #100	; 0x64
 80027c8:	d901      	bls.n	80027ce <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80027ca:	2303      	movs	r3, #3
 80027cc:	e1ec      	b.n	8002ba8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80027ce:	4b53      	ldr	r3, [pc, #332]	; (800291c <HAL_RCC_OscConfig+0x26c>)
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d1f0      	bne.n	80027bc <HAL_RCC_OscConfig+0x10c>
 80027da:	e000      	b.n	80027de <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80027dc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	f003 0302 	and.w	r3, r3, #2
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d063      	beq.n	80028b2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80027ea:	4b4c      	ldr	r3, [pc, #304]	; (800291c <HAL_RCC_OscConfig+0x26c>)
 80027ec:	685b      	ldr	r3, [r3, #4]
 80027ee:	f003 030c 	and.w	r3, r3, #12
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d00b      	beq.n	800280e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80027f6:	4b49      	ldr	r3, [pc, #292]	; (800291c <HAL_RCC_OscConfig+0x26c>)
 80027f8:	685b      	ldr	r3, [r3, #4]
 80027fa:	f003 030c 	and.w	r3, r3, #12
 80027fe:	2b08      	cmp	r3, #8
 8002800:	d11c      	bne.n	800283c <HAL_RCC_OscConfig+0x18c>
 8002802:	4b46      	ldr	r3, [pc, #280]	; (800291c <HAL_RCC_OscConfig+0x26c>)
 8002804:	685b      	ldr	r3, [r3, #4]
 8002806:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800280a:	2b00      	cmp	r3, #0
 800280c:	d116      	bne.n	800283c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800280e:	4b43      	ldr	r3, [pc, #268]	; (800291c <HAL_RCC_OscConfig+0x26c>)
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	f003 0302 	and.w	r3, r3, #2
 8002816:	2b00      	cmp	r3, #0
 8002818:	d005      	beq.n	8002826 <HAL_RCC_OscConfig+0x176>
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	691b      	ldr	r3, [r3, #16]
 800281e:	2b01      	cmp	r3, #1
 8002820:	d001      	beq.n	8002826 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002822:	2301      	movs	r3, #1
 8002824:	e1c0      	b.n	8002ba8 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002826:	4b3d      	ldr	r3, [pc, #244]	; (800291c <HAL_RCC_OscConfig+0x26c>)
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	695b      	ldr	r3, [r3, #20]
 8002832:	00db      	lsls	r3, r3, #3
 8002834:	4939      	ldr	r1, [pc, #228]	; (800291c <HAL_RCC_OscConfig+0x26c>)
 8002836:	4313      	orrs	r3, r2
 8002838:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800283a:	e03a      	b.n	80028b2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	691b      	ldr	r3, [r3, #16]
 8002840:	2b00      	cmp	r3, #0
 8002842:	d020      	beq.n	8002886 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002844:	4b36      	ldr	r3, [pc, #216]	; (8002920 <HAL_RCC_OscConfig+0x270>)
 8002846:	2201      	movs	r2, #1
 8002848:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800284a:	f7fe fe29 	bl	80014a0 <HAL_GetTick>
 800284e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002850:	e008      	b.n	8002864 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002852:	f7fe fe25 	bl	80014a0 <HAL_GetTick>
 8002856:	4602      	mov	r2, r0
 8002858:	693b      	ldr	r3, [r7, #16]
 800285a:	1ad3      	subs	r3, r2, r3
 800285c:	2b02      	cmp	r3, #2
 800285e:	d901      	bls.n	8002864 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002860:	2303      	movs	r3, #3
 8002862:	e1a1      	b.n	8002ba8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002864:	4b2d      	ldr	r3, [pc, #180]	; (800291c <HAL_RCC_OscConfig+0x26c>)
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	f003 0302 	and.w	r3, r3, #2
 800286c:	2b00      	cmp	r3, #0
 800286e:	d0f0      	beq.n	8002852 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002870:	4b2a      	ldr	r3, [pc, #168]	; (800291c <HAL_RCC_OscConfig+0x26c>)
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	695b      	ldr	r3, [r3, #20]
 800287c:	00db      	lsls	r3, r3, #3
 800287e:	4927      	ldr	r1, [pc, #156]	; (800291c <HAL_RCC_OscConfig+0x26c>)
 8002880:	4313      	orrs	r3, r2
 8002882:	600b      	str	r3, [r1, #0]
 8002884:	e015      	b.n	80028b2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002886:	4b26      	ldr	r3, [pc, #152]	; (8002920 <HAL_RCC_OscConfig+0x270>)
 8002888:	2200      	movs	r2, #0
 800288a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800288c:	f7fe fe08 	bl	80014a0 <HAL_GetTick>
 8002890:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002892:	e008      	b.n	80028a6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002894:	f7fe fe04 	bl	80014a0 <HAL_GetTick>
 8002898:	4602      	mov	r2, r0
 800289a:	693b      	ldr	r3, [r7, #16]
 800289c:	1ad3      	subs	r3, r2, r3
 800289e:	2b02      	cmp	r3, #2
 80028a0:	d901      	bls.n	80028a6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80028a2:	2303      	movs	r3, #3
 80028a4:	e180      	b.n	8002ba8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80028a6:	4b1d      	ldr	r3, [pc, #116]	; (800291c <HAL_RCC_OscConfig+0x26c>)
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	f003 0302 	and.w	r3, r3, #2
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d1f0      	bne.n	8002894 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	f003 0308 	and.w	r3, r3, #8
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d03a      	beq.n	8002934 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	699b      	ldr	r3, [r3, #24]
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d019      	beq.n	80028fa <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80028c6:	4b17      	ldr	r3, [pc, #92]	; (8002924 <HAL_RCC_OscConfig+0x274>)
 80028c8:	2201      	movs	r2, #1
 80028ca:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80028cc:	f7fe fde8 	bl	80014a0 <HAL_GetTick>
 80028d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80028d2:	e008      	b.n	80028e6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80028d4:	f7fe fde4 	bl	80014a0 <HAL_GetTick>
 80028d8:	4602      	mov	r2, r0
 80028da:	693b      	ldr	r3, [r7, #16]
 80028dc:	1ad3      	subs	r3, r2, r3
 80028de:	2b02      	cmp	r3, #2
 80028e0:	d901      	bls.n	80028e6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80028e2:	2303      	movs	r3, #3
 80028e4:	e160      	b.n	8002ba8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80028e6:	4b0d      	ldr	r3, [pc, #52]	; (800291c <HAL_RCC_OscConfig+0x26c>)
 80028e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028ea:	f003 0302 	and.w	r3, r3, #2
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d0f0      	beq.n	80028d4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80028f2:	2001      	movs	r0, #1
 80028f4:	f000 faa6 	bl	8002e44 <RCC_Delay>
 80028f8:	e01c      	b.n	8002934 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80028fa:	4b0a      	ldr	r3, [pc, #40]	; (8002924 <HAL_RCC_OscConfig+0x274>)
 80028fc:	2200      	movs	r2, #0
 80028fe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002900:	f7fe fdce 	bl	80014a0 <HAL_GetTick>
 8002904:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002906:	e00f      	b.n	8002928 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002908:	f7fe fdca 	bl	80014a0 <HAL_GetTick>
 800290c:	4602      	mov	r2, r0
 800290e:	693b      	ldr	r3, [r7, #16]
 8002910:	1ad3      	subs	r3, r2, r3
 8002912:	2b02      	cmp	r3, #2
 8002914:	d908      	bls.n	8002928 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002916:	2303      	movs	r3, #3
 8002918:	e146      	b.n	8002ba8 <HAL_RCC_OscConfig+0x4f8>
 800291a:	bf00      	nop
 800291c:	40021000 	.word	0x40021000
 8002920:	42420000 	.word	0x42420000
 8002924:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002928:	4b92      	ldr	r3, [pc, #584]	; (8002b74 <HAL_RCC_OscConfig+0x4c4>)
 800292a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800292c:	f003 0302 	and.w	r3, r3, #2
 8002930:	2b00      	cmp	r3, #0
 8002932:	d1e9      	bne.n	8002908 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	f003 0304 	and.w	r3, r3, #4
 800293c:	2b00      	cmp	r3, #0
 800293e:	f000 80a6 	beq.w	8002a8e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002942:	2300      	movs	r3, #0
 8002944:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002946:	4b8b      	ldr	r3, [pc, #556]	; (8002b74 <HAL_RCC_OscConfig+0x4c4>)
 8002948:	69db      	ldr	r3, [r3, #28]
 800294a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800294e:	2b00      	cmp	r3, #0
 8002950:	d10d      	bne.n	800296e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002952:	4b88      	ldr	r3, [pc, #544]	; (8002b74 <HAL_RCC_OscConfig+0x4c4>)
 8002954:	69db      	ldr	r3, [r3, #28]
 8002956:	4a87      	ldr	r2, [pc, #540]	; (8002b74 <HAL_RCC_OscConfig+0x4c4>)
 8002958:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800295c:	61d3      	str	r3, [r2, #28]
 800295e:	4b85      	ldr	r3, [pc, #532]	; (8002b74 <HAL_RCC_OscConfig+0x4c4>)
 8002960:	69db      	ldr	r3, [r3, #28]
 8002962:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002966:	60bb      	str	r3, [r7, #8]
 8002968:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800296a:	2301      	movs	r3, #1
 800296c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800296e:	4b82      	ldr	r3, [pc, #520]	; (8002b78 <HAL_RCC_OscConfig+0x4c8>)
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002976:	2b00      	cmp	r3, #0
 8002978:	d118      	bne.n	80029ac <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800297a:	4b7f      	ldr	r3, [pc, #508]	; (8002b78 <HAL_RCC_OscConfig+0x4c8>)
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	4a7e      	ldr	r2, [pc, #504]	; (8002b78 <HAL_RCC_OscConfig+0x4c8>)
 8002980:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002984:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002986:	f7fe fd8b 	bl	80014a0 <HAL_GetTick>
 800298a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800298c:	e008      	b.n	80029a0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800298e:	f7fe fd87 	bl	80014a0 <HAL_GetTick>
 8002992:	4602      	mov	r2, r0
 8002994:	693b      	ldr	r3, [r7, #16]
 8002996:	1ad3      	subs	r3, r2, r3
 8002998:	2b64      	cmp	r3, #100	; 0x64
 800299a:	d901      	bls.n	80029a0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800299c:	2303      	movs	r3, #3
 800299e:	e103      	b.n	8002ba8 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029a0:	4b75      	ldr	r3, [pc, #468]	; (8002b78 <HAL_RCC_OscConfig+0x4c8>)
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d0f0      	beq.n	800298e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	68db      	ldr	r3, [r3, #12]
 80029b0:	2b01      	cmp	r3, #1
 80029b2:	d106      	bne.n	80029c2 <HAL_RCC_OscConfig+0x312>
 80029b4:	4b6f      	ldr	r3, [pc, #444]	; (8002b74 <HAL_RCC_OscConfig+0x4c4>)
 80029b6:	6a1b      	ldr	r3, [r3, #32]
 80029b8:	4a6e      	ldr	r2, [pc, #440]	; (8002b74 <HAL_RCC_OscConfig+0x4c4>)
 80029ba:	f043 0301 	orr.w	r3, r3, #1
 80029be:	6213      	str	r3, [r2, #32]
 80029c0:	e02d      	b.n	8002a1e <HAL_RCC_OscConfig+0x36e>
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	68db      	ldr	r3, [r3, #12]
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d10c      	bne.n	80029e4 <HAL_RCC_OscConfig+0x334>
 80029ca:	4b6a      	ldr	r3, [pc, #424]	; (8002b74 <HAL_RCC_OscConfig+0x4c4>)
 80029cc:	6a1b      	ldr	r3, [r3, #32]
 80029ce:	4a69      	ldr	r2, [pc, #420]	; (8002b74 <HAL_RCC_OscConfig+0x4c4>)
 80029d0:	f023 0301 	bic.w	r3, r3, #1
 80029d4:	6213      	str	r3, [r2, #32]
 80029d6:	4b67      	ldr	r3, [pc, #412]	; (8002b74 <HAL_RCC_OscConfig+0x4c4>)
 80029d8:	6a1b      	ldr	r3, [r3, #32]
 80029da:	4a66      	ldr	r2, [pc, #408]	; (8002b74 <HAL_RCC_OscConfig+0x4c4>)
 80029dc:	f023 0304 	bic.w	r3, r3, #4
 80029e0:	6213      	str	r3, [r2, #32]
 80029e2:	e01c      	b.n	8002a1e <HAL_RCC_OscConfig+0x36e>
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	68db      	ldr	r3, [r3, #12]
 80029e8:	2b05      	cmp	r3, #5
 80029ea:	d10c      	bne.n	8002a06 <HAL_RCC_OscConfig+0x356>
 80029ec:	4b61      	ldr	r3, [pc, #388]	; (8002b74 <HAL_RCC_OscConfig+0x4c4>)
 80029ee:	6a1b      	ldr	r3, [r3, #32]
 80029f0:	4a60      	ldr	r2, [pc, #384]	; (8002b74 <HAL_RCC_OscConfig+0x4c4>)
 80029f2:	f043 0304 	orr.w	r3, r3, #4
 80029f6:	6213      	str	r3, [r2, #32]
 80029f8:	4b5e      	ldr	r3, [pc, #376]	; (8002b74 <HAL_RCC_OscConfig+0x4c4>)
 80029fa:	6a1b      	ldr	r3, [r3, #32]
 80029fc:	4a5d      	ldr	r2, [pc, #372]	; (8002b74 <HAL_RCC_OscConfig+0x4c4>)
 80029fe:	f043 0301 	orr.w	r3, r3, #1
 8002a02:	6213      	str	r3, [r2, #32]
 8002a04:	e00b      	b.n	8002a1e <HAL_RCC_OscConfig+0x36e>
 8002a06:	4b5b      	ldr	r3, [pc, #364]	; (8002b74 <HAL_RCC_OscConfig+0x4c4>)
 8002a08:	6a1b      	ldr	r3, [r3, #32]
 8002a0a:	4a5a      	ldr	r2, [pc, #360]	; (8002b74 <HAL_RCC_OscConfig+0x4c4>)
 8002a0c:	f023 0301 	bic.w	r3, r3, #1
 8002a10:	6213      	str	r3, [r2, #32]
 8002a12:	4b58      	ldr	r3, [pc, #352]	; (8002b74 <HAL_RCC_OscConfig+0x4c4>)
 8002a14:	6a1b      	ldr	r3, [r3, #32]
 8002a16:	4a57      	ldr	r2, [pc, #348]	; (8002b74 <HAL_RCC_OscConfig+0x4c4>)
 8002a18:	f023 0304 	bic.w	r3, r3, #4
 8002a1c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	68db      	ldr	r3, [r3, #12]
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d015      	beq.n	8002a52 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a26:	f7fe fd3b 	bl	80014a0 <HAL_GetTick>
 8002a2a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a2c:	e00a      	b.n	8002a44 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a2e:	f7fe fd37 	bl	80014a0 <HAL_GetTick>
 8002a32:	4602      	mov	r2, r0
 8002a34:	693b      	ldr	r3, [r7, #16]
 8002a36:	1ad3      	subs	r3, r2, r3
 8002a38:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a3c:	4293      	cmp	r3, r2
 8002a3e:	d901      	bls.n	8002a44 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002a40:	2303      	movs	r3, #3
 8002a42:	e0b1      	b.n	8002ba8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a44:	4b4b      	ldr	r3, [pc, #300]	; (8002b74 <HAL_RCC_OscConfig+0x4c4>)
 8002a46:	6a1b      	ldr	r3, [r3, #32]
 8002a48:	f003 0302 	and.w	r3, r3, #2
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d0ee      	beq.n	8002a2e <HAL_RCC_OscConfig+0x37e>
 8002a50:	e014      	b.n	8002a7c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a52:	f7fe fd25 	bl	80014a0 <HAL_GetTick>
 8002a56:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a58:	e00a      	b.n	8002a70 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a5a:	f7fe fd21 	bl	80014a0 <HAL_GetTick>
 8002a5e:	4602      	mov	r2, r0
 8002a60:	693b      	ldr	r3, [r7, #16]
 8002a62:	1ad3      	subs	r3, r2, r3
 8002a64:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a68:	4293      	cmp	r3, r2
 8002a6a:	d901      	bls.n	8002a70 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002a6c:	2303      	movs	r3, #3
 8002a6e:	e09b      	b.n	8002ba8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a70:	4b40      	ldr	r3, [pc, #256]	; (8002b74 <HAL_RCC_OscConfig+0x4c4>)
 8002a72:	6a1b      	ldr	r3, [r3, #32]
 8002a74:	f003 0302 	and.w	r3, r3, #2
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d1ee      	bne.n	8002a5a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002a7c:	7dfb      	ldrb	r3, [r7, #23]
 8002a7e:	2b01      	cmp	r3, #1
 8002a80:	d105      	bne.n	8002a8e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002a82:	4b3c      	ldr	r3, [pc, #240]	; (8002b74 <HAL_RCC_OscConfig+0x4c4>)
 8002a84:	69db      	ldr	r3, [r3, #28]
 8002a86:	4a3b      	ldr	r2, [pc, #236]	; (8002b74 <HAL_RCC_OscConfig+0x4c4>)
 8002a88:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002a8c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	69db      	ldr	r3, [r3, #28]
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	f000 8087 	beq.w	8002ba6 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002a98:	4b36      	ldr	r3, [pc, #216]	; (8002b74 <HAL_RCC_OscConfig+0x4c4>)
 8002a9a:	685b      	ldr	r3, [r3, #4]
 8002a9c:	f003 030c 	and.w	r3, r3, #12
 8002aa0:	2b08      	cmp	r3, #8
 8002aa2:	d061      	beq.n	8002b68 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	69db      	ldr	r3, [r3, #28]
 8002aa8:	2b02      	cmp	r3, #2
 8002aaa:	d146      	bne.n	8002b3a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002aac:	4b33      	ldr	r3, [pc, #204]	; (8002b7c <HAL_RCC_OscConfig+0x4cc>)
 8002aae:	2200      	movs	r2, #0
 8002ab0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ab2:	f7fe fcf5 	bl	80014a0 <HAL_GetTick>
 8002ab6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002ab8:	e008      	b.n	8002acc <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002aba:	f7fe fcf1 	bl	80014a0 <HAL_GetTick>
 8002abe:	4602      	mov	r2, r0
 8002ac0:	693b      	ldr	r3, [r7, #16]
 8002ac2:	1ad3      	subs	r3, r2, r3
 8002ac4:	2b02      	cmp	r3, #2
 8002ac6:	d901      	bls.n	8002acc <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002ac8:	2303      	movs	r3, #3
 8002aca:	e06d      	b.n	8002ba8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002acc:	4b29      	ldr	r3, [pc, #164]	; (8002b74 <HAL_RCC_OscConfig+0x4c4>)
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d1f0      	bne.n	8002aba <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	6a1b      	ldr	r3, [r3, #32]
 8002adc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ae0:	d108      	bne.n	8002af4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002ae2:	4b24      	ldr	r3, [pc, #144]	; (8002b74 <HAL_RCC_OscConfig+0x4c4>)
 8002ae4:	685b      	ldr	r3, [r3, #4]
 8002ae6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	689b      	ldr	r3, [r3, #8]
 8002aee:	4921      	ldr	r1, [pc, #132]	; (8002b74 <HAL_RCC_OscConfig+0x4c4>)
 8002af0:	4313      	orrs	r3, r2
 8002af2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002af4:	4b1f      	ldr	r3, [pc, #124]	; (8002b74 <HAL_RCC_OscConfig+0x4c4>)
 8002af6:	685b      	ldr	r3, [r3, #4]
 8002af8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	6a19      	ldr	r1, [r3, #32]
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b04:	430b      	orrs	r3, r1
 8002b06:	491b      	ldr	r1, [pc, #108]	; (8002b74 <HAL_RCC_OscConfig+0x4c4>)
 8002b08:	4313      	orrs	r3, r2
 8002b0a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002b0c:	4b1b      	ldr	r3, [pc, #108]	; (8002b7c <HAL_RCC_OscConfig+0x4cc>)
 8002b0e:	2201      	movs	r2, #1
 8002b10:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b12:	f7fe fcc5 	bl	80014a0 <HAL_GetTick>
 8002b16:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002b18:	e008      	b.n	8002b2c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b1a:	f7fe fcc1 	bl	80014a0 <HAL_GetTick>
 8002b1e:	4602      	mov	r2, r0
 8002b20:	693b      	ldr	r3, [r7, #16]
 8002b22:	1ad3      	subs	r3, r2, r3
 8002b24:	2b02      	cmp	r3, #2
 8002b26:	d901      	bls.n	8002b2c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002b28:	2303      	movs	r3, #3
 8002b2a:	e03d      	b.n	8002ba8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002b2c:	4b11      	ldr	r3, [pc, #68]	; (8002b74 <HAL_RCC_OscConfig+0x4c4>)
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d0f0      	beq.n	8002b1a <HAL_RCC_OscConfig+0x46a>
 8002b38:	e035      	b.n	8002ba6 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b3a:	4b10      	ldr	r3, [pc, #64]	; (8002b7c <HAL_RCC_OscConfig+0x4cc>)
 8002b3c:	2200      	movs	r2, #0
 8002b3e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b40:	f7fe fcae 	bl	80014a0 <HAL_GetTick>
 8002b44:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002b46:	e008      	b.n	8002b5a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b48:	f7fe fcaa 	bl	80014a0 <HAL_GetTick>
 8002b4c:	4602      	mov	r2, r0
 8002b4e:	693b      	ldr	r3, [r7, #16]
 8002b50:	1ad3      	subs	r3, r2, r3
 8002b52:	2b02      	cmp	r3, #2
 8002b54:	d901      	bls.n	8002b5a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002b56:	2303      	movs	r3, #3
 8002b58:	e026      	b.n	8002ba8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002b5a:	4b06      	ldr	r3, [pc, #24]	; (8002b74 <HAL_RCC_OscConfig+0x4c4>)
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d1f0      	bne.n	8002b48 <HAL_RCC_OscConfig+0x498>
 8002b66:	e01e      	b.n	8002ba6 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	69db      	ldr	r3, [r3, #28]
 8002b6c:	2b01      	cmp	r3, #1
 8002b6e:	d107      	bne.n	8002b80 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002b70:	2301      	movs	r3, #1
 8002b72:	e019      	b.n	8002ba8 <HAL_RCC_OscConfig+0x4f8>
 8002b74:	40021000 	.word	0x40021000
 8002b78:	40007000 	.word	0x40007000
 8002b7c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002b80:	4b0b      	ldr	r3, [pc, #44]	; (8002bb0 <HAL_RCC_OscConfig+0x500>)
 8002b82:	685b      	ldr	r3, [r3, #4]
 8002b84:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	6a1b      	ldr	r3, [r3, #32]
 8002b90:	429a      	cmp	r2, r3
 8002b92:	d106      	bne.n	8002ba2 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b9e:	429a      	cmp	r2, r3
 8002ba0:	d001      	beq.n	8002ba6 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002ba2:	2301      	movs	r3, #1
 8002ba4:	e000      	b.n	8002ba8 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002ba6:	2300      	movs	r3, #0
}
 8002ba8:	4618      	mov	r0, r3
 8002baa:	3718      	adds	r7, #24
 8002bac:	46bd      	mov	sp, r7
 8002bae:	bd80      	pop	{r7, pc}
 8002bb0:	40021000 	.word	0x40021000

08002bb4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002bb4:	b580      	push	{r7, lr}
 8002bb6:	b084      	sub	sp, #16
 8002bb8:	af00      	add	r7, sp, #0
 8002bba:	6078      	str	r0, [r7, #4]
 8002bbc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d101      	bne.n	8002bc8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002bc4:	2301      	movs	r3, #1
 8002bc6:	e0d0      	b.n	8002d6a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002bc8:	4b6a      	ldr	r3, [pc, #424]	; (8002d74 <HAL_RCC_ClockConfig+0x1c0>)
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	f003 0307 	and.w	r3, r3, #7
 8002bd0:	683a      	ldr	r2, [r7, #0]
 8002bd2:	429a      	cmp	r2, r3
 8002bd4:	d910      	bls.n	8002bf8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002bd6:	4b67      	ldr	r3, [pc, #412]	; (8002d74 <HAL_RCC_ClockConfig+0x1c0>)
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	f023 0207 	bic.w	r2, r3, #7
 8002bde:	4965      	ldr	r1, [pc, #404]	; (8002d74 <HAL_RCC_ClockConfig+0x1c0>)
 8002be0:	683b      	ldr	r3, [r7, #0]
 8002be2:	4313      	orrs	r3, r2
 8002be4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002be6:	4b63      	ldr	r3, [pc, #396]	; (8002d74 <HAL_RCC_ClockConfig+0x1c0>)
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	f003 0307 	and.w	r3, r3, #7
 8002bee:	683a      	ldr	r2, [r7, #0]
 8002bf0:	429a      	cmp	r2, r3
 8002bf2:	d001      	beq.n	8002bf8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002bf4:	2301      	movs	r3, #1
 8002bf6:	e0b8      	b.n	8002d6a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	f003 0302 	and.w	r3, r3, #2
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d020      	beq.n	8002c46 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	f003 0304 	and.w	r3, r3, #4
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d005      	beq.n	8002c1c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002c10:	4b59      	ldr	r3, [pc, #356]	; (8002d78 <HAL_RCC_ClockConfig+0x1c4>)
 8002c12:	685b      	ldr	r3, [r3, #4]
 8002c14:	4a58      	ldr	r2, [pc, #352]	; (8002d78 <HAL_RCC_ClockConfig+0x1c4>)
 8002c16:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002c1a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	f003 0308 	and.w	r3, r3, #8
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d005      	beq.n	8002c34 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002c28:	4b53      	ldr	r3, [pc, #332]	; (8002d78 <HAL_RCC_ClockConfig+0x1c4>)
 8002c2a:	685b      	ldr	r3, [r3, #4]
 8002c2c:	4a52      	ldr	r2, [pc, #328]	; (8002d78 <HAL_RCC_ClockConfig+0x1c4>)
 8002c2e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002c32:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002c34:	4b50      	ldr	r3, [pc, #320]	; (8002d78 <HAL_RCC_ClockConfig+0x1c4>)
 8002c36:	685b      	ldr	r3, [r3, #4]
 8002c38:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	689b      	ldr	r3, [r3, #8]
 8002c40:	494d      	ldr	r1, [pc, #308]	; (8002d78 <HAL_RCC_ClockConfig+0x1c4>)
 8002c42:	4313      	orrs	r3, r2
 8002c44:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	f003 0301 	and.w	r3, r3, #1
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d040      	beq.n	8002cd4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	685b      	ldr	r3, [r3, #4]
 8002c56:	2b01      	cmp	r3, #1
 8002c58:	d107      	bne.n	8002c6a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c5a:	4b47      	ldr	r3, [pc, #284]	; (8002d78 <HAL_RCC_ClockConfig+0x1c4>)
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d115      	bne.n	8002c92 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c66:	2301      	movs	r3, #1
 8002c68:	e07f      	b.n	8002d6a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	685b      	ldr	r3, [r3, #4]
 8002c6e:	2b02      	cmp	r3, #2
 8002c70:	d107      	bne.n	8002c82 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c72:	4b41      	ldr	r3, [pc, #260]	; (8002d78 <HAL_RCC_ClockConfig+0x1c4>)
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d109      	bne.n	8002c92 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c7e:	2301      	movs	r3, #1
 8002c80:	e073      	b.n	8002d6a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c82:	4b3d      	ldr	r3, [pc, #244]	; (8002d78 <HAL_RCC_ClockConfig+0x1c4>)
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	f003 0302 	and.w	r3, r3, #2
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d101      	bne.n	8002c92 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c8e:	2301      	movs	r3, #1
 8002c90:	e06b      	b.n	8002d6a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002c92:	4b39      	ldr	r3, [pc, #228]	; (8002d78 <HAL_RCC_ClockConfig+0x1c4>)
 8002c94:	685b      	ldr	r3, [r3, #4]
 8002c96:	f023 0203 	bic.w	r2, r3, #3
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	685b      	ldr	r3, [r3, #4]
 8002c9e:	4936      	ldr	r1, [pc, #216]	; (8002d78 <HAL_RCC_ClockConfig+0x1c4>)
 8002ca0:	4313      	orrs	r3, r2
 8002ca2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002ca4:	f7fe fbfc 	bl	80014a0 <HAL_GetTick>
 8002ca8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002caa:	e00a      	b.n	8002cc2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002cac:	f7fe fbf8 	bl	80014a0 <HAL_GetTick>
 8002cb0:	4602      	mov	r2, r0
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	1ad3      	subs	r3, r2, r3
 8002cb6:	f241 3288 	movw	r2, #5000	; 0x1388
 8002cba:	4293      	cmp	r3, r2
 8002cbc:	d901      	bls.n	8002cc2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002cbe:	2303      	movs	r3, #3
 8002cc0:	e053      	b.n	8002d6a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002cc2:	4b2d      	ldr	r3, [pc, #180]	; (8002d78 <HAL_RCC_ClockConfig+0x1c4>)
 8002cc4:	685b      	ldr	r3, [r3, #4]
 8002cc6:	f003 020c 	and.w	r2, r3, #12
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	685b      	ldr	r3, [r3, #4]
 8002cce:	009b      	lsls	r3, r3, #2
 8002cd0:	429a      	cmp	r2, r3
 8002cd2:	d1eb      	bne.n	8002cac <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002cd4:	4b27      	ldr	r3, [pc, #156]	; (8002d74 <HAL_RCC_ClockConfig+0x1c0>)
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	f003 0307 	and.w	r3, r3, #7
 8002cdc:	683a      	ldr	r2, [r7, #0]
 8002cde:	429a      	cmp	r2, r3
 8002ce0:	d210      	bcs.n	8002d04 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ce2:	4b24      	ldr	r3, [pc, #144]	; (8002d74 <HAL_RCC_ClockConfig+0x1c0>)
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	f023 0207 	bic.w	r2, r3, #7
 8002cea:	4922      	ldr	r1, [pc, #136]	; (8002d74 <HAL_RCC_ClockConfig+0x1c0>)
 8002cec:	683b      	ldr	r3, [r7, #0]
 8002cee:	4313      	orrs	r3, r2
 8002cf0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002cf2:	4b20      	ldr	r3, [pc, #128]	; (8002d74 <HAL_RCC_ClockConfig+0x1c0>)
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	f003 0307 	and.w	r3, r3, #7
 8002cfa:	683a      	ldr	r2, [r7, #0]
 8002cfc:	429a      	cmp	r2, r3
 8002cfe:	d001      	beq.n	8002d04 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002d00:	2301      	movs	r3, #1
 8002d02:	e032      	b.n	8002d6a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	f003 0304 	and.w	r3, r3, #4
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d008      	beq.n	8002d22 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002d10:	4b19      	ldr	r3, [pc, #100]	; (8002d78 <HAL_RCC_ClockConfig+0x1c4>)
 8002d12:	685b      	ldr	r3, [r3, #4]
 8002d14:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	68db      	ldr	r3, [r3, #12]
 8002d1c:	4916      	ldr	r1, [pc, #88]	; (8002d78 <HAL_RCC_ClockConfig+0x1c4>)
 8002d1e:	4313      	orrs	r3, r2
 8002d20:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	f003 0308 	and.w	r3, r3, #8
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d009      	beq.n	8002d42 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002d2e:	4b12      	ldr	r3, [pc, #72]	; (8002d78 <HAL_RCC_ClockConfig+0x1c4>)
 8002d30:	685b      	ldr	r3, [r3, #4]
 8002d32:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	691b      	ldr	r3, [r3, #16]
 8002d3a:	00db      	lsls	r3, r3, #3
 8002d3c:	490e      	ldr	r1, [pc, #56]	; (8002d78 <HAL_RCC_ClockConfig+0x1c4>)
 8002d3e:	4313      	orrs	r3, r2
 8002d40:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002d42:	f000 f821 	bl	8002d88 <HAL_RCC_GetSysClockFreq>
 8002d46:	4602      	mov	r2, r0
 8002d48:	4b0b      	ldr	r3, [pc, #44]	; (8002d78 <HAL_RCC_ClockConfig+0x1c4>)
 8002d4a:	685b      	ldr	r3, [r3, #4]
 8002d4c:	091b      	lsrs	r3, r3, #4
 8002d4e:	f003 030f 	and.w	r3, r3, #15
 8002d52:	490a      	ldr	r1, [pc, #40]	; (8002d7c <HAL_RCC_ClockConfig+0x1c8>)
 8002d54:	5ccb      	ldrb	r3, [r1, r3]
 8002d56:	fa22 f303 	lsr.w	r3, r2, r3
 8002d5a:	4a09      	ldr	r2, [pc, #36]	; (8002d80 <HAL_RCC_ClockConfig+0x1cc>)
 8002d5c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002d5e:	4b09      	ldr	r3, [pc, #36]	; (8002d84 <HAL_RCC_ClockConfig+0x1d0>)
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	4618      	mov	r0, r3
 8002d64:	f7fe fb5a 	bl	800141c <HAL_InitTick>

  return HAL_OK;
 8002d68:	2300      	movs	r3, #0
}
 8002d6a:	4618      	mov	r0, r3
 8002d6c:	3710      	adds	r7, #16
 8002d6e:	46bd      	mov	sp, r7
 8002d70:	bd80      	pop	{r7, pc}
 8002d72:	bf00      	nop
 8002d74:	40022000 	.word	0x40022000
 8002d78:	40021000 	.word	0x40021000
 8002d7c:	08003dac 	.word	0x08003dac
 8002d80:	20000000 	.word	0x20000000
 8002d84:	20000004 	.word	0x20000004

08002d88 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002d88:	b490      	push	{r4, r7}
 8002d8a:	b08a      	sub	sp, #40	; 0x28
 8002d8c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002d8e:	4b29      	ldr	r3, [pc, #164]	; (8002e34 <HAL_RCC_GetSysClockFreq+0xac>)
 8002d90:	1d3c      	adds	r4, r7, #4
 8002d92:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002d94:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002d98:	f240 2301 	movw	r3, #513	; 0x201
 8002d9c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002d9e:	2300      	movs	r3, #0
 8002da0:	61fb      	str	r3, [r7, #28]
 8002da2:	2300      	movs	r3, #0
 8002da4:	61bb      	str	r3, [r7, #24]
 8002da6:	2300      	movs	r3, #0
 8002da8:	627b      	str	r3, [r7, #36]	; 0x24
 8002daa:	2300      	movs	r3, #0
 8002dac:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002dae:	2300      	movs	r3, #0
 8002db0:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002db2:	4b21      	ldr	r3, [pc, #132]	; (8002e38 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002db4:	685b      	ldr	r3, [r3, #4]
 8002db6:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002db8:	69fb      	ldr	r3, [r7, #28]
 8002dba:	f003 030c 	and.w	r3, r3, #12
 8002dbe:	2b04      	cmp	r3, #4
 8002dc0:	d002      	beq.n	8002dc8 <HAL_RCC_GetSysClockFreq+0x40>
 8002dc2:	2b08      	cmp	r3, #8
 8002dc4:	d003      	beq.n	8002dce <HAL_RCC_GetSysClockFreq+0x46>
 8002dc6:	e02b      	b.n	8002e20 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002dc8:	4b1c      	ldr	r3, [pc, #112]	; (8002e3c <HAL_RCC_GetSysClockFreq+0xb4>)
 8002dca:	623b      	str	r3, [r7, #32]
      break;
 8002dcc:	e02b      	b.n	8002e26 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002dce:	69fb      	ldr	r3, [r7, #28]
 8002dd0:	0c9b      	lsrs	r3, r3, #18
 8002dd2:	f003 030f 	and.w	r3, r3, #15
 8002dd6:	3328      	adds	r3, #40	; 0x28
 8002dd8:	443b      	add	r3, r7
 8002dda:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002dde:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002de0:	69fb      	ldr	r3, [r7, #28]
 8002de2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d012      	beq.n	8002e10 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002dea:	4b13      	ldr	r3, [pc, #76]	; (8002e38 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002dec:	685b      	ldr	r3, [r3, #4]
 8002dee:	0c5b      	lsrs	r3, r3, #17
 8002df0:	f003 0301 	and.w	r3, r3, #1
 8002df4:	3328      	adds	r3, #40	; 0x28
 8002df6:	443b      	add	r3, r7
 8002df8:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002dfc:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002dfe:	697b      	ldr	r3, [r7, #20]
 8002e00:	4a0e      	ldr	r2, [pc, #56]	; (8002e3c <HAL_RCC_GetSysClockFreq+0xb4>)
 8002e02:	fb03 f202 	mul.w	r2, r3, r2
 8002e06:	69bb      	ldr	r3, [r7, #24]
 8002e08:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e0c:	627b      	str	r3, [r7, #36]	; 0x24
 8002e0e:	e004      	b.n	8002e1a <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002e10:	697b      	ldr	r3, [r7, #20]
 8002e12:	4a0b      	ldr	r2, [pc, #44]	; (8002e40 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002e14:	fb02 f303 	mul.w	r3, r2, r3
 8002e18:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002e1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e1c:	623b      	str	r3, [r7, #32]
      break;
 8002e1e:	e002      	b.n	8002e26 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002e20:	4b06      	ldr	r3, [pc, #24]	; (8002e3c <HAL_RCC_GetSysClockFreq+0xb4>)
 8002e22:	623b      	str	r3, [r7, #32]
      break;
 8002e24:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002e26:	6a3b      	ldr	r3, [r7, #32]
}
 8002e28:	4618      	mov	r0, r3
 8002e2a:	3728      	adds	r7, #40	; 0x28
 8002e2c:	46bd      	mov	sp, r7
 8002e2e:	bc90      	pop	{r4, r7}
 8002e30:	4770      	bx	lr
 8002e32:	bf00      	nop
 8002e34:	08003d9c 	.word	0x08003d9c
 8002e38:	40021000 	.word	0x40021000
 8002e3c:	007a1200 	.word	0x007a1200
 8002e40:	003d0900 	.word	0x003d0900

08002e44 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002e44:	b480      	push	{r7}
 8002e46:	b085      	sub	sp, #20
 8002e48:	af00      	add	r7, sp, #0
 8002e4a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002e4c:	4b0a      	ldr	r3, [pc, #40]	; (8002e78 <RCC_Delay+0x34>)
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	4a0a      	ldr	r2, [pc, #40]	; (8002e7c <RCC_Delay+0x38>)
 8002e52:	fba2 2303 	umull	r2, r3, r2, r3
 8002e56:	0a5b      	lsrs	r3, r3, #9
 8002e58:	687a      	ldr	r2, [r7, #4]
 8002e5a:	fb02 f303 	mul.w	r3, r2, r3
 8002e5e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002e60:	bf00      	nop
  }
  while (Delay --);
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	1e5a      	subs	r2, r3, #1
 8002e66:	60fa      	str	r2, [r7, #12]
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d1f9      	bne.n	8002e60 <RCC_Delay+0x1c>
}
 8002e6c:	bf00      	nop
 8002e6e:	bf00      	nop
 8002e70:	3714      	adds	r7, #20
 8002e72:	46bd      	mov	sp, r7
 8002e74:	bc80      	pop	{r7}
 8002e76:	4770      	bx	lr
 8002e78:	20000000 	.word	0x20000000
 8002e7c:	10624dd3 	.word	0x10624dd3

08002e80 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002e80:	b580      	push	{r7, lr}
 8002e82:	b082      	sub	sp, #8
 8002e84:	af00      	add	r7, sp, #0
 8002e86:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d101      	bne.n	8002e92 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002e8e:	2301      	movs	r3, #1
 8002e90:	e041      	b.n	8002f16 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e98:	b2db      	uxtb	r3, r3
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d106      	bne.n	8002eac <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	2200      	movs	r2, #0
 8002ea2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002ea6:	6878      	ldr	r0, [r7, #4]
 8002ea8:	f7fe f9dc 	bl	8001264 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	2202      	movs	r2, #2
 8002eb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681a      	ldr	r2, [r3, #0]
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	3304      	adds	r3, #4
 8002ebc:	4619      	mov	r1, r3
 8002ebe:	4610      	mov	r0, r2
 8002ec0:	f000 fc96 	bl	80037f0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	2201      	movs	r2, #1
 8002ec8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	2201      	movs	r2, #1
 8002ed0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	2201      	movs	r2, #1
 8002ed8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	2201      	movs	r2, #1
 8002ee0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	2201      	movs	r2, #1
 8002ee8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	2201      	movs	r2, #1
 8002ef0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	2201      	movs	r2, #1
 8002ef8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	2201      	movs	r2, #1
 8002f00:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	2201      	movs	r2, #1
 8002f08:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	2201      	movs	r2, #1
 8002f10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002f14:	2300      	movs	r3, #0
}
 8002f16:	4618      	mov	r0, r3
 8002f18:	3708      	adds	r7, #8
 8002f1a:	46bd      	mov	sp, r7
 8002f1c:	bd80      	pop	{r7, pc}
	...

08002f20 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002f20:	b480      	push	{r7}
 8002f22:	b085      	sub	sp, #20
 8002f24:	af00      	add	r7, sp, #0
 8002f26:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f2e:	b2db      	uxtb	r3, r3
 8002f30:	2b01      	cmp	r3, #1
 8002f32:	d001      	beq.n	8002f38 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002f34:	2301      	movs	r3, #1
 8002f36:	e03a      	b.n	8002fae <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	2202      	movs	r2, #2
 8002f3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	68da      	ldr	r2, [r3, #12]
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	f042 0201 	orr.w	r2, r2, #1
 8002f4e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	4a18      	ldr	r2, [pc, #96]	; (8002fb8 <HAL_TIM_Base_Start_IT+0x98>)
 8002f56:	4293      	cmp	r3, r2
 8002f58:	d00e      	beq.n	8002f78 <HAL_TIM_Base_Start_IT+0x58>
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f62:	d009      	beq.n	8002f78 <HAL_TIM_Base_Start_IT+0x58>
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	4a14      	ldr	r2, [pc, #80]	; (8002fbc <HAL_TIM_Base_Start_IT+0x9c>)
 8002f6a:	4293      	cmp	r3, r2
 8002f6c:	d004      	beq.n	8002f78 <HAL_TIM_Base_Start_IT+0x58>
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	4a13      	ldr	r2, [pc, #76]	; (8002fc0 <HAL_TIM_Base_Start_IT+0xa0>)
 8002f74:	4293      	cmp	r3, r2
 8002f76:	d111      	bne.n	8002f9c <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	689b      	ldr	r3, [r3, #8]
 8002f7e:	f003 0307 	and.w	r3, r3, #7
 8002f82:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	2b06      	cmp	r3, #6
 8002f88:	d010      	beq.n	8002fac <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	681a      	ldr	r2, [r3, #0]
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	f042 0201 	orr.w	r2, r2, #1
 8002f98:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f9a:	e007      	b.n	8002fac <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	681a      	ldr	r2, [r3, #0]
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	f042 0201 	orr.w	r2, r2, #1
 8002faa:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002fac:	2300      	movs	r3, #0
}
 8002fae:	4618      	mov	r0, r3
 8002fb0:	3714      	adds	r7, #20
 8002fb2:	46bd      	mov	sp, r7
 8002fb4:	bc80      	pop	{r7}
 8002fb6:	4770      	bx	lr
 8002fb8:	40012c00 	.word	0x40012c00
 8002fbc:	40000400 	.word	0x40000400
 8002fc0:	40000800 	.word	0x40000800

08002fc4 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8002fc4:	b580      	push	{r7, lr}
 8002fc6:	b082      	sub	sp, #8
 8002fc8:	af00      	add	r7, sp, #0
 8002fca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d101      	bne.n	8002fd6 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8002fd2:	2301      	movs	r3, #1
 8002fd4:	e041      	b.n	800305a <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002fdc:	b2db      	uxtb	r3, r3
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d106      	bne.n	8002ff0 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	2200      	movs	r2, #0
 8002fe6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8002fea:	6878      	ldr	r0, [r7, #4]
 8002fec:	f7fe f8f2 	bl	80011d4 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	2202      	movs	r2, #2
 8002ff4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681a      	ldr	r2, [r3, #0]
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	3304      	adds	r3, #4
 8003000:	4619      	mov	r1, r3
 8003002:	4610      	mov	r0, r2
 8003004:	f000 fbf4 	bl	80037f0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	2201      	movs	r2, #1
 800300c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	2201      	movs	r2, #1
 8003014:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	2201      	movs	r2, #1
 800301c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	2201      	movs	r2, #1
 8003024:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	2201      	movs	r2, #1
 800302c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	2201      	movs	r2, #1
 8003034:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	2201      	movs	r2, #1
 800303c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	2201      	movs	r2, #1
 8003044:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	2201      	movs	r2, #1
 800304c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	2201      	movs	r2, #1
 8003054:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003058:	2300      	movs	r3, #0
}
 800305a:	4618      	mov	r0, r3
 800305c:	3708      	adds	r7, #8
 800305e:	46bd      	mov	sp, r7
 8003060:	bd80      	pop	{r7, pc}
	...

08003064 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003064:	b580      	push	{r7, lr}
 8003066:	b084      	sub	sp, #16
 8003068:	af00      	add	r7, sp, #0
 800306a:	6078      	str	r0, [r7, #4]
 800306c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 800306e:	683b      	ldr	r3, [r7, #0]
 8003070:	2b00      	cmp	r3, #0
 8003072:	d104      	bne.n	800307e <HAL_TIM_IC_Start_IT+0x1a>
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800307a:	b2db      	uxtb	r3, r3
 800307c:	e013      	b.n	80030a6 <HAL_TIM_IC_Start_IT+0x42>
 800307e:	683b      	ldr	r3, [r7, #0]
 8003080:	2b04      	cmp	r3, #4
 8003082:	d104      	bne.n	800308e <HAL_TIM_IC_Start_IT+0x2a>
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800308a:	b2db      	uxtb	r3, r3
 800308c:	e00b      	b.n	80030a6 <HAL_TIM_IC_Start_IT+0x42>
 800308e:	683b      	ldr	r3, [r7, #0]
 8003090:	2b08      	cmp	r3, #8
 8003092:	d104      	bne.n	800309e <HAL_TIM_IC_Start_IT+0x3a>
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800309a:	b2db      	uxtb	r3, r3
 800309c:	e003      	b.n	80030a6 <HAL_TIM_IC_Start_IT+0x42>
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80030a4:	b2db      	uxtb	r3, r3
 80030a6:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 80030a8:	683b      	ldr	r3, [r7, #0]
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d104      	bne.n	80030b8 <HAL_TIM_IC_Start_IT+0x54>
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80030b4:	b2db      	uxtb	r3, r3
 80030b6:	e013      	b.n	80030e0 <HAL_TIM_IC_Start_IT+0x7c>
 80030b8:	683b      	ldr	r3, [r7, #0]
 80030ba:	2b04      	cmp	r3, #4
 80030bc:	d104      	bne.n	80030c8 <HAL_TIM_IC_Start_IT+0x64>
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80030c4:	b2db      	uxtb	r3, r3
 80030c6:	e00b      	b.n	80030e0 <HAL_TIM_IC_Start_IT+0x7c>
 80030c8:	683b      	ldr	r3, [r7, #0]
 80030ca:	2b08      	cmp	r3, #8
 80030cc:	d104      	bne.n	80030d8 <HAL_TIM_IC_Start_IT+0x74>
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80030d4:	b2db      	uxtb	r3, r3
 80030d6:	e003      	b.n	80030e0 <HAL_TIM_IC_Start_IT+0x7c>
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80030de:	b2db      	uxtb	r3, r3
 80030e0:	73bb      	strb	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 80030e2:	7bfb      	ldrb	r3, [r7, #15]
 80030e4:	2b01      	cmp	r3, #1
 80030e6:	d102      	bne.n	80030ee <HAL_TIM_IC_Start_IT+0x8a>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 80030e8:	7bbb      	ldrb	r3, [r7, #14]
 80030ea:	2b01      	cmp	r3, #1
 80030ec:	d001      	beq.n	80030f2 <HAL_TIM_IC_Start_IT+0x8e>
  {
    return HAL_ERROR;
 80030ee:	2301      	movs	r3, #1
 80030f0:	e0b3      	b.n	800325a <HAL_TIM_IC_Start_IT+0x1f6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80030f2:	683b      	ldr	r3, [r7, #0]
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d104      	bne.n	8003102 <HAL_TIM_IC_Start_IT+0x9e>
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	2202      	movs	r2, #2
 80030fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003100:	e013      	b.n	800312a <HAL_TIM_IC_Start_IT+0xc6>
 8003102:	683b      	ldr	r3, [r7, #0]
 8003104:	2b04      	cmp	r3, #4
 8003106:	d104      	bne.n	8003112 <HAL_TIM_IC_Start_IT+0xae>
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	2202      	movs	r2, #2
 800310c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003110:	e00b      	b.n	800312a <HAL_TIM_IC_Start_IT+0xc6>
 8003112:	683b      	ldr	r3, [r7, #0]
 8003114:	2b08      	cmp	r3, #8
 8003116:	d104      	bne.n	8003122 <HAL_TIM_IC_Start_IT+0xbe>
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	2202      	movs	r2, #2
 800311c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003120:	e003      	b.n	800312a <HAL_TIM_IC_Start_IT+0xc6>
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	2202      	movs	r2, #2
 8003126:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800312a:	683b      	ldr	r3, [r7, #0]
 800312c:	2b00      	cmp	r3, #0
 800312e:	d104      	bne.n	800313a <HAL_TIM_IC_Start_IT+0xd6>
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	2202      	movs	r2, #2
 8003134:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003138:	e013      	b.n	8003162 <HAL_TIM_IC_Start_IT+0xfe>
 800313a:	683b      	ldr	r3, [r7, #0]
 800313c:	2b04      	cmp	r3, #4
 800313e:	d104      	bne.n	800314a <HAL_TIM_IC_Start_IT+0xe6>
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	2202      	movs	r2, #2
 8003144:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003148:	e00b      	b.n	8003162 <HAL_TIM_IC_Start_IT+0xfe>
 800314a:	683b      	ldr	r3, [r7, #0]
 800314c:	2b08      	cmp	r3, #8
 800314e:	d104      	bne.n	800315a <HAL_TIM_IC_Start_IT+0xf6>
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	2202      	movs	r2, #2
 8003154:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003158:	e003      	b.n	8003162 <HAL_TIM_IC_Start_IT+0xfe>
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	2202      	movs	r2, #2
 800315e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  switch (Channel)
 8003162:	683b      	ldr	r3, [r7, #0]
 8003164:	2b0c      	cmp	r3, #12
 8003166:	d841      	bhi.n	80031ec <HAL_TIM_IC_Start_IT+0x188>
 8003168:	a201      	add	r2, pc, #4	; (adr r2, 8003170 <HAL_TIM_IC_Start_IT+0x10c>)
 800316a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800316e:	bf00      	nop
 8003170:	080031a5 	.word	0x080031a5
 8003174:	080031ed 	.word	0x080031ed
 8003178:	080031ed 	.word	0x080031ed
 800317c:	080031ed 	.word	0x080031ed
 8003180:	080031b7 	.word	0x080031b7
 8003184:	080031ed 	.word	0x080031ed
 8003188:	080031ed 	.word	0x080031ed
 800318c:	080031ed 	.word	0x080031ed
 8003190:	080031c9 	.word	0x080031c9
 8003194:	080031ed 	.word	0x080031ed
 8003198:	080031ed 	.word	0x080031ed
 800319c:	080031ed 	.word	0x080031ed
 80031a0:	080031db 	.word	0x080031db
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	68da      	ldr	r2, [r3, #12]
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	f042 0202 	orr.w	r2, r2, #2
 80031b2:	60da      	str	r2, [r3, #12]
      break;
 80031b4:	e01b      	b.n	80031ee <HAL_TIM_IC_Start_IT+0x18a>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	68da      	ldr	r2, [r3, #12]
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	f042 0204 	orr.w	r2, r2, #4
 80031c4:	60da      	str	r2, [r3, #12]
      break;
 80031c6:	e012      	b.n	80031ee <HAL_TIM_IC_Start_IT+0x18a>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	68da      	ldr	r2, [r3, #12]
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	f042 0208 	orr.w	r2, r2, #8
 80031d6:	60da      	str	r2, [r3, #12]
      break;
 80031d8:	e009      	b.n	80031ee <HAL_TIM_IC_Start_IT+0x18a>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	68da      	ldr	r2, [r3, #12]
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	f042 0210 	orr.w	r2, r2, #16
 80031e8:	60da      	str	r2, [r3, #12]
      break;
 80031ea:	e000      	b.n	80031ee <HAL_TIM_IC_Start_IT+0x18a>
    }

    default:
      break;
 80031ec:	bf00      	nop
  }
  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	2201      	movs	r2, #1
 80031f4:	6839      	ldr	r1, [r7, #0]
 80031f6:	4618      	mov	r0, r3
 80031f8:	f000 fcff 	bl	8003bfa <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	4a18      	ldr	r2, [pc, #96]	; (8003264 <HAL_TIM_IC_Start_IT+0x200>)
 8003202:	4293      	cmp	r3, r2
 8003204:	d00e      	beq.n	8003224 <HAL_TIM_IC_Start_IT+0x1c0>
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800320e:	d009      	beq.n	8003224 <HAL_TIM_IC_Start_IT+0x1c0>
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	4a14      	ldr	r2, [pc, #80]	; (8003268 <HAL_TIM_IC_Start_IT+0x204>)
 8003216:	4293      	cmp	r3, r2
 8003218:	d004      	beq.n	8003224 <HAL_TIM_IC_Start_IT+0x1c0>
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	4a13      	ldr	r2, [pc, #76]	; (800326c <HAL_TIM_IC_Start_IT+0x208>)
 8003220:	4293      	cmp	r3, r2
 8003222:	d111      	bne.n	8003248 <HAL_TIM_IC_Start_IT+0x1e4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	689b      	ldr	r3, [r3, #8]
 800322a:	f003 0307 	and.w	r3, r3, #7
 800322e:	60bb      	str	r3, [r7, #8]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003230:	68bb      	ldr	r3, [r7, #8]
 8003232:	2b06      	cmp	r3, #6
 8003234:	d010      	beq.n	8003258 <HAL_TIM_IC_Start_IT+0x1f4>
    {
      __HAL_TIM_ENABLE(htim);
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	681a      	ldr	r2, [r3, #0]
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	f042 0201 	orr.w	r2, r2, #1
 8003244:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003246:	e007      	b.n	8003258 <HAL_TIM_IC_Start_IT+0x1f4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	681a      	ldr	r2, [r3, #0]
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	f042 0201 	orr.w	r2, r2, #1
 8003256:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003258:	2300      	movs	r3, #0
}
 800325a:	4618      	mov	r0, r3
 800325c:	3710      	adds	r7, #16
 800325e:	46bd      	mov	sp, r7
 8003260:	bd80      	pop	{r7, pc}
 8003262:	bf00      	nop
 8003264:	40012c00 	.word	0x40012c00
 8003268:	40000400 	.word	0x40000400
 800326c:	40000800 	.word	0x40000800

08003270 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003270:	b580      	push	{r7, lr}
 8003272:	b082      	sub	sp, #8
 8003274:	af00      	add	r7, sp, #0
 8003276:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	691b      	ldr	r3, [r3, #16]
 800327e:	f003 0302 	and.w	r3, r3, #2
 8003282:	2b02      	cmp	r3, #2
 8003284:	d122      	bne.n	80032cc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	68db      	ldr	r3, [r3, #12]
 800328c:	f003 0302 	and.w	r3, r3, #2
 8003290:	2b02      	cmp	r3, #2
 8003292:	d11b      	bne.n	80032cc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	f06f 0202 	mvn.w	r2, #2
 800329c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	2201      	movs	r2, #1
 80032a2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	699b      	ldr	r3, [r3, #24]
 80032aa:	f003 0303 	and.w	r3, r3, #3
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d003      	beq.n	80032ba <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80032b2:	6878      	ldr	r0, [r7, #4]
 80032b4:	f7fd fe4c 	bl	8000f50 <HAL_TIM_IC_CaptureCallback>
 80032b8:	e005      	b.n	80032c6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80032ba:	6878      	ldr	r0, [r7, #4]
 80032bc:	f000 fa7c 	bl	80037b8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80032c0:	6878      	ldr	r0, [r7, #4]
 80032c2:	f000 fa82 	bl	80037ca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	2200      	movs	r2, #0
 80032ca:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	691b      	ldr	r3, [r3, #16]
 80032d2:	f003 0304 	and.w	r3, r3, #4
 80032d6:	2b04      	cmp	r3, #4
 80032d8:	d122      	bne.n	8003320 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	68db      	ldr	r3, [r3, #12]
 80032e0:	f003 0304 	and.w	r3, r3, #4
 80032e4:	2b04      	cmp	r3, #4
 80032e6:	d11b      	bne.n	8003320 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	f06f 0204 	mvn.w	r2, #4
 80032f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	2202      	movs	r2, #2
 80032f6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	699b      	ldr	r3, [r3, #24]
 80032fe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003302:	2b00      	cmp	r3, #0
 8003304:	d003      	beq.n	800330e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003306:	6878      	ldr	r0, [r7, #4]
 8003308:	f7fd fe22 	bl	8000f50 <HAL_TIM_IC_CaptureCallback>
 800330c:	e005      	b.n	800331a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800330e:	6878      	ldr	r0, [r7, #4]
 8003310:	f000 fa52 	bl	80037b8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003314:	6878      	ldr	r0, [r7, #4]
 8003316:	f000 fa58 	bl	80037ca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	2200      	movs	r2, #0
 800331e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	691b      	ldr	r3, [r3, #16]
 8003326:	f003 0308 	and.w	r3, r3, #8
 800332a:	2b08      	cmp	r3, #8
 800332c:	d122      	bne.n	8003374 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	68db      	ldr	r3, [r3, #12]
 8003334:	f003 0308 	and.w	r3, r3, #8
 8003338:	2b08      	cmp	r3, #8
 800333a:	d11b      	bne.n	8003374 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	f06f 0208 	mvn.w	r2, #8
 8003344:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	2204      	movs	r2, #4
 800334a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	69db      	ldr	r3, [r3, #28]
 8003352:	f003 0303 	and.w	r3, r3, #3
 8003356:	2b00      	cmp	r3, #0
 8003358:	d003      	beq.n	8003362 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800335a:	6878      	ldr	r0, [r7, #4]
 800335c:	f7fd fdf8 	bl	8000f50 <HAL_TIM_IC_CaptureCallback>
 8003360:	e005      	b.n	800336e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003362:	6878      	ldr	r0, [r7, #4]
 8003364:	f000 fa28 	bl	80037b8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003368:	6878      	ldr	r0, [r7, #4]
 800336a:	f000 fa2e 	bl	80037ca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	2200      	movs	r2, #0
 8003372:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	691b      	ldr	r3, [r3, #16]
 800337a:	f003 0310 	and.w	r3, r3, #16
 800337e:	2b10      	cmp	r3, #16
 8003380:	d122      	bne.n	80033c8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	68db      	ldr	r3, [r3, #12]
 8003388:	f003 0310 	and.w	r3, r3, #16
 800338c:	2b10      	cmp	r3, #16
 800338e:	d11b      	bne.n	80033c8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	f06f 0210 	mvn.w	r2, #16
 8003398:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	2208      	movs	r2, #8
 800339e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	69db      	ldr	r3, [r3, #28]
 80033a6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d003      	beq.n	80033b6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80033ae:	6878      	ldr	r0, [r7, #4]
 80033b0:	f7fd fdce 	bl	8000f50 <HAL_TIM_IC_CaptureCallback>
 80033b4:	e005      	b.n	80033c2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80033b6:	6878      	ldr	r0, [r7, #4]
 80033b8:	f000 f9fe 	bl	80037b8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80033bc:	6878      	ldr	r0, [r7, #4]
 80033be:	f000 fa04 	bl	80037ca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	2200      	movs	r2, #0
 80033c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	691b      	ldr	r3, [r3, #16]
 80033ce:	f003 0301 	and.w	r3, r3, #1
 80033d2:	2b01      	cmp	r3, #1
 80033d4:	d10e      	bne.n	80033f4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	68db      	ldr	r3, [r3, #12]
 80033dc:	f003 0301 	and.w	r3, r3, #1
 80033e0:	2b01      	cmp	r3, #1
 80033e2:	d107      	bne.n	80033f4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	f06f 0201 	mvn.w	r2, #1
 80033ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80033ee:	6878      	ldr	r0, [r7, #4]
 80033f0:	f7fd fd80 	bl	8000ef4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	691b      	ldr	r3, [r3, #16]
 80033fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033fe:	2b80      	cmp	r3, #128	; 0x80
 8003400:	d10e      	bne.n	8003420 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	68db      	ldr	r3, [r3, #12]
 8003408:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800340c:	2b80      	cmp	r3, #128	; 0x80
 800340e:	d107      	bne.n	8003420 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003418:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800341a:	6878      	ldr	r0, [r7, #4]
 800341c:	f000 fc79 	bl	8003d12 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	691b      	ldr	r3, [r3, #16]
 8003426:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800342a:	2b40      	cmp	r3, #64	; 0x40
 800342c:	d10e      	bne.n	800344c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	68db      	ldr	r3, [r3, #12]
 8003434:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003438:	2b40      	cmp	r3, #64	; 0x40
 800343a:	d107      	bne.n	800344c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003444:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003446:	6878      	ldr	r0, [r7, #4]
 8003448:	f000 f9c8 	bl	80037dc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	691b      	ldr	r3, [r3, #16]
 8003452:	f003 0320 	and.w	r3, r3, #32
 8003456:	2b20      	cmp	r3, #32
 8003458:	d10e      	bne.n	8003478 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	68db      	ldr	r3, [r3, #12]
 8003460:	f003 0320 	and.w	r3, r3, #32
 8003464:	2b20      	cmp	r3, #32
 8003466:	d107      	bne.n	8003478 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	f06f 0220 	mvn.w	r2, #32
 8003470:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003472:	6878      	ldr	r0, [r7, #4]
 8003474:	f000 fc44 	bl	8003d00 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003478:	bf00      	nop
 800347a:	3708      	adds	r7, #8
 800347c:	46bd      	mov	sp, r7
 800347e:	bd80      	pop	{r7, pc}

08003480 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8003480:	b580      	push	{r7, lr}
 8003482:	b084      	sub	sp, #16
 8003484:	af00      	add	r7, sp, #0
 8003486:	60f8      	str	r0, [r7, #12]
 8003488:	60b9      	str	r1, [r7, #8]
 800348a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003492:	2b01      	cmp	r3, #1
 8003494:	d101      	bne.n	800349a <HAL_TIM_IC_ConfigChannel+0x1a>
 8003496:	2302      	movs	r3, #2
 8003498:	e082      	b.n	80035a0 <HAL_TIM_IC_ConfigChannel+0x120>
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	2201      	movs	r2, #1
 800349e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d11b      	bne.n	80034e0 <HAL_TIM_IC_ConfigChannel+0x60>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	6818      	ldr	r0, [r3, #0]
 80034ac:	68bb      	ldr	r3, [r7, #8]
 80034ae:	6819      	ldr	r1, [r3, #0]
 80034b0:	68bb      	ldr	r3, [r7, #8]
 80034b2:	685a      	ldr	r2, [r3, #4]
 80034b4:	68bb      	ldr	r3, [r7, #8]
 80034b6:	68db      	ldr	r3, [r3, #12]
 80034b8:	f000 f9fc 	bl	80038b4 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	699a      	ldr	r2, [r3, #24]
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	f022 020c 	bic.w	r2, r2, #12
 80034ca:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	6999      	ldr	r1, [r3, #24]
 80034d2:	68bb      	ldr	r3, [r7, #8]
 80034d4:	689a      	ldr	r2, [r3, #8]
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	430a      	orrs	r2, r1
 80034dc:	619a      	str	r2, [r3, #24]
 80034de:	e05a      	b.n	8003596 <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_2)
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	2b04      	cmp	r3, #4
 80034e4:	d11c      	bne.n	8003520 <HAL_TIM_IC_ConfigChannel+0xa0>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	6818      	ldr	r0, [r3, #0]
 80034ea:	68bb      	ldr	r3, [r7, #8]
 80034ec:	6819      	ldr	r1, [r3, #0]
 80034ee:	68bb      	ldr	r3, [r7, #8]
 80034f0:	685a      	ldr	r2, [r3, #4]
 80034f2:	68bb      	ldr	r3, [r7, #8]
 80034f4:	68db      	ldr	r3, [r3, #12]
 80034f6:	f000 fa65 	bl	80039c4 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	699a      	ldr	r2, [r3, #24]
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8003508:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	6999      	ldr	r1, [r3, #24]
 8003510:	68bb      	ldr	r3, [r7, #8]
 8003512:	689b      	ldr	r3, [r3, #8]
 8003514:	021a      	lsls	r2, r3, #8
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	430a      	orrs	r2, r1
 800351c:	619a      	str	r2, [r3, #24]
 800351e:	e03a      	b.n	8003596 <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_3)
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	2b08      	cmp	r3, #8
 8003524:	d11b      	bne.n	800355e <HAL_TIM_IC_ConfigChannel+0xde>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	6818      	ldr	r0, [r3, #0]
 800352a:	68bb      	ldr	r3, [r7, #8]
 800352c:	6819      	ldr	r1, [r3, #0]
 800352e:	68bb      	ldr	r3, [r7, #8]
 8003530:	685a      	ldr	r2, [r3, #4]
 8003532:	68bb      	ldr	r3, [r7, #8]
 8003534:	68db      	ldr	r3, [r3, #12]
 8003536:	f000 fab0 	bl	8003a9a <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	69da      	ldr	r2, [r3, #28]
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	f022 020c 	bic.w	r2, r2, #12
 8003548:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	69d9      	ldr	r1, [r3, #28]
 8003550:	68bb      	ldr	r3, [r7, #8]
 8003552:	689a      	ldr	r2, [r3, #8]
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	430a      	orrs	r2, r1
 800355a:	61da      	str	r2, [r3, #28]
 800355c:	e01b      	b.n	8003596 <HAL_TIM_IC_ConfigChannel+0x116>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	6818      	ldr	r0, [r3, #0]
 8003562:	68bb      	ldr	r3, [r7, #8]
 8003564:	6819      	ldr	r1, [r3, #0]
 8003566:	68bb      	ldr	r3, [r7, #8]
 8003568:	685a      	ldr	r2, [r3, #4]
 800356a:	68bb      	ldr	r3, [r7, #8]
 800356c:	68db      	ldr	r3, [r3, #12]
 800356e:	f000 facf 	bl	8003b10 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	69da      	ldr	r2, [r3, #28]
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8003580:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	69d9      	ldr	r1, [r3, #28]
 8003588:	68bb      	ldr	r3, [r7, #8]
 800358a:	689b      	ldr	r3, [r3, #8]
 800358c:	021a      	lsls	r2, r3, #8
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	430a      	orrs	r2, r1
 8003594:	61da      	str	r2, [r3, #28]
  }

  __HAL_UNLOCK(htim);
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	2200      	movs	r2, #0
 800359a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800359e:	2300      	movs	r3, #0
}
 80035a0:	4618      	mov	r0, r3
 80035a2:	3710      	adds	r7, #16
 80035a4:	46bd      	mov	sp, r7
 80035a6:	bd80      	pop	{r7, pc}

080035a8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80035a8:	b580      	push	{r7, lr}
 80035aa:	b084      	sub	sp, #16
 80035ac:	af00      	add	r7, sp, #0
 80035ae:	6078      	str	r0, [r7, #4]
 80035b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80035b8:	2b01      	cmp	r3, #1
 80035ba:	d101      	bne.n	80035c0 <HAL_TIM_ConfigClockSource+0x18>
 80035bc:	2302      	movs	r3, #2
 80035be:	e0b3      	b.n	8003728 <HAL_TIM_ConfigClockSource+0x180>
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	2201      	movs	r2, #1
 80035c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	2202      	movs	r2, #2
 80035cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	689b      	ldr	r3, [r3, #8]
 80035d6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80035de:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80035e6:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	68fa      	ldr	r2, [r7, #12]
 80035ee:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80035f0:	683b      	ldr	r3, [r7, #0]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80035f8:	d03e      	beq.n	8003678 <HAL_TIM_ConfigClockSource+0xd0>
 80035fa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80035fe:	f200 8087 	bhi.w	8003710 <HAL_TIM_ConfigClockSource+0x168>
 8003602:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003606:	f000 8085 	beq.w	8003714 <HAL_TIM_ConfigClockSource+0x16c>
 800360a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800360e:	d87f      	bhi.n	8003710 <HAL_TIM_ConfigClockSource+0x168>
 8003610:	2b70      	cmp	r3, #112	; 0x70
 8003612:	d01a      	beq.n	800364a <HAL_TIM_ConfigClockSource+0xa2>
 8003614:	2b70      	cmp	r3, #112	; 0x70
 8003616:	d87b      	bhi.n	8003710 <HAL_TIM_ConfigClockSource+0x168>
 8003618:	2b60      	cmp	r3, #96	; 0x60
 800361a:	d050      	beq.n	80036be <HAL_TIM_ConfigClockSource+0x116>
 800361c:	2b60      	cmp	r3, #96	; 0x60
 800361e:	d877      	bhi.n	8003710 <HAL_TIM_ConfigClockSource+0x168>
 8003620:	2b50      	cmp	r3, #80	; 0x50
 8003622:	d03c      	beq.n	800369e <HAL_TIM_ConfigClockSource+0xf6>
 8003624:	2b50      	cmp	r3, #80	; 0x50
 8003626:	d873      	bhi.n	8003710 <HAL_TIM_ConfigClockSource+0x168>
 8003628:	2b40      	cmp	r3, #64	; 0x40
 800362a:	d058      	beq.n	80036de <HAL_TIM_ConfigClockSource+0x136>
 800362c:	2b40      	cmp	r3, #64	; 0x40
 800362e:	d86f      	bhi.n	8003710 <HAL_TIM_ConfigClockSource+0x168>
 8003630:	2b30      	cmp	r3, #48	; 0x30
 8003632:	d064      	beq.n	80036fe <HAL_TIM_ConfigClockSource+0x156>
 8003634:	2b30      	cmp	r3, #48	; 0x30
 8003636:	d86b      	bhi.n	8003710 <HAL_TIM_ConfigClockSource+0x168>
 8003638:	2b20      	cmp	r3, #32
 800363a:	d060      	beq.n	80036fe <HAL_TIM_ConfigClockSource+0x156>
 800363c:	2b20      	cmp	r3, #32
 800363e:	d867      	bhi.n	8003710 <HAL_TIM_ConfigClockSource+0x168>
 8003640:	2b00      	cmp	r3, #0
 8003642:	d05c      	beq.n	80036fe <HAL_TIM_ConfigClockSource+0x156>
 8003644:	2b10      	cmp	r3, #16
 8003646:	d05a      	beq.n	80036fe <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8003648:	e062      	b.n	8003710 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	6818      	ldr	r0, [r3, #0]
 800364e:	683b      	ldr	r3, [r7, #0]
 8003650:	6899      	ldr	r1, [r3, #8]
 8003652:	683b      	ldr	r3, [r7, #0]
 8003654:	685a      	ldr	r2, [r3, #4]
 8003656:	683b      	ldr	r3, [r7, #0]
 8003658:	68db      	ldr	r3, [r3, #12]
 800365a:	f000 faaf 	bl	8003bbc <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	689b      	ldr	r3, [r3, #8]
 8003664:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800366c:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	68fa      	ldr	r2, [r7, #12]
 8003674:	609a      	str	r2, [r3, #8]
      break;
 8003676:	e04e      	b.n	8003716 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	6818      	ldr	r0, [r3, #0]
 800367c:	683b      	ldr	r3, [r7, #0]
 800367e:	6899      	ldr	r1, [r3, #8]
 8003680:	683b      	ldr	r3, [r7, #0]
 8003682:	685a      	ldr	r2, [r3, #4]
 8003684:	683b      	ldr	r3, [r7, #0]
 8003686:	68db      	ldr	r3, [r3, #12]
 8003688:	f000 fa98 	bl	8003bbc <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	689a      	ldr	r2, [r3, #8]
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800369a:	609a      	str	r2, [r3, #8]
      break;
 800369c:	e03b      	b.n	8003716 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	6818      	ldr	r0, [r3, #0]
 80036a2:	683b      	ldr	r3, [r7, #0]
 80036a4:	6859      	ldr	r1, [r3, #4]
 80036a6:	683b      	ldr	r3, [r7, #0]
 80036a8:	68db      	ldr	r3, [r3, #12]
 80036aa:	461a      	mov	r2, r3
 80036ac:	f000 f95c 	bl	8003968 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	2150      	movs	r1, #80	; 0x50
 80036b6:	4618      	mov	r0, r3
 80036b8:	f000 fa66 	bl	8003b88 <TIM_ITRx_SetConfig>
      break;
 80036bc:	e02b      	b.n	8003716 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	6818      	ldr	r0, [r3, #0]
 80036c2:	683b      	ldr	r3, [r7, #0]
 80036c4:	6859      	ldr	r1, [r3, #4]
 80036c6:	683b      	ldr	r3, [r7, #0]
 80036c8:	68db      	ldr	r3, [r3, #12]
 80036ca:	461a      	mov	r2, r3
 80036cc:	f000 f9b6 	bl	8003a3c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	2160      	movs	r1, #96	; 0x60
 80036d6:	4618      	mov	r0, r3
 80036d8:	f000 fa56 	bl	8003b88 <TIM_ITRx_SetConfig>
      break;
 80036dc:	e01b      	b.n	8003716 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	6818      	ldr	r0, [r3, #0]
 80036e2:	683b      	ldr	r3, [r7, #0]
 80036e4:	6859      	ldr	r1, [r3, #4]
 80036e6:	683b      	ldr	r3, [r7, #0]
 80036e8:	68db      	ldr	r3, [r3, #12]
 80036ea:	461a      	mov	r2, r3
 80036ec:	f000 f93c 	bl	8003968 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	2140      	movs	r1, #64	; 0x40
 80036f6:	4618      	mov	r0, r3
 80036f8:	f000 fa46 	bl	8003b88 <TIM_ITRx_SetConfig>
      break;
 80036fc:	e00b      	b.n	8003716 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681a      	ldr	r2, [r3, #0]
 8003702:	683b      	ldr	r3, [r7, #0]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	4619      	mov	r1, r3
 8003708:	4610      	mov	r0, r2
 800370a:	f000 fa3d 	bl	8003b88 <TIM_ITRx_SetConfig>
        break;
 800370e:	e002      	b.n	8003716 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8003710:	bf00      	nop
 8003712:	e000      	b.n	8003716 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8003714:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	2201      	movs	r2, #1
 800371a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	2200      	movs	r2, #0
 8003722:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003726:	2300      	movs	r3, #0
}
 8003728:	4618      	mov	r0, r3
 800372a:	3710      	adds	r7, #16
 800372c:	46bd      	mov	sp, r7
 800372e:	bd80      	pop	{r7, pc}

08003730 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003730:	b480      	push	{r7}
 8003732:	b085      	sub	sp, #20
 8003734:	af00      	add	r7, sp, #0
 8003736:	6078      	str	r0, [r7, #4]
 8003738:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 800373a:	2300      	movs	r3, #0
 800373c:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 800373e:	683b      	ldr	r3, [r7, #0]
 8003740:	2b0c      	cmp	r3, #12
 8003742:	d831      	bhi.n	80037a8 <HAL_TIM_ReadCapturedValue+0x78>
 8003744:	a201      	add	r2, pc, #4	; (adr r2, 800374c <HAL_TIM_ReadCapturedValue+0x1c>)
 8003746:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800374a:	bf00      	nop
 800374c:	08003781 	.word	0x08003781
 8003750:	080037a9 	.word	0x080037a9
 8003754:	080037a9 	.word	0x080037a9
 8003758:	080037a9 	.word	0x080037a9
 800375c:	0800378b 	.word	0x0800378b
 8003760:	080037a9 	.word	0x080037a9
 8003764:	080037a9 	.word	0x080037a9
 8003768:	080037a9 	.word	0x080037a9
 800376c:	08003795 	.word	0x08003795
 8003770:	080037a9 	.word	0x080037a9
 8003774:	080037a9 	.word	0x080037a9
 8003778:	080037a9 	.word	0x080037a9
 800377c:	0800379f 	.word	0x0800379f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003786:	60fb      	str	r3, [r7, #12]

      break;
 8003788:	e00f      	b.n	80037aa <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003790:	60fb      	str	r3, [r7, #12]

      break;
 8003792:	e00a      	b.n	80037aa <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800379a:	60fb      	str	r3, [r7, #12]

      break;
 800379c:	e005      	b.n	80037aa <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037a4:	60fb      	str	r3, [r7, #12]

      break;
 80037a6:	e000      	b.n	80037aa <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 80037a8:	bf00      	nop
  }

  return tmpreg;
 80037aa:	68fb      	ldr	r3, [r7, #12]
}
 80037ac:	4618      	mov	r0, r3
 80037ae:	3714      	adds	r7, #20
 80037b0:	46bd      	mov	sp, r7
 80037b2:	bc80      	pop	{r7}
 80037b4:	4770      	bx	lr
 80037b6:	bf00      	nop

080037b8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80037b8:	b480      	push	{r7}
 80037ba:	b083      	sub	sp, #12
 80037bc:	af00      	add	r7, sp, #0
 80037be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80037c0:	bf00      	nop
 80037c2:	370c      	adds	r7, #12
 80037c4:	46bd      	mov	sp, r7
 80037c6:	bc80      	pop	{r7}
 80037c8:	4770      	bx	lr

080037ca <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80037ca:	b480      	push	{r7}
 80037cc:	b083      	sub	sp, #12
 80037ce:	af00      	add	r7, sp, #0
 80037d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80037d2:	bf00      	nop
 80037d4:	370c      	adds	r7, #12
 80037d6:	46bd      	mov	sp, r7
 80037d8:	bc80      	pop	{r7}
 80037da:	4770      	bx	lr

080037dc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80037dc:	b480      	push	{r7}
 80037de:	b083      	sub	sp, #12
 80037e0:	af00      	add	r7, sp, #0
 80037e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80037e4:	bf00      	nop
 80037e6:	370c      	adds	r7, #12
 80037e8:	46bd      	mov	sp, r7
 80037ea:	bc80      	pop	{r7}
 80037ec:	4770      	bx	lr
	...

080037f0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80037f0:	b480      	push	{r7}
 80037f2:	b085      	sub	sp, #20
 80037f4:	af00      	add	r7, sp, #0
 80037f6:	6078      	str	r0, [r7, #4]
 80037f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	4a29      	ldr	r2, [pc, #164]	; (80038a8 <TIM_Base_SetConfig+0xb8>)
 8003804:	4293      	cmp	r3, r2
 8003806:	d00b      	beq.n	8003820 <TIM_Base_SetConfig+0x30>
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800380e:	d007      	beq.n	8003820 <TIM_Base_SetConfig+0x30>
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	4a26      	ldr	r2, [pc, #152]	; (80038ac <TIM_Base_SetConfig+0xbc>)
 8003814:	4293      	cmp	r3, r2
 8003816:	d003      	beq.n	8003820 <TIM_Base_SetConfig+0x30>
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	4a25      	ldr	r2, [pc, #148]	; (80038b0 <TIM_Base_SetConfig+0xc0>)
 800381c:	4293      	cmp	r3, r2
 800381e:	d108      	bne.n	8003832 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003826:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003828:	683b      	ldr	r3, [r7, #0]
 800382a:	685b      	ldr	r3, [r3, #4]
 800382c:	68fa      	ldr	r2, [r7, #12]
 800382e:	4313      	orrs	r3, r2
 8003830:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	4a1c      	ldr	r2, [pc, #112]	; (80038a8 <TIM_Base_SetConfig+0xb8>)
 8003836:	4293      	cmp	r3, r2
 8003838:	d00b      	beq.n	8003852 <TIM_Base_SetConfig+0x62>
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003840:	d007      	beq.n	8003852 <TIM_Base_SetConfig+0x62>
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	4a19      	ldr	r2, [pc, #100]	; (80038ac <TIM_Base_SetConfig+0xbc>)
 8003846:	4293      	cmp	r3, r2
 8003848:	d003      	beq.n	8003852 <TIM_Base_SetConfig+0x62>
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	4a18      	ldr	r2, [pc, #96]	; (80038b0 <TIM_Base_SetConfig+0xc0>)
 800384e:	4293      	cmp	r3, r2
 8003850:	d108      	bne.n	8003864 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003858:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800385a:	683b      	ldr	r3, [r7, #0]
 800385c:	68db      	ldr	r3, [r3, #12]
 800385e:	68fa      	ldr	r2, [r7, #12]
 8003860:	4313      	orrs	r3, r2
 8003862:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800386a:	683b      	ldr	r3, [r7, #0]
 800386c:	695b      	ldr	r3, [r3, #20]
 800386e:	4313      	orrs	r3, r2
 8003870:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	68fa      	ldr	r2, [r7, #12]
 8003876:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003878:	683b      	ldr	r3, [r7, #0]
 800387a:	689a      	ldr	r2, [r3, #8]
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003880:	683b      	ldr	r3, [r7, #0]
 8003882:	681a      	ldr	r2, [r3, #0]
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	4a07      	ldr	r2, [pc, #28]	; (80038a8 <TIM_Base_SetConfig+0xb8>)
 800388c:	4293      	cmp	r3, r2
 800388e:	d103      	bne.n	8003898 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003890:	683b      	ldr	r3, [r7, #0]
 8003892:	691a      	ldr	r2, [r3, #16]
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	2201      	movs	r2, #1
 800389c:	615a      	str	r2, [r3, #20]
}
 800389e:	bf00      	nop
 80038a0:	3714      	adds	r7, #20
 80038a2:	46bd      	mov	sp, r7
 80038a4:	bc80      	pop	{r7}
 80038a6:	4770      	bx	lr
 80038a8:	40012c00 	.word	0x40012c00
 80038ac:	40000400 	.word	0x40000400
 80038b0:	40000800 	.word	0x40000800

080038b4 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80038b4:	b480      	push	{r7}
 80038b6:	b087      	sub	sp, #28
 80038b8:	af00      	add	r7, sp, #0
 80038ba:	60f8      	str	r0, [r7, #12]
 80038bc:	60b9      	str	r1, [r7, #8]
 80038be:	607a      	str	r2, [r7, #4]
 80038c0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	6a1b      	ldr	r3, [r3, #32]
 80038c6:	f023 0201 	bic.w	r2, r3, #1
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	699b      	ldr	r3, [r3, #24]
 80038d2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	6a1b      	ldr	r3, [r3, #32]
 80038d8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	4a1f      	ldr	r2, [pc, #124]	; (800395c <TIM_TI1_SetConfig+0xa8>)
 80038de:	4293      	cmp	r3, r2
 80038e0:	d00b      	beq.n	80038fa <TIM_TI1_SetConfig+0x46>
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80038e8:	d007      	beq.n	80038fa <TIM_TI1_SetConfig+0x46>
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	4a1c      	ldr	r2, [pc, #112]	; (8003960 <TIM_TI1_SetConfig+0xac>)
 80038ee:	4293      	cmp	r3, r2
 80038f0:	d003      	beq.n	80038fa <TIM_TI1_SetConfig+0x46>
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	4a1b      	ldr	r2, [pc, #108]	; (8003964 <TIM_TI1_SetConfig+0xb0>)
 80038f6:	4293      	cmp	r3, r2
 80038f8:	d101      	bne.n	80038fe <TIM_TI1_SetConfig+0x4a>
 80038fa:	2301      	movs	r3, #1
 80038fc:	e000      	b.n	8003900 <TIM_TI1_SetConfig+0x4c>
 80038fe:	2300      	movs	r3, #0
 8003900:	2b00      	cmp	r3, #0
 8003902:	d008      	beq.n	8003916 <TIM_TI1_SetConfig+0x62>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8003904:	697b      	ldr	r3, [r7, #20]
 8003906:	f023 0303 	bic.w	r3, r3, #3
 800390a:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 800390c:	697a      	ldr	r2, [r7, #20]
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	4313      	orrs	r3, r2
 8003912:	617b      	str	r3, [r7, #20]
 8003914:	e003      	b.n	800391e <TIM_TI1_SetConfig+0x6a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8003916:	697b      	ldr	r3, [r7, #20]
 8003918:	f043 0301 	orr.w	r3, r3, #1
 800391c:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800391e:	697b      	ldr	r3, [r7, #20]
 8003920:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003924:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8003926:	683b      	ldr	r3, [r7, #0]
 8003928:	011b      	lsls	r3, r3, #4
 800392a:	b2db      	uxtb	r3, r3
 800392c:	697a      	ldr	r2, [r7, #20]
 800392e:	4313      	orrs	r3, r2
 8003930:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003932:	693b      	ldr	r3, [r7, #16]
 8003934:	f023 030a 	bic.w	r3, r3, #10
 8003938:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800393a:	68bb      	ldr	r3, [r7, #8]
 800393c:	f003 030a 	and.w	r3, r3, #10
 8003940:	693a      	ldr	r2, [r7, #16]
 8003942:	4313      	orrs	r3, r2
 8003944:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	697a      	ldr	r2, [r7, #20]
 800394a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	693a      	ldr	r2, [r7, #16]
 8003950:	621a      	str	r2, [r3, #32]
}
 8003952:	bf00      	nop
 8003954:	371c      	adds	r7, #28
 8003956:	46bd      	mov	sp, r7
 8003958:	bc80      	pop	{r7}
 800395a:	4770      	bx	lr
 800395c:	40012c00 	.word	0x40012c00
 8003960:	40000400 	.word	0x40000400
 8003964:	40000800 	.word	0x40000800

08003968 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003968:	b480      	push	{r7}
 800396a:	b087      	sub	sp, #28
 800396c:	af00      	add	r7, sp, #0
 800396e:	60f8      	str	r0, [r7, #12]
 8003970:	60b9      	str	r1, [r7, #8]
 8003972:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	6a1b      	ldr	r3, [r3, #32]
 8003978:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	6a1b      	ldr	r3, [r3, #32]
 800397e:	f023 0201 	bic.w	r2, r3, #1
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	699b      	ldr	r3, [r3, #24]
 800398a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800398c:	693b      	ldr	r3, [r7, #16]
 800398e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003992:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	011b      	lsls	r3, r3, #4
 8003998:	693a      	ldr	r2, [r7, #16]
 800399a:	4313      	orrs	r3, r2
 800399c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800399e:	697b      	ldr	r3, [r7, #20]
 80039a0:	f023 030a 	bic.w	r3, r3, #10
 80039a4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80039a6:	697a      	ldr	r2, [r7, #20]
 80039a8:	68bb      	ldr	r3, [r7, #8]
 80039aa:	4313      	orrs	r3, r2
 80039ac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	693a      	ldr	r2, [r7, #16]
 80039b2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	697a      	ldr	r2, [r7, #20]
 80039b8:	621a      	str	r2, [r3, #32]
}
 80039ba:	bf00      	nop
 80039bc:	371c      	adds	r7, #28
 80039be:	46bd      	mov	sp, r7
 80039c0:	bc80      	pop	{r7}
 80039c2:	4770      	bx	lr

080039c4 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80039c4:	b480      	push	{r7}
 80039c6:	b087      	sub	sp, #28
 80039c8:	af00      	add	r7, sp, #0
 80039ca:	60f8      	str	r0, [r7, #12]
 80039cc:	60b9      	str	r1, [r7, #8]
 80039ce:	607a      	str	r2, [r7, #4]
 80039d0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	6a1b      	ldr	r3, [r3, #32]
 80039d6:	f023 0210 	bic.w	r2, r3, #16
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	699b      	ldr	r3, [r3, #24]
 80039e2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	6a1b      	ldr	r3, [r3, #32]
 80039e8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80039ea:	697b      	ldr	r3, [r7, #20]
 80039ec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80039f0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	021b      	lsls	r3, r3, #8
 80039f6:	697a      	ldr	r2, [r7, #20]
 80039f8:	4313      	orrs	r3, r2
 80039fa:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80039fc:	697b      	ldr	r3, [r7, #20]
 80039fe:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003a02:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8003a04:	683b      	ldr	r3, [r7, #0]
 8003a06:	031b      	lsls	r3, r3, #12
 8003a08:	b29b      	uxth	r3, r3
 8003a0a:	697a      	ldr	r2, [r7, #20]
 8003a0c:	4313      	orrs	r3, r2
 8003a0e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003a10:	693b      	ldr	r3, [r7, #16]
 8003a12:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003a16:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8003a18:	68bb      	ldr	r3, [r7, #8]
 8003a1a:	011b      	lsls	r3, r3, #4
 8003a1c:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8003a20:	693a      	ldr	r2, [r7, #16]
 8003a22:	4313      	orrs	r3, r2
 8003a24:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	697a      	ldr	r2, [r7, #20]
 8003a2a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	693a      	ldr	r2, [r7, #16]
 8003a30:	621a      	str	r2, [r3, #32]
}
 8003a32:	bf00      	nop
 8003a34:	371c      	adds	r7, #28
 8003a36:	46bd      	mov	sp, r7
 8003a38:	bc80      	pop	{r7}
 8003a3a:	4770      	bx	lr

08003a3c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003a3c:	b480      	push	{r7}
 8003a3e:	b087      	sub	sp, #28
 8003a40:	af00      	add	r7, sp, #0
 8003a42:	60f8      	str	r0, [r7, #12]
 8003a44:	60b9      	str	r1, [r7, #8]
 8003a46:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	6a1b      	ldr	r3, [r3, #32]
 8003a4c:	f023 0210 	bic.w	r2, r3, #16
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	699b      	ldr	r3, [r3, #24]
 8003a58:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	6a1b      	ldr	r3, [r3, #32]
 8003a5e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003a60:	697b      	ldr	r3, [r7, #20]
 8003a62:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003a66:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	031b      	lsls	r3, r3, #12
 8003a6c:	697a      	ldr	r2, [r7, #20]
 8003a6e:	4313      	orrs	r3, r2
 8003a70:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003a72:	693b      	ldr	r3, [r7, #16]
 8003a74:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003a78:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003a7a:	68bb      	ldr	r3, [r7, #8]
 8003a7c:	011b      	lsls	r3, r3, #4
 8003a7e:	693a      	ldr	r2, [r7, #16]
 8003a80:	4313      	orrs	r3, r2
 8003a82:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	697a      	ldr	r2, [r7, #20]
 8003a88:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	693a      	ldr	r2, [r7, #16]
 8003a8e:	621a      	str	r2, [r3, #32]
}
 8003a90:	bf00      	nop
 8003a92:	371c      	adds	r7, #28
 8003a94:	46bd      	mov	sp, r7
 8003a96:	bc80      	pop	{r7}
 8003a98:	4770      	bx	lr

08003a9a <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003a9a:	b480      	push	{r7}
 8003a9c:	b087      	sub	sp, #28
 8003a9e:	af00      	add	r7, sp, #0
 8003aa0:	60f8      	str	r0, [r7, #12]
 8003aa2:	60b9      	str	r1, [r7, #8]
 8003aa4:	607a      	str	r2, [r7, #4]
 8003aa6:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	6a1b      	ldr	r3, [r3, #32]
 8003aac:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	69db      	ldr	r3, [r3, #28]
 8003ab8:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	6a1b      	ldr	r3, [r3, #32]
 8003abe:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8003ac0:	697b      	ldr	r3, [r7, #20]
 8003ac2:	f023 0303 	bic.w	r3, r3, #3
 8003ac6:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8003ac8:	697a      	ldr	r2, [r7, #20]
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	4313      	orrs	r3, r2
 8003ace:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8003ad0:	697b      	ldr	r3, [r7, #20]
 8003ad2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003ad6:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8003ad8:	683b      	ldr	r3, [r7, #0]
 8003ada:	011b      	lsls	r3, r3, #4
 8003adc:	b2db      	uxtb	r3, r3
 8003ade:	697a      	ldr	r2, [r7, #20]
 8003ae0:	4313      	orrs	r3, r2
 8003ae2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P);
 8003ae4:	693b      	ldr	r3, [r7, #16]
 8003ae6:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003aea:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & TIM_CCER_CC3P);
 8003aec:	68bb      	ldr	r3, [r7, #8]
 8003aee:	021b      	lsls	r3, r3, #8
 8003af0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003af4:	693a      	ldr	r2, [r7, #16]
 8003af6:	4313      	orrs	r3, r2
 8003af8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	697a      	ldr	r2, [r7, #20]
 8003afe:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	693a      	ldr	r2, [r7, #16]
 8003b04:	621a      	str	r2, [r3, #32]
}
 8003b06:	bf00      	nop
 8003b08:	371c      	adds	r7, #28
 8003b0a:	46bd      	mov	sp, r7
 8003b0c:	bc80      	pop	{r7}
 8003b0e:	4770      	bx	lr

08003b10 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003b10:	b480      	push	{r7}
 8003b12:	b087      	sub	sp, #28
 8003b14:	af00      	add	r7, sp, #0
 8003b16:	60f8      	str	r0, [r7, #12]
 8003b18:	60b9      	str	r1, [r7, #8]
 8003b1a:	607a      	str	r2, [r7, #4]
 8003b1c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	6a1b      	ldr	r3, [r3, #32]
 8003b22:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	69db      	ldr	r3, [r3, #28]
 8003b2e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	6a1b      	ldr	r3, [r3, #32]
 8003b34:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8003b36:	697b      	ldr	r3, [r7, #20]
 8003b38:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003b3c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	021b      	lsls	r3, r3, #8
 8003b42:	697a      	ldr	r2, [r7, #20]
 8003b44:	4313      	orrs	r3, r2
 8003b46:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8003b48:	697b      	ldr	r3, [r7, #20]
 8003b4a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003b4e:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8003b50:	683b      	ldr	r3, [r7, #0]
 8003b52:	031b      	lsls	r3, r3, #12
 8003b54:	b29b      	uxth	r3, r3
 8003b56:	697a      	ldr	r2, [r7, #20]
 8003b58:	4313      	orrs	r3, r2
 8003b5a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P);
 8003b5c:	693b      	ldr	r3, [r7, #16]
 8003b5e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003b62:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & TIM_CCER_CC4P);
 8003b64:	68bb      	ldr	r3, [r7, #8]
 8003b66:	031b      	lsls	r3, r3, #12
 8003b68:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003b6c:	693a      	ldr	r2, [r7, #16]
 8003b6e:	4313      	orrs	r3, r2
 8003b70:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	697a      	ldr	r2, [r7, #20]
 8003b76:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	693a      	ldr	r2, [r7, #16]
 8003b7c:	621a      	str	r2, [r3, #32]
}
 8003b7e:	bf00      	nop
 8003b80:	371c      	adds	r7, #28
 8003b82:	46bd      	mov	sp, r7
 8003b84:	bc80      	pop	{r7}
 8003b86:	4770      	bx	lr

08003b88 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003b88:	b480      	push	{r7}
 8003b8a:	b085      	sub	sp, #20
 8003b8c:	af00      	add	r7, sp, #0
 8003b8e:	6078      	str	r0, [r7, #4]
 8003b90:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	689b      	ldr	r3, [r3, #8]
 8003b96:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b9e:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003ba0:	683a      	ldr	r2, [r7, #0]
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	4313      	orrs	r3, r2
 8003ba6:	f043 0307 	orr.w	r3, r3, #7
 8003baa:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	68fa      	ldr	r2, [r7, #12]
 8003bb0:	609a      	str	r2, [r3, #8]
}
 8003bb2:	bf00      	nop
 8003bb4:	3714      	adds	r7, #20
 8003bb6:	46bd      	mov	sp, r7
 8003bb8:	bc80      	pop	{r7}
 8003bba:	4770      	bx	lr

08003bbc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003bbc:	b480      	push	{r7}
 8003bbe:	b087      	sub	sp, #28
 8003bc0:	af00      	add	r7, sp, #0
 8003bc2:	60f8      	str	r0, [r7, #12]
 8003bc4:	60b9      	str	r1, [r7, #8]
 8003bc6:	607a      	str	r2, [r7, #4]
 8003bc8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	689b      	ldr	r3, [r3, #8]
 8003bce:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003bd0:	697b      	ldr	r3, [r7, #20]
 8003bd2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003bd6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003bd8:	683b      	ldr	r3, [r7, #0]
 8003bda:	021a      	lsls	r2, r3, #8
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	431a      	orrs	r2, r3
 8003be0:	68bb      	ldr	r3, [r7, #8]
 8003be2:	4313      	orrs	r3, r2
 8003be4:	697a      	ldr	r2, [r7, #20]
 8003be6:	4313      	orrs	r3, r2
 8003be8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	697a      	ldr	r2, [r7, #20]
 8003bee:	609a      	str	r2, [r3, #8]
}
 8003bf0:	bf00      	nop
 8003bf2:	371c      	adds	r7, #28
 8003bf4:	46bd      	mov	sp, r7
 8003bf6:	bc80      	pop	{r7}
 8003bf8:	4770      	bx	lr

08003bfa <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003bfa:	b480      	push	{r7}
 8003bfc:	b087      	sub	sp, #28
 8003bfe:	af00      	add	r7, sp, #0
 8003c00:	60f8      	str	r0, [r7, #12]
 8003c02:	60b9      	str	r1, [r7, #8]
 8003c04:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003c06:	68bb      	ldr	r3, [r7, #8]
 8003c08:	f003 031f 	and.w	r3, r3, #31
 8003c0c:	2201      	movs	r2, #1
 8003c0e:	fa02 f303 	lsl.w	r3, r2, r3
 8003c12:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	6a1a      	ldr	r2, [r3, #32]
 8003c18:	697b      	ldr	r3, [r7, #20]
 8003c1a:	43db      	mvns	r3, r3
 8003c1c:	401a      	ands	r2, r3
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	6a1a      	ldr	r2, [r3, #32]
 8003c26:	68bb      	ldr	r3, [r7, #8]
 8003c28:	f003 031f 	and.w	r3, r3, #31
 8003c2c:	6879      	ldr	r1, [r7, #4]
 8003c2e:	fa01 f303 	lsl.w	r3, r1, r3
 8003c32:	431a      	orrs	r2, r3
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	621a      	str	r2, [r3, #32]
}
 8003c38:	bf00      	nop
 8003c3a:	371c      	adds	r7, #28
 8003c3c:	46bd      	mov	sp, r7
 8003c3e:	bc80      	pop	{r7}
 8003c40:	4770      	bx	lr
	...

08003c44 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003c44:	b480      	push	{r7}
 8003c46:	b085      	sub	sp, #20
 8003c48:	af00      	add	r7, sp, #0
 8003c4a:	6078      	str	r0, [r7, #4]
 8003c4c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003c54:	2b01      	cmp	r3, #1
 8003c56:	d101      	bne.n	8003c5c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003c58:	2302      	movs	r3, #2
 8003c5a:	e046      	b.n	8003cea <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	2201      	movs	r2, #1
 8003c60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	2202      	movs	r2, #2
 8003c68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	685b      	ldr	r3, [r3, #4]
 8003c72:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	689b      	ldr	r3, [r3, #8]
 8003c7a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c82:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003c84:	683b      	ldr	r3, [r7, #0]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	68fa      	ldr	r2, [r7, #12]
 8003c8a:	4313      	orrs	r3, r2
 8003c8c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	68fa      	ldr	r2, [r7, #12]
 8003c94:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	4a16      	ldr	r2, [pc, #88]	; (8003cf4 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003c9c:	4293      	cmp	r3, r2
 8003c9e:	d00e      	beq.n	8003cbe <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ca8:	d009      	beq.n	8003cbe <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	4a12      	ldr	r2, [pc, #72]	; (8003cf8 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003cb0:	4293      	cmp	r3, r2
 8003cb2:	d004      	beq.n	8003cbe <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	4a10      	ldr	r2, [pc, #64]	; (8003cfc <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003cba:	4293      	cmp	r3, r2
 8003cbc:	d10c      	bne.n	8003cd8 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003cbe:	68bb      	ldr	r3, [r7, #8]
 8003cc0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003cc4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003cc6:	683b      	ldr	r3, [r7, #0]
 8003cc8:	685b      	ldr	r3, [r3, #4]
 8003cca:	68ba      	ldr	r2, [r7, #8]
 8003ccc:	4313      	orrs	r3, r2
 8003cce:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	68ba      	ldr	r2, [r7, #8]
 8003cd6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	2201      	movs	r2, #1
 8003cdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	2200      	movs	r2, #0
 8003ce4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003ce8:	2300      	movs	r3, #0
}
 8003cea:	4618      	mov	r0, r3
 8003cec:	3714      	adds	r7, #20
 8003cee:	46bd      	mov	sp, r7
 8003cf0:	bc80      	pop	{r7}
 8003cf2:	4770      	bx	lr
 8003cf4:	40012c00 	.word	0x40012c00
 8003cf8:	40000400 	.word	0x40000400
 8003cfc:	40000800 	.word	0x40000800

08003d00 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003d00:	b480      	push	{r7}
 8003d02:	b083      	sub	sp, #12
 8003d04:	af00      	add	r7, sp, #0
 8003d06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003d08:	bf00      	nop
 8003d0a:	370c      	adds	r7, #12
 8003d0c:	46bd      	mov	sp, r7
 8003d0e:	bc80      	pop	{r7}
 8003d10:	4770      	bx	lr

08003d12 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003d12:	b480      	push	{r7}
 8003d14:	b083      	sub	sp, #12
 8003d16:	af00      	add	r7, sp, #0
 8003d18:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003d1a:	bf00      	nop
 8003d1c:	370c      	adds	r7, #12
 8003d1e:	46bd      	mov	sp, r7
 8003d20:	bc80      	pop	{r7}
 8003d22:	4770      	bx	lr

08003d24 <__libc_init_array>:
 8003d24:	b570      	push	{r4, r5, r6, lr}
 8003d26:	2600      	movs	r6, #0
 8003d28:	4d0c      	ldr	r5, [pc, #48]	; (8003d5c <__libc_init_array+0x38>)
 8003d2a:	4c0d      	ldr	r4, [pc, #52]	; (8003d60 <__libc_init_array+0x3c>)
 8003d2c:	1b64      	subs	r4, r4, r5
 8003d2e:	10a4      	asrs	r4, r4, #2
 8003d30:	42a6      	cmp	r6, r4
 8003d32:	d109      	bne.n	8003d48 <__libc_init_array+0x24>
 8003d34:	f000 f822 	bl	8003d7c <_init>
 8003d38:	2600      	movs	r6, #0
 8003d3a:	4d0a      	ldr	r5, [pc, #40]	; (8003d64 <__libc_init_array+0x40>)
 8003d3c:	4c0a      	ldr	r4, [pc, #40]	; (8003d68 <__libc_init_array+0x44>)
 8003d3e:	1b64      	subs	r4, r4, r5
 8003d40:	10a4      	asrs	r4, r4, #2
 8003d42:	42a6      	cmp	r6, r4
 8003d44:	d105      	bne.n	8003d52 <__libc_init_array+0x2e>
 8003d46:	bd70      	pop	{r4, r5, r6, pc}
 8003d48:	f855 3b04 	ldr.w	r3, [r5], #4
 8003d4c:	4798      	blx	r3
 8003d4e:	3601      	adds	r6, #1
 8003d50:	e7ee      	b.n	8003d30 <__libc_init_array+0xc>
 8003d52:	f855 3b04 	ldr.w	r3, [r5], #4
 8003d56:	4798      	blx	r3
 8003d58:	3601      	adds	r6, #1
 8003d5a:	e7f2      	b.n	8003d42 <__libc_init_array+0x1e>
 8003d5c:	08003dbc 	.word	0x08003dbc
 8003d60:	08003dbc 	.word	0x08003dbc
 8003d64:	08003dbc 	.word	0x08003dbc
 8003d68:	08003dc0 	.word	0x08003dc0

08003d6c <memset>:
 8003d6c:	4603      	mov	r3, r0
 8003d6e:	4402      	add	r2, r0
 8003d70:	4293      	cmp	r3, r2
 8003d72:	d100      	bne.n	8003d76 <memset+0xa>
 8003d74:	4770      	bx	lr
 8003d76:	f803 1b01 	strb.w	r1, [r3], #1
 8003d7a:	e7f9      	b.n	8003d70 <memset+0x4>

08003d7c <_init>:
 8003d7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d7e:	bf00      	nop
 8003d80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003d82:	bc08      	pop	{r3}
 8003d84:	469e      	mov	lr, r3
 8003d86:	4770      	bx	lr

08003d88 <_fini>:
 8003d88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d8a:	bf00      	nop
 8003d8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003d8e:	bc08      	pop	{r3}
 8003d90:	469e      	mov	lr, r3
 8003d92:	4770      	bx	lr
